
LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004760  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000361c  0800486c  0800486c  0001486c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e88  08007e88  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08007e88  08007e88  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007e88  08007e88  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e88  08007e88  00017e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e8c  08007e8c  00017e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007e90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  20000070  08007f00  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08007f00  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f08b  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a20  00000000  00000000  0002f167  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001010  00000000  00000000  00031b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c43  00000000  00000000  00032b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a0ba  00000000  00000000  000337db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001451e  00000000  00000000  0004d895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008eea3  00000000  00000000  00061db3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004890  00000000  00000000  000f0c58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000f54e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004854 	.word	0x08004854

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004854 	.word	0x08004854

0800014c <DEV_SPI_WRite>:
	HAL_Delay(xms);
}


void DEV_SPI_WRite(UBYTE _dat)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&_dat, 1, 500);
 8000156:	1df9      	adds	r1, r7, #7
 8000158:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800015c:	2201      	movs	r2, #1
 800015e:	4803      	ldr	r0, [pc, #12]	; (800016c <DEV_SPI_WRite+0x20>)
 8000160:	f002 fcf6 	bl	8002b50 <HAL_SPI_Transmit>
}
 8000164:	bf00      	nop
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}
 800016c:	200000b4 	.word	0x200000b4

08000170 <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
    DEV_Digital_Write(DEV_DC_PIN, 1);
 8000174:	2201      	movs	r2, #1
 8000176:	f44f 7180 	mov.w	r1, #256	; 0x100
 800017a:	480a      	ldr	r0, [pc, #40]	; (80001a4 <DEV_Module_Init+0x34>)
 800017c:	f002 f83c 	bl	80021f8 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_CS_PIN, 1);
 8000180:	2201      	movs	r2, #1
 8000182:	2140      	movs	r1, #64	; 0x40
 8000184:	4808      	ldr	r0, [pc, #32]	; (80001a8 <DEV_Module_Init+0x38>)
 8000186:	f002 f837 	bl	80021f8 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_RST_PIN, 1);
 800018a:	2201      	movs	r2, #1
 800018c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <DEV_Module_Init+0x34>)
 8000192:	f002 f831 	bl	80021f8 <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000196:	2100      	movs	r1, #0
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <DEV_Module_Init+0x3c>)
 800019a:	f002 ff13 	bl	8002fc4 <HAL_TIM_PWM_Start>
		return 0;
 800019e:	2300      	movs	r3, #0
}
 80001a0:	4618      	mov	r0, r3
 80001a2:	bd80      	pop	{r7, pc}
 80001a4:	40010800 	.word	0x40010800
 80001a8:	40010c00 	.word	0x40010c00
 80001ac:	20000110 	.word	0x20000110

080001b0 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 80001b0:	b590      	push	{r4, r7, lr}
 80001b2:	b083      	sub	sp, #12
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	4604      	mov	r4, r0
 80001b8:	4608      	mov	r0, r1
 80001ba:	4611      	mov	r1, r2
 80001bc:	461a      	mov	r2, r3
 80001be:	4623      	mov	r3, r4
 80001c0:	80fb      	strh	r3, [r7, #6]
 80001c2:	4603      	mov	r3, r0
 80001c4:	80bb      	strh	r3, [r7, #4]
 80001c6:	460b      	mov	r3, r1
 80001c8:	807b      	strh	r3, [r7, #2]
 80001ca:	4613      	mov	r3, r2
 80001cc:	803b      	strh	r3, [r7, #0]
    Paint.WidthMemory = Width;
 80001ce:	4a1c      	ldr	r2, [pc, #112]	; (8000240 <Paint_NewImage+0x90>)
 80001d0:	88fb      	ldrh	r3, [r7, #6]
 80001d2:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 80001d4:	4a1a      	ldr	r2, [pc, #104]	; (8000240 <Paint_NewImage+0x90>)
 80001d6:	88bb      	ldrh	r3, [r7, #4]
 80001d8:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 80001da:	4a19      	ldr	r2, [pc, #100]	; (8000240 <Paint_NewImage+0x90>)
 80001dc:	883b      	ldrh	r3, [r7, #0]
 80001de:	8193      	strh	r3, [r2, #12]
    Paint.WidthByte = Width;
 80001e0:	4a17      	ldr	r2, [pc, #92]	; (8000240 <Paint_NewImage+0x90>)
 80001e2:	88fb      	ldrh	r3, [r7, #6]
 80001e4:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 80001e6:	4a16      	ldr	r2, [pc, #88]	; (8000240 <Paint_NewImage+0x90>)
 80001e8:	88bb      	ldrh	r3, [r7, #4]
 80001ea:	8293      	strh	r3, [r2, #20]
    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
 80001ec:	4b14      	ldr	r3, [pc, #80]	; (8000240 <Paint_NewImage+0x90>)
 80001ee:	8a5b      	ldrh	r3, [r3, #18]
 80001f0:	b29b      	uxth	r3, r3
 80001f2:	4619      	mov	r1, r3
 80001f4:	4b12      	ldr	r3, [pc, #72]	; (8000240 <Paint_NewImage+0x90>)
 80001f6:	8a9b      	ldrh	r3, [r3, #20]
 80001f8:	b29b      	uxth	r3, r3
 80001fa:	461a      	mov	r2, r3
 80001fc:	4811      	ldr	r0, [pc, #68]	; (8000244 <Paint_NewImage+0x94>)
 80001fe:	f003 fcfd 	bl	8003bfc <iprintf>
   
    Paint.Rotate = Rotate;
 8000202:	4a0f      	ldr	r2, [pc, #60]	; (8000240 <Paint_NewImage+0x90>)
 8000204:	887b      	ldrh	r3, [r7, #2]
 8000206:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8000208:	4b0d      	ldr	r3, [pc, #52]	; (8000240 <Paint_NewImage+0x90>)
 800020a:	2200      	movs	r2, #0
 800020c:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 800020e:	887b      	ldrh	r3, [r7, #2]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d002      	beq.n	800021a <Paint_NewImage+0x6a>
 8000214:	887b      	ldrh	r3, [r7, #2]
 8000216:	2bb4      	cmp	r3, #180	; 0xb4
 8000218:	d106      	bne.n	8000228 <Paint_NewImage+0x78>
        Paint.Width = Width;
 800021a:	4a09      	ldr	r2, [pc, #36]	; (8000240 <Paint_NewImage+0x90>)
 800021c:	88fb      	ldrh	r3, [r7, #6]
 800021e:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8000220:	4a07      	ldr	r2, [pc, #28]	; (8000240 <Paint_NewImage+0x90>)
 8000222:	88bb      	ldrh	r3, [r7, #4]
 8000224:	80d3      	strh	r3, [r2, #6]
 8000226:	e006      	b.n	8000236 <Paint_NewImage+0x86>
    } else {
        Paint.Width = Height;
 8000228:	4a05      	ldr	r2, [pc, #20]	; (8000240 <Paint_NewImage+0x90>)
 800022a:	88bb      	ldrh	r3, [r7, #4]
 800022c:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 800022e:	4a04      	ldr	r2, [pc, #16]	; (8000240 <Paint_NewImage+0x90>)
 8000230:	88fb      	ldrh	r3, [r7, #6]
 8000232:	80d3      	strh	r3, [r2, #6]
    }
}
 8000234:	bf00      	nop
 8000236:	bf00      	nop
 8000238:	370c      	adds	r7, #12
 800023a:	46bd      	mov	sp, r7
 800023c:	bd90      	pop	{r4, r7, pc}
 800023e:	bf00      	nop
 8000240:	2000008c 	.word	0x2000008c
 8000244:	0800486c 	.word	0x0800486c

08000248 <Paint_SetClearFuntion>:
function:	Select Clear Funtion
parameter:
      Clear :   Pointer to Clear funtion 
******************************************************************************/
void Paint_SetClearFuntion(void (*Clear)(UWORD))
{
 8000248:	b480      	push	{r7}
 800024a:	b083      	sub	sp, #12
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  CLEAR=Clear;
 8000250:	4a03      	ldr	r2, [pc, #12]	; (8000260 <Paint_SetClearFuntion+0x18>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	6013      	str	r3, [r2, #0]
}
 8000256:	bf00      	nop
 8000258:	370c      	adds	r7, #12
 800025a:	46bd      	mov	sp, r7
 800025c:	bc80      	pop	{r7}
 800025e:	4770      	bx	lr
 8000260:	200000a8 	.word	0x200000a8

08000264 <Paint_SetDisplayFuntion>:
function:	Select DisplayF untion
parameter:
      Display :   Pointer to display funtion 
******************************************************************************/
void Paint_SetDisplayFuntion(void (*Display)(UWORD,UWORD,UWORD))
{
 8000264:	b480      	push	{r7}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
  DISPLAY=Display;
 800026c:	4a03      	ldr	r2, [pc, #12]	; (800027c <Paint_SetDisplayFuntion+0x18>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	6013      	str	r3, [r2, #0]
}
 8000272:	bf00      	nop
 8000274:	370c      	adds	r7, #12
 8000276:	46bd      	mov	sp, r7
 8000278:	bc80      	pop	{r7}
 800027a:	4770      	bx	lr
 800027c:	200000a4 	.word	0x200000a4

08000280 <Paint_SetPixel>:
    Xpoint  :   At point X
    Ypoint  :   At point Y
    Color   :   Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	80fb      	strh	r3, [r7, #6]
 800028a:	460b      	mov	r3, r1
 800028c:	80bb      	strh	r3, [r7, #4]
 800028e:	4613      	mov	r3, r2
 8000290:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8000292:	4b50      	ldr	r3, [pc, #320]	; (80003d4 <Paint_SetPixel+0x154>)
 8000294:	889b      	ldrh	r3, [r3, #4]
 8000296:	b29b      	uxth	r3, r3
 8000298:	88fa      	ldrh	r2, [r7, #6]
 800029a:	429a      	cmp	r2, r3
 800029c:	d805      	bhi.n	80002aa <Paint_SetPixel+0x2a>
 800029e:	4b4d      	ldr	r3, [pc, #308]	; (80003d4 <Paint_SetPixel+0x154>)
 80002a0:	88db      	ldrh	r3, [r3, #6]
 80002a2:	b29b      	uxth	r3, r3
 80002a4:	88ba      	ldrh	r2, [r7, #4]
 80002a6:	429a      	cmp	r2, r3
 80002a8:	d903      	bls.n	80002b2 <Paint_SetPixel+0x32>
        Debug("Exceeding display boundaries\r\n");
 80002aa:	484b      	ldr	r0, [pc, #300]	; (80003d8 <Paint_SetPixel+0x158>)
 80002ac:	f003 fd0c 	bl	8003cc8 <puts>
        return;
 80002b0:	e08c      	b.n	80003cc <Paint_SetPixel+0x14c>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 80002b2:	4b48      	ldr	r3, [pc, #288]	; (80003d4 <Paint_SetPixel+0x154>)
 80002b4:	89db      	ldrh	r3, [r3, #14]
 80002b6:	b29b      	uxth	r3, r3
 80002b8:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80002bc:	d02d      	beq.n	800031a <Paint_SetPixel+0x9a>
 80002be:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80002c2:	f300 8080 	bgt.w	80003c6 <Paint_SetPixel+0x146>
 80002c6:	2bb4      	cmp	r3, #180	; 0xb4
 80002c8:	d016      	beq.n	80002f8 <Paint_SetPixel+0x78>
 80002ca:	2bb4      	cmp	r3, #180	; 0xb4
 80002cc:	dc7b      	bgt.n	80003c6 <Paint_SetPixel+0x146>
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d002      	beq.n	80002d8 <Paint_SetPixel+0x58>
 80002d2:	2b5a      	cmp	r3, #90	; 0x5a
 80002d4:	d005      	beq.n	80002e2 <Paint_SetPixel+0x62>
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;

    default:
        return;
 80002d6:	e076      	b.n	80003c6 <Paint_SetPixel+0x146>
        X = Xpoint;
 80002d8:	88fb      	ldrh	r3, [r7, #6]
 80002da:	81fb      	strh	r3, [r7, #14]
        Y = Ypoint;  
 80002dc:	88bb      	ldrh	r3, [r7, #4]
 80002de:	81bb      	strh	r3, [r7, #12]
        break;
 80002e0:	e026      	b.n	8000330 <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Ypoint - 1;
 80002e2:	4b3c      	ldr	r3, [pc, #240]	; (80003d4 <Paint_SetPixel+0x154>)
 80002e4:	891b      	ldrh	r3, [r3, #8]
 80002e6:	b29a      	uxth	r2, r3
 80002e8:	88bb      	ldrh	r3, [r7, #4]
 80002ea:	1ad3      	subs	r3, r2, r3
 80002ec:	b29b      	uxth	r3, r3
 80002ee:	3b01      	subs	r3, #1
 80002f0:	81fb      	strh	r3, [r7, #14]
        Y = Xpoint;
 80002f2:	88fb      	ldrh	r3, [r7, #6]
 80002f4:	81bb      	strh	r3, [r7, #12]
        break;
 80002f6:	e01b      	b.n	8000330 <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Xpoint - 1;
 80002f8:	4b36      	ldr	r3, [pc, #216]	; (80003d4 <Paint_SetPixel+0x154>)
 80002fa:	891b      	ldrh	r3, [r3, #8]
 80002fc:	b29a      	uxth	r2, r3
 80002fe:	88fb      	ldrh	r3, [r7, #6]
 8000300:	1ad3      	subs	r3, r2, r3
 8000302:	b29b      	uxth	r3, r3
 8000304:	3b01      	subs	r3, #1
 8000306:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Ypoint - 1;
 8000308:	4b32      	ldr	r3, [pc, #200]	; (80003d4 <Paint_SetPixel+0x154>)
 800030a:	895b      	ldrh	r3, [r3, #10]
 800030c:	b29a      	uxth	r2, r3
 800030e:	88bb      	ldrh	r3, [r7, #4]
 8000310:	1ad3      	subs	r3, r2, r3
 8000312:	b29b      	uxth	r3, r3
 8000314:	3b01      	subs	r3, #1
 8000316:	81bb      	strh	r3, [r7, #12]
        break;
 8000318:	e00a      	b.n	8000330 <Paint_SetPixel+0xb0>
        X = Ypoint;
 800031a:	88bb      	ldrh	r3, [r7, #4]
 800031c:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Xpoint - 1;
 800031e:	4b2d      	ldr	r3, [pc, #180]	; (80003d4 <Paint_SetPixel+0x154>)
 8000320:	895b      	ldrh	r3, [r3, #10]
 8000322:	b29a      	uxth	r2, r3
 8000324:	88fb      	ldrh	r3, [r7, #6]
 8000326:	1ad3      	subs	r3, r2, r3
 8000328:	b29b      	uxth	r3, r3
 800032a:	3b01      	subs	r3, #1
 800032c:	81bb      	strh	r3, [r7, #12]
        break;
 800032e:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 8000330:	4b28      	ldr	r3, [pc, #160]	; (80003d4 <Paint_SetPixel+0x154>)
 8000332:	8a1b      	ldrh	r3, [r3, #16]
 8000334:	b29b      	uxth	r3, r3
 8000336:	2b03      	cmp	r3, #3
 8000338:	d847      	bhi.n	80003ca <Paint_SetPixel+0x14a>
 800033a:	a201      	add	r2, pc, #4	; (adr r2, 8000340 <Paint_SetPixel+0xc0>)
 800033c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000340:	08000397 	.word	0x08000397
 8000344:	08000351 	.word	0x08000351
 8000348:	08000363 	.word	0x08000363
 800034c:	08000375 	.word	0x08000375
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 8000350:	4b20      	ldr	r3, [pc, #128]	; (80003d4 <Paint_SetPixel+0x154>)
 8000352:	891b      	ldrh	r3, [r3, #8]
 8000354:	b29a      	uxth	r2, r3
 8000356:	89fb      	ldrh	r3, [r7, #14]
 8000358:	1ad3      	subs	r3, r2, r3
 800035a:	b29b      	uxth	r3, r3
 800035c:	3b01      	subs	r3, #1
 800035e:	81fb      	strh	r3, [r7, #14]
        break;
 8000360:	e01a      	b.n	8000398 <Paint_SetPixel+0x118>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 8000362:	4b1c      	ldr	r3, [pc, #112]	; (80003d4 <Paint_SetPixel+0x154>)
 8000364:	895b      	ldrh	r3, [r3, #10]
 8000366:	b29a      	uxth	r2, r3
 8000368:	89bb      	ldrh	r3, [r7, #12]
 800036a:	1ad3      	subs	r3, r2, r3
 800036c:	b29b      	uxth	r3, r3
 800036e:	3b01      	subs	r3, #1
 8000370:	81bb      	strh	r3, [r7, #12]
        break;
 8000372:	e011      	b.n	8000398 <Paint_SetPixel+0x118>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 8000374:	4b17      	ldr	r3, [pc, #92]	; (80003d4 <Paint_SetPixel+0x154>)
 8000376:	891b      	ldrh	r3, [r3, #8]
 8000378:	b29a      	uxth	r2, r3
 800037a:	89fb      	ldrh	r3, [r7, #14]
 800037c:	1ad3      	subs	r3, r2, r3
 800037e:	b29b      	uxth	r3, r3
 8000380:	3b01      	subs	r3, #1
 8000382:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Y - 1;
 8000384:	4b13      	ldr	r3, [pc, #76]	; (80003d4 <Paint_SetPixel+0x154>)
 8000386:	895b      	ldrh	r3, [r3, #10]
 8000388:	b29a      	uxth	r2, r3
 800038a:	89bb      	ldrh	r3, [r7, #12]
 800038c:	1ad3      	subs	r3, r2, r3
 800038e:	b29b      	uxth	r3, r3
 8000390:	3b01      	subs	r3, #1
 8000392:	81bb      	strh	r3, [r7, #12]
        break;
 8000394:	e000      	b.n	8000398 <Paint_SetPixel+0x118>
        break;
 8000396:	bf00      	nop
    default:
        return;
    }

    // printf("x = %d, y = %d\r\n", X, Y);
    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8000398:	4b0e      	ldr	r3, [pc, #56]	; (80003d4 <Paint_SetPixel+0x154>)
 800039a:	891b      	ldrh	r3, [r3, #8]
 800039c:	b29b      	uxth	r3, r3
 800039e:	89fa      	ldrh	r2, [r7, #14]
 80003a0:	429a      	cmp	r2, r3
 80003a2:	d805      	bhi.n	80003b0 <Paint_SetPixel+0x130>
 80003a4:	4b0b      	ldr	r3, [pc, #44]	; (80003d4 <Paint_SetPixel+0x154>)
 80003a6:	895b      	ldrh	r3, [r3, #10]
 80003a8:	b29b      	uxth	r3, r3
 80003aa:	89ba      	ldrh	r2, [r7, #12]
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d903      	bls.n	80003b8 <Paint_SetPixel+0x138>
        Debug("Exceeding display boundaries\r\n");
 80003b0:	4809      	ldr	r0, [pc, #36]	; (80003d8 <Paint_SetPixel+0x158>)
 80003b2:	f003 fc89 	bl	8003cc8 <puts>
        return;
 80003b6:	e009      	b.n	80003cc <Paint_SetPixel+0x14c>
    }
    
   // UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
		DISPLAY(X,Y, Color);
 80003b8:	4b08      	ldr	r3, [pc, #32]	; (80003dc <Paint_SetPixel+0x15c>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	887a      	ldrh	r2, [r7, #2]
 80003be:	89b9      	ldrh	r1, [r7, #12]
 80003c0:	89f8      	ldrh	r0, [r7, #14]
 80003c2:	4798      	blx	r3
 80003c4:	e002      	b.n	80003cc <Paint_SetPixel+0x14c>
        return;
 80003c6:	bf00      	nop
 80003c8:	e000      	b.n	80003cc <Paint_SetPixel+0x14c>
        return;
 80003ca:	bf00      	nop
}
 80003cc:	3710      	adds	r7, #16
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	2000008c 	.word	0x2000008c
 80003d8:	0800496c 	.word	0x0800496c
 80003dc:	200000a4 	.word	0x200000a4

080003e0 <Paint_Clear>:
function:	Clear the color of the picture
parameter:
    Color   :   Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{	
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	4603      	mov	r3, r0
 80003e8:	80fb      	strh	r3, [r7, #6]
	CLEAR(Color);
 80003ea:	4b04      	ldr	r3, [pc, #16]	; (80003fc <Paint_Clear+0x1c>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	88fa      	ldrh	r2, [r7, #6]
 80003f0:	4610      	mov	r0, r2
 80003f2:	4798      	blx	r3
}
 80003f4:	bf00      	nop
 80003f6:	3708      	adds	r7, #8
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	200000a8 	.word	0x200000a8

08000400 <Paint_DrawPoint>:
    Color		:   Set color
    Dot_Pixel	:	point size
******************************************************************************/
void Paint_DrawPoint( UWORD Xpoint,       UWORD Ypoint, UWORD Color,
                      DOT_PIXEL Dot_Pixel,DOT_STYLE Dot_FillWay)
{
 8000400:	b590      	push	{r4, r7, lr}
 8000402:	b085      	sub	sp, #20
 8000404:	af00      	add	r7, sp, #0
 8000406:	4604      	mov	r4, r0
 8000408:	4608      	mov	r0, r1
 800040a:	4611      	mov	r1, r2
 800040c:	461a      	mov	r2, r3
 800040e:	4623      	mov	r3, r4
 8000410:	80fb      	strh	r3, [r7, #6]
 8000412:	4603      	mov	r3, r0
 8000414:	80bb      	strh	r3, [r7, #4]
 8000416:	460b      	mov	r3, r1
 8000418:	807b      	strh	r3, [r7, #2]
 800041a:	4613      	mov	r3, r2
 800041c:	707b      	strb	r3, [r7, #1]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 800041e:	4b44      	ldr	r3, [pc, #272]	; (8000530 <Paint_DrawPoint+0x130>)
 8000420:	889b      	ldrh	r3, [r3, #4]
 8000422:	b29b      	uxth	r3, r3
 8000424:	88fa      	ldrh	r2, [r7, #6]
 8000426:	429a      	cmp	r2, r3
 8000428:	d805      	bhi.n	8000436 <Paint_DrawPoint+0x36>
 800042a:	4b41      	ldr	r3, [pc, #260]	; (8000530 <Paint_DrawPoint+0x130>)
 800042c:	88db      	ldrh	r3, [r3, #6]
 800042e:	b29b      	uxth	r3, r3
 8000430:	88ba      	ldrh	r2, [r7, #4]
 8000432:	429a      	cmp	r2, r3
 8000434:	d903      	bls.n	800043e <Paint_DrawPoint+0x3e>
        Debug("Paint_DrawPoint Input exceeds the normal display range\r\n");
 8000436:	483f      	ldr	r0, [pc, #252]	; (8000534 <Paint_DrawPoint+0x134>)
 8000438:	f003 fc46 	bl	8003cc8 <puts>
        return;
 800043c:	e074      	b.n	8000528 <Paint_DrawPoint+0x128>
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_FillWay == DOT_FILL_AROUND) {
 800043e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000442:	2b01      	cmp	r3, #1
 8000444:	d144      	bne.n	80004d0 <Paint_DrawPoint+0xd0>
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++) {
 8000446:	2300      	movs	r3, #0
 8000448:	81fb      	strh	r3, [r7, #14]
 800044a:	e039      	b.n	80004c0 <Paint_DrawPoint+0xc0>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 800044c:	2300      	movs	r3, #0
 800044e:	81bb      	strh	r3, [r7, #12]
 8000450:	e029      	b.n	80004a6 <Paint_DrawPoint+0xa6>
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 8000452:	88fa      	ldrh	r2, [r7, #6]
 8000454:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000458:	441a      	add	r2, r3
 800045a:	787b      	ldrb	r3, [r7, #1]
 800045c:	1ad3      	subs	r3, r2, r3
 800045e:	2b00      	cmp	r3, #0
 8000460:	db28      	blt.n	80004b4 <Paint_DrawPoint+0xb4>
 8000462:	88ba      	ldrh	r2, [r7, #4]
 8000464:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000468:	441a      	add	r2, r3
 800046a:	787b      	ldrb	r3, [r7, #1]
 800046c:	1ad3      	subs	r3, r2, r3
 800046e:	2b00      	cmp	r3, #0
 8000470:	db20      	blt.n	80004b4 <Paint_DrawPoint+0xb4>
                    break;
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 8000472:	89fa      	ldrh	r2, [r7, #14]
 8000474:	88fb      	ldrh	r3, [r7, #6]
 8000476:	4413      	add	r3, r2
 8000478:	b29a      	uxth	r2, r3
 800047a:	787b      	ldrb	r3, [r7, #1]
 800047c:	b29b      	uxth	r3, r3
 800047e:	1ad3      	subs	r3, r2, r3
 8000480:	b298      	uxth	r0, r3
 8000482:	89ba      	ldrh	r2, [r7, #12]
 8000484:	88bb      	ldrh	r3, [r7, #4]
 8000486:	4413      	add	r3, r2
 8000488:	b29a      	uxth	r2, r3
 800048a:	787b      	ldrb	r3, [r7, #1]
 800048c:	b29b      	uxth	r3, r3
 800048e:	1ad3      	subs	r3, r2, r3
 8000490:	b29b      	uxth	r3, r3
 8000492:	887a      	ldrh	r2, [r7, #2]
 8000494:	4619      	mov	r1, r3
 8000496:	f7ff fef3 	bl	8000280 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 800049a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800049e:	b29b      	uxth	r3, r3
 80004a0:	3301      	adds	r3, #1
 80004a2:	b29b      	uxth	r3, r3
 80004a4:	81bb      	strh	r3, [r7, #12]
 80004a6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80004aa:	787b      	ldrb	r3, [r7, #1]
 80004ac:	005b      	lsls	r3, r3, #1
 80004ae:	3b01      	subs	r3, #1
 80004b0:	429a      	cmp	r2, r3
 80004b2:	dbce      	blt.n	8000452 <Paint_DrawPoint+0x52>
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++) {
 80004b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80004b8:	b29b      	uxth	r3, r3
 80004ba:	3301      	adds	r3, #1
 80004bc:	b29b      	uxth	r3, r3
 80004be:	81fb      	strh	r3, [r7, #14]
 80004c0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80004c4:	787b      	ldrb	r3, [r7, #1]
 80004c6:	005b      	lsls	r3, r3, #1
 80004c8:	3b01      	subs	r3, #1
 80004ca:	429a      	cmp	r2, r3
 80004cc:	dbbe      	blt.n	800044c <Paint_DrawPoint+0x4c>
 80004ce:	e02b      	b.n	8000528 <Paint_DrawPoint+0x128>
            }
        }
    } else {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 80004d0:	2300      	movs	r3, #0
 80004d2:	81fb      	strh	r3, [r7, #14]
 80004d4:	e023      	b.n	800051e <Paint_DrawPoint+0x11e>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 80004d6:	2300      	movs	r3, #0
 80004d8:	81bb      	strh	r3, [r7, #12]
 80004da:	e015      	b.n	8000508 <Paint_DrawPoint+0x108>
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 80004dc:	89fa      	ldrh	r2, [r7, #14]
 80004de:	88fb      	ldrh	r3, [r7, #6]
 80004e0:	4413      	add	r3, r2
 80004e2:	b29b      	uxth	r3, r3
 80004e4:	3b01      	subs	r3, #1
 80004e6:	b298      	uxth	r0, r3
 80004e8:	89ba      	ldrh	r2, [r7, #12]
 80004ea:	88bb      	ldrh	r3, [r7, #4]
 80004ec:	4413      	add	r3, r2
 80004ee:	b29b      	uxth	r3, r3
 80004f0:	3b01      	subs	r3, #1
 80004f2:	b29b      	uxth	r3, r3
 80004f4:	887a      	ldrh	r2, [r7, #2]
 80004f6:	4619      	mov	r1, r3
 80004f8:	f7ff fec2 	bl	8000280 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 80004fc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000500:	b29b      	uxth	r3, r3
 8000502:	3301      	adds	r3, #1
 8000504:	b29b      	uxth	r3, r3
 8000506:	81bb      	strh	r3, [r7, #12]
 8000508:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800050c:	787b      	ldrb	r3, [r7, #1]
 800050e:	429a      	cmp	r2, r3
 8000510:	dbe4      	blt.n	80004dc <Paint_DrawPoint+0xdc>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 8000512:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000516:	b29b      	uxth	r3, r3
 8000518:	3301      	adds	r3, #1
 800051a:	b29b      	uxth	r3, r3
 800051c:	81fb      	strh	r3, [r7, #14]
 800051e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000522:	787b      	ldrb	r3, [r7, #1]
 8000524:	429a      	cmp	r2, r3
 8000526:	dbd6      	blt.n	80004d6 <Paint_DrawPoint+0xd6>
            }
        }
    }
}
 8000528:	3714      	adds	r7, #20
 800052a:	46bd      	mov	sp, r7
 800052c:	bd90      	pop	{r4, r7, pc}
 800052e:	bf00      	nop
 8000530:	2000008c 	.word	0x2000008c
 8000534:	08004994 	.word	0x08004994

08000538 <Paint_DrawLine>:
    Yend   ：End point Ypoint coordinate
    Color  ：The color of the line segment
******************************************************************************/
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, 
                    UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
 8000538:	b590      	push	{r4, r7, lr}
 800053a:	b08d      	sub	sp, #52	; 0x34
 800053c:	af02      	add	r7, sp, #8
 800053e:	4604      	mov	r4, r0
 8000540:	4608      	mov	r0, r1
 8000542:	4611      	mov	r1, r2
 8000544:	461a      	mov	r2, r3
 8000546:	4623      	mov	r3, r4
 8000548:	80fb      	strh	r3, [r7, #6]
 800054a:	4603      	mov	r3, r0
 800054c:	80bb      	strh	r3, [r7, #4]
 800054e:	460b      	mov	r3, r1
 8000550:	807b      	strh	r3, [r7, #2]
 8000552:	4613      	mov	r3, r2
 8000554:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8000556:	4b4d      	ldr	r3, [pc, #308]	; (800068c <Paint_DrawLine+0x154>)
 8000558:	889b      	ldrh	r3, [r3, #4]
 800055a:	b29b      	uxth	r3, r3
 800055c:	88fa      	ldrh	r2, [r7, #6]
 800055e:	429a      	cmp	r2, r3
 8000560:	d811      	bhi.n	8000586 <Paint_DrawLine+0x4e>
 8000562:	4b4a      	ldr	r3, [pc, #296]	; (800068c <Paint_DrawLine+0x154>)
 8000564:	88db      	ldrh	r3, [r3, #6]
 8000566:	b29b      	uxth	r3, r3
 8000568:	88ba      	ldrh	r2, [r7, #4]
 800056a:	429a      	cmp	r2, r3
 800056c:	d80b      	bhi.n	8000586 <Paint_DrawLine+0x4e>
        Xend > Paint.Width || Yend > Paint.Height) {
 800056e:	4b47      	ldr	r3, [pc, #284]	; (800068c <Paint_DrawLine+0x154>)
 8000570:	889b      	ldrh	r3, [r3, #4]
 8000572:	b29b      	uxth	r3, r3
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8000574:	887a      	ldrh	r2, [r7, #2]
 8000576:	429a      	cmp	r2, r3
 8000578:	d805      	bhi.n	8000586 <Paint_DrawLine+0x4e>
        Xend > Paint.Width || Yend > Paint.Height) {
 800057a:	4b44      	ldr	r3, [pc, #272]	; (800068c <Paint_DrawLine+0x154>)
 800057c:	88db      	ldrh	r3, [r3, #6]
 800057e:	b29b      	uxth	r3, r3
 8000580:	883a      	ldrh	r2, [r7, #0]
 8000582:	429a      	cmp	r2, r3
 8000584:	d903      	bls.n	800058e <Paint_DrawLine+0x56>
        Debug("Paint_DrawLine Input exceeds the normal display range\r\n");
 8000586:	4842      	ldr	r0, [pc, #264]	; (8000690 <Paint_DrawLine+0x158>)
 8000588:	f003 fb9e 	bl	8003cc8 <puts>
        return;
 800058c:	e07b      	b.n	8000686 <Paint_DrawLine+0x14e>
    }

    UWORD Xpoint = Xstart;
 800058e:	88fb      	ldrh	r3, [r7, #6]
 8000590:	84fb      	strh	r3, [r7, #38]	; 0x26
    UWORD Ypoint = Ystart;
 8000592:	88bb      	ldrh	r3, [r7, #4]
 8000594:	84bb      	strh	r3, [r7, #36]	; 0x24
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 8000596:	887a      	ldrh	r2, [r7, #2]
 8000598:	88fb      	ldrh	r3, [r7, #6]
 800059a:	1ad3      	subs	r3, r2, r3
 800059c:	2b00      	cmp	r3, #0
 800059e:	bfb8      	it	lt
 80005a0:	425b      	neglt	r3, r3
 80005a2:	61bb      	str	r3, [r7, #24]
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 80005a4:	883a      	ldrh	r2, [r7, #0]
 80005a6:	88bb      	ldrh	r3, [r7, #4]
 80005a8:	1ad3      	subs	r3, r2, r3
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	bfb8      	it	lt
 80005ae:	425b      	neglt	r3, r3
 80005b0:	425b      	negs	r3, r3
 80005b2:	617b      	str	r3, [r7, #20]

    // Increment direction, 1 is positive, -1 is counter;
    int XAddway = Xstart < Xend ? 1 : -1;
 80005b4:	88fa      	ldrh	r2, [r7, #6]
 80005b6:	887b      	ldrh	r3, [r7, #2]
 80005b8:	429a      	cmp	r2, r3
 80005ba:	d201      	bcs.n	80005c0 <Paint_DrawLine+0x88>
 80005bc:	2301      	movs	r3, #1
 80005be:	e001      	b.n	80005c4 <Paint_DrawLine+0x8c>
 80005c0:	f04f 33ff 	mov.w	r3, #4294967295
 80005c4:	613b      	str	r3, [r7, #16]
    int YAddway = Ystart < Yend ? 1 : -1;
 80005c6:	88ba      	ldrh	r2, [r7, #4]
 80005c8:	883b      	ldrh	r3, [r7, #0]
 80005ca:	429a      	cmp	r2, r3
 80005cc:	d201      	bcs.n	80005d2 <Paint_DrawLine+0x9a>
 80005ce:	2301      	movs	r3, #1
 80005d0:	e001      	b.n	80005d6 <Paint_DrawLine+0x9e>
 80005d2:	f04f 33ff 	mov.w	r3, #4294967295
 80005d6:	60fb      	str	r3, [r7, #12]

    //Cumulative error
    int Esp = dx + dy;
 80005d8:	69ba      	ldr	r2, [r7, #24]
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	4413      	add	r3, r2
 80005de:	623b      	str	r3, [r7, #32]
    char Dotted_Len = 0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	77fb      	strb	r3, [r7, #31]

    for (;;) {
        Dotted_Len++;
 80005e4:	7ffb      	ldrb	r3, [r7, #31]
 80005e6:	3301      	adds	r3, #1
 80005e8:	77fb      	strb	r3, [r7, #31]
        //Painted dotted line, 2 point is really virtual
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0) {
 80005ea:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d118      	bne.n	8000624 <Paint_DrawLine+0xec>
 80005f2:	7ffa      	ldrb	r2, [r7, #31]
 80005f4:	4b27      	ldr	r3, [pc, #156]	; (8000694 <Paint_DrawLine+0x15c>)
 80005f6:	fba3 1302 	umull	r1, r3, r3, r2
 80005fa:	0859      	lsrs	r1, r3, #1
 80005fc:	460b      	mov	r3, r1
 80005fe:	005b      	lsls	r3, r3, #1
 8000600:	440b      	add	r3, r1
 8000602:	1ad3      	subs	r3, r2, r3
 8000604:	b2db      	uxtb	r3, r3
 8000606:	2b00      	cmp	r3, #0
 8000608:	d10c      	bne.n	8000624 <Paint_DrawLine+0xec>
            //Debug("LINE_DOTTED\r\n");
            Paint_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width, DOT_STYLE_DFT);
 800060a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800060e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8000610:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8000612:	2201      	movs	r2, #1
 8000614:	9200      	str	r2, [sp, #0]
 8000616:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800061a:	f7ff fef1 	bl	8000400 <Paint_DrawPoint>
            Dotted_Len = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	77fb      	strb	r3, [r7, #31]
 8000622:	e008      	b.n	8000636 <Paint_DrawLine+0xfe>
        } else {
            Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 8000624:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000628:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800062a:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800062c:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800062e:	2401      	movs	r4, #1
 8000630:	9400      	str	r4, [sp, #0]
 8000632:	f7ff fee5 	bl	8000400 <Paint_DrawPoint>
        }
        if (2 * Esp >= dy) {
 8000636:	6a3b      	ldr	r3, [r7, #32]
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	697a      	ldr	r2, [r7, #20]
 800063c:	429a      	cmp	r2, r3
 800063e:	dc0c      	bgt.n	800065a <Paint_DrawLine+0x122>
            if (Xpoint == Xend)
 8000640:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000642:	887b      	ldrh	r3, [r7, #2]
 8000644:	429a      	cmp	r2, r3
 8000646:	d01b      	beq.n	8000680 <Paint_DrawLine+0x148>
                break;
            Esp += dy;
 8000648:	6a3a      	ldr	r2, [r7, #32]
 800064a:	697b      	ldr	r3, [r7, #20]
 800064c:	4413      	add	r3, r2
 800064e:	623b      	str	r3, [r7, #32]
            Xpoint += XAddway;
 8000650:	693b      	ldr	r3, [r7, #16]
 8000652:	b29a      	uxth	r2, r3
 8000654:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000656:	4413      	add	r3, r2
 8000658:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        if (2 * Esp <= dx) {
 800065a:	6a3b      	ldr	r3, [r7, #32]
 800065c:	005b      	lsls	r3, r3, #1
 800065e:	69ba      	ldr	r2, [r7, #24]
 8000660:	429a      	cmp	r2, r3
 8000662:	dbbf      	blt.n	80005e4 <Paint_DrawLine+0xac>
            if (Ypoint == Yend)
 8000664:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000666:	883b      	ldrh	r3, [r7, #0]
 8000668:	429a      	cmp	r2, r3
 800066a:	d00b      	beq.n	8000684 <Paint_DrawLine+0x14c>
                break;
            Esp += dx;
 800066c:	6a3a      	ldr	r2, [r7, #32]
 800066e:	69bb      	ldr	r3, [r7, #24]
 8000670:	4413      	add	r3, r2
 8000672:	623b      	str	r3, [r7, #32]
            Ypoint += YAddway;
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	b29a      	uxth	r2, r3
 8000678:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800067a:	4413      	add	r3, r2
 800067c:	84bb      	strh	r3, [r7, #36]	; 0x24
        Dotted_Len++;
 800067e:	e7b1      	b.n	80005e4 <Paint_DrawLine+0xac>
                break;
 8000680:	bf00      	nop
 8000682:	e000      	b.n	8000686 <Paint_DrawLine+0x14e>
                break;
 8000684:	bf00      	nop
        }
    }
}
 8000686:	372c      	adds	r7, #44	; 0x2c
 8000688:	46bd      	mov	sp, r7
 800068a:	bd90      	pop	{r4, r7, pc}
 800068c:	2000008c 	.word	0x2000008c
 8000690:	080049d4 	.word	0x080049d4
 8000694:	aaaaaaab 	.word	0xaaaaaaab

08000698 <Paint_DrawCircle>:
    Color     ：The color of the ：circle segment
    Filled    : Whether it is filled: 1 filling 0：Do not
******************************************************************************/
void Paint_DrawCircle(  UWORD X_Center, UWORD Y_Center, UWORD Radius, 
                        UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill )
{
 8000698:	b590      	push	{r4, r7, lr}
 800069a:	b087      	sub	sp, #28
 800069c:	af02      	add	r7, sp, #8
 800069e:	4604      	mov	r4, r0
 80006a0:	4608      	mov	r0, r1
 80006a2:	4611      	mov	r1, r2
 80006a4:	461a      	mov	r2, r3
 80006a6:	4623      	mov	r3, r4
 80006a8:	80fb      	strh	r3, [r7, #6]
 80006aa:	4603      	mov	r3, r0
 80006ac:	80bb      	strh	r3, [r7, #4]
 80006ae:	460b      	mov	r3, r1
 80006b0:	807b      	strh	r3, [r7, #2]
 80006b2:	4613      	mov	r3, r2
 80006b4:	803b      	strh	r3, [r7, #0]
    if (X_Center > Paint.Width || Y_Center >= Paint.Height) {
 80006b6:	4b68      	ldr	r3, [pc, #416]	; (8000858 <Paint_DrawCircle+0x1c0>)
 80006b8:	889b      	ldrh	r3, [r3, #4]
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	88fa      	ldrh	r2, [r7, #6]
 80006be:	429a      	cmp	r2, r3
 80006c0:	d805      	bhi.n	80006ce <Paint_DrawCircle+0x36>
 80006c2:	4b65      	ldr	r3, [pc, #404]	; (8000858 <Paint_DrawCircle+0x1c0>)
 80006c4:	88db      	ldrh	r3, [r3, #6]
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	88ba      	ldrh	r2, [r7, #4]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	d303      	bcc.n	80006d6 <Paint_DrawCircle+0x3e>
        Debug("Paint_DrawCircle Input exceeds the normal display range\r\n");
 80006ce:	4863      	ldr	r0, [pc, #396]	; (800085c <Paint_DrawCircle+0x1c4>)
 80006d0:	f003 fafa 	bl	8003cc8 <puts>
        return;
 80006d4:	e16b      	b.n	80009ae <Paint_DrawCircle+0x316>
    }

    //Draw a circle from(0, R) as a starting point
    int16_t XCurrent, YCurrent;
    XCurrent = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	81fb      	strh	r3, [r7, #14]
    YCurrent = Radius;
 80006da:	887b      	ldrh	r3, [r7, #2]
 80006dc:	81bb      	strh	r3, [r7, #12]

    //Cumulative error,judge the next point of the logo
    int16_t Esp = 3 - (Radius << 1 );
 80006de:	887b      	ldrh	r3, [r7, #2]
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	b29b      	uxth	r3, r3
 80006e4:	f1c3 0303 	rsb	r3, r3, #3
 80006e8:	b29b      	uxth	r3, r3
 80006ea:	817b      	strh	r3, [r7, #10]

    int16_t sCountY;
    if (Draw_Fill == DRAW_FILL_FULL) {
 80006ec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	f040 8155 	bne.w	80009a0 <Paint_DrawCircle+0x308>
        while (XCurrent <= YCurrent ) { //Realistic circles
 80006f6:	e0a6      	b.n	8000846 <Paint_DrawCircle+0x1ae>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 80006f8:	89fb      	ldrh	r3, [r7, #14]
 80006fa:	813b      	strh	r3, [r7, #8]
 80006fc:	e075      	b.n	80007ea <Paint_DrawCircle+0x152>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//1
 80006fe:	89fa      	ldrh	r2, [r7, #14]
 8000700:	88fb      	ldrh	r3, [r7, #6]
 8000702:	4413      	add	r3, r2
 8000704:	b298      	uxth	r0, r3
 8000706:	893a      	ldrh	r2, [r7, #8]
 8000708:	88bb      	ldrh	r3, [r7, #4]
 800070a:	4413      	add	r3, r2
 800070c:	b299      	uxth	r1, r3
 800070e:	883a      	ldrh	r2, [r7, #0]
 8000710:	2301      	movs	r3, #1
 8000712:	9300      	str	r3, [sp, #0]
 8000714:	2301      	movs	r3, #1
 8000716:	f7ff fe73 	bl	8000400 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//2
 800071a:	89fb      	ldrh	r3, [r7, #14]
 800071c:	88fa      	ldrh	r2, [r7, #6]
 800071e:	1ad3      	subs	r3, r2, r3
 8000720:	b298      	uxth	r0, r3
 8000722:	893a      	ldrh	r2, [r7, #8]
 8000724:	88bb      	ldrh	r3, [r7, #4]
 8000726:	4413      	add	r3, r2
 8000728:	b299      	uxth	r1, r3
 800072a:	883a      	ldrh	r2, [r7, #0]
 800072c:	2301      	movs	r3, #1
 800072e:	9300      	str	r3, [sp, #0]
 8000730:	2301      	movs	r3, #1
 8000732:	f7ff fe65 	bl	8000400 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//3
 8000736:	893b      	ldrh	r3, [r7, #8]
 8000738:	88fa      	ldrh	r2, [r7, #6]
 800073a:	1ad3      	subs	r3, r2, r3
 800073c:	b298      	uxth	r0, r3
 800073e:	89fa      	ldrh	r2, [r7, #14]
 8000740:	88bb      	ldrh	r3, [r7, #4]
 8000742:	4413      	add	r3, r2
 8000744:	b299      	uxth	r1, r3
 8000746:	883a      	ldrh	r2, [r7, #0]
 8000748:	2301      	movs	r3, #1
 800074a:	9300      	str	r3, [sp, #0]
 800074c:	2301      	movs	r3, #1
 800074e:	f7ff fe57 	bl	8000400 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//4
 8000752:	893b      	ldrh	r3, [r7, #8]
 8000754:	88fa      	ldrh	r2, [r7, #6]
 8000756:	1ad3      	subs	r3, r2, r3
 8000758:	b298      	uxth	r0, r3
 800075a:	89fb      	ldrh	r3, [r7, #14]
 800075c:	88ba      	ldrh	r2, [r7, #4]
 800075e:	1ad3      	subs	r3, r2, r3
 8000760:	b299      	uxth	r1, r3
 8000762:	883a      	ldrh	r2, [r7, #0]
 8000764:	2301      	movs	r3, #1
 8000766:	9300      	str	r3, [sp, #0]
 8000768:	2301      	movs	r3, #1
 800076a:	f7ff fe49 	bl	8000400 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//5
 800076e:	89fb      	ldrh	r3, [r7, #14]
 8000770:	88fa      	ldrh	r2, [r7, #6]
 8000772:	1ad3      	subs	r3, r2, r3
 8000774:	b298      	uxth	r0, r3
 8000776:	893b      	ldrh	r3, [r7, #8]
 8000778:	88ba      	ldrh	r2, [r7, #4]
 800077a:	1ad3      	subs	r3, r2, r3
 800077c:	b299      	uxth	r1, r3
 800077e:	883a      	ldrh	r2, [r7, #0]
 8000780:	2301      	movs	r3, #1
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	2301      	movs	r3, #1
 8000786:	f7ff fe3b 	bl	8000400 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//6
 800078a:	89fa      	ldrh	r2, [r7, #14]
 800078c:	88fb      	ldrh	r3, [r7, #6]
 800078e:	4413      	add	r3, r2
 8000790:	b298      	uxth	r0, r3
 8000792:	893b      	ldrh	r3, [r7, #8]
 8000794:	88ba      	ldrh	r2, [r7, #4]
 8000796:	1ad3      	subs	r3, r2, r3
 8000798:	b299      	uxth	r1, r3
 800079a:	883a      	ldrh	r2, [r7, #0]
 800079c:	2301      	movs	r3, #1
 800079e:	9300      	str	r3, [sp, #0]
 80007a0:	2301      	movs	r3, #1
 80007a2:	f7ff fe2d 	bl	8000400 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//7
 80007a6:	893a      	ldrh	r2, [r7, #8]
 80007a8:	88fb      	ldrh	r3, [r7, #6]
 80007aa:	4413      	add	r3, r2
 80007ac:	b298      	uxth	r0, r3
 80007ae:	89fb      	ldrh	r3, [r7, #14]
 80007b0:	88ba      	ldrh	r2, [r7, #4]
 80007b2:	1ad3      	subs	r3, r2, r3
 80007b4:	b299      	uxth	r1, r3
 80007b6:	883a      	ldrh	r2, [r7, #0]
 80007b8:	2301      	movs	r3, #1
 80007ba:	9300      	str	r3, [sp, #0]
 80007bc:	2301      	movs	r3, #1
 80007be:	f7ff fe1f 	bl	8000400 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 80007c2:	893a      	ldrh	r2, [r7, #8]
 80007c4:	88fb      	ldrh	r3, [r7, #6]
 80007c6:	4413      	add	r3, r2
 80007c8:	b298      	uxth	r0, r3
 80007ca:	89fa      	ldrh	r2, [r7, #14]
 80007cc:	88bb      	ldrh	r3, [r7, #4]
 80007ce:	4413      	add	r3, r2
 80007d0:	b299      	uxth	r1, r3
 80007d2:	883a      	ldrh	r2, [r7, #0]
 80007d4:	2301      	movs	r3, #1
 80007d6:	9300      	str	r3, [sp, #0]
 80007d8:	2301      	movs	r3, #1
 80007da:	f7ff fe11 	bl	8000400 <Paint_DrawPoint>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 80007de:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	3301      	adds	r3, #1
 80007e6:	b29b      	uxth	r3, r3
 80007e8:	813b      	strh	r3, [r7, #8]
 80007ea:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80007ee:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	dd83      	ble.n	80006fe <Paint_DrawCircle+0x66>
            }
            if (Esp < 0 )
 80007f6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	da09      	bge.n	8000812 <Paint_DrawCircle+0x17a>
                Esp += 4 * XCurrent + 6;
 80007fe:	89fb      	ldrh	r3, [r7, #14]
 8000800:	009b      	lsls	r3, r3, #2
 8000802:	b29a      	uxth	r2, r3
 8000804:	897b      	ldrh	r3, [r7, #10]
 8000806:	4413      	add	r3, r2
 8000808:	b29b      	uxth	r3, r3
 800080a:	3306      	adds	r3, #6
 800080c:	b29b      	uxth	r3, r3
 800080e:	817b      	strh	r3, [r7, #10]
 8000810:	e013      	b.n	800083a <Paint_DrawCircle+0x1a2>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 8000812:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000816:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800081a:	1ad3      	subs	r3, r2, r3
 800081c:	b29b      	uxth	r3, r3
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	b29a      	uxth	r2, r3
 8000822:	897b      	ldrh	r3, [r7, #10]
 8000824:	4413      	add	r3, r2
 8000826:	b29b      	uxth	r3, r3
 8000828:	330a      	adds	r3, #10
 800082a:	b29b      	uxth	r3, r3
 800082c:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 800082e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000832:	b29b      	uxth	r3, r3
 8000834:	3b01      	subs	r3, #1
 8000836:	b29b      	uxth	r3, r3
 8000838:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 800083a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800083e:	b29b      	uxth	r3, r3
 8000840:	3301      	adds	r3, #1
 8000842:	b29b      	uxth	r3, r3
 8000844:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) { //Realistic circles
 8000846:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800084a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800084e:	429a      	cmp	r2, r3
 8000850:	f77f af52 	ble.w	80006f8 <Paint_DrawCircle+0x60>
 8000854:	e0ab      	b.n	80009ae <Paint_DrawCircle+0x316>
 8000856:	bf00      	nop
 8000858:	2000008c 	.word	0x2000008c
 800085c:	08004a44 	.word	0x08004a44
        }
    } else { //Draw a hollow circle
        while (XCurrent <= YCurrent ) {
            Paint_DrawPoint(X_Center + XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//1
 8000860:	89fa      	ldrh	r2, [r7, #14]
 8000862:	88fb      	ldrh	r3, [r7, #6]
 8000864:	4413      	add	r3, r2
 8000866:	b298      	uxth	r0, r3
 8000868:	89ba      	ldrh	r2, [r7, #12]
 800086a:	88bb      	ldrh	r3, [r7, #4]
 800086c:	4413      	add	r3, r2
 800086e:	b299      	uxth	r1, r3
 8000870:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000874:	883a      	ldrh	r2, [r7, #0]
 8000876:	2401      	movs	r4, #1
 8000878:	9400      	str	r4, [sp, #0]
 800087a:	f7ff fdc1 	bl	8000400 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//2
 800087e:	89fb      	ldrh	r3, [r7, #14]
 8000880:	88fa      	ldrh	r2, [r7, #6]
 8000882:	1ad3      	subs	r3, r2, r3
 8000884:	b298      	uxth	r0, r3
 8000886:	89ba      	ldrh	r2, [r7, #12]
 8000888:	88bb      	ldrh	r3, [r7, #4]
 800088a:	4413      	add	r3, r2
 800088c:	b299      	uxth	r1, r3
 800088e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000892:	883a      	ldrh	r2, [r7, #0]
 8000894:	2401      	movs	r4, #1
 8000896:	9400      	str	r4, [sp, #0]
 8000898:	f7ff fdb2 	bl	8000400 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//3
 800089c:	89bb      	ldrh	r3, [r7, #12]
 800089e:	88fa      	ldrh	r2, [r7, #6]
 80008a0:	1ad3      	subs	r3, r2, r3
 80008a2:	b298      	uxth	r0, r3
 80008a4:	89fa      	ldrh	r2, [r7, #14]
 80008a6:	88bb      	ldrh	r3, [r7, #4]
 80008a8:	4413      	add	r3, r2
 80008aa:	b299      	uxth	r1, r3
 80008ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 80008b0:	883a      	ldrh	r2, [r7, #0]
 80008b2:	2401      	movs	r4, #1
 80008b4:	9400      	str	r4, [sp, #0]
 80008b6:	f7ff fda3 	bl	8000400 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//4
 80008ba:	89bb      	ldrh	r3, [r7, #12]
 80008bc:	88fa      	ldrh	r2, [r7, #6]
 80008be:	1ad3      	subs	r3, r2, r3
 80008c0:	b298      	uxth	r0, r3
 80008c2:	89fb      	ldrh	r3, [r7, #14]
 80008c4:	88ba      	ldrh	r2, [r7, #4]
 80008c6:	1ad3      	subs	r3, r2, r3
 80008c8:	b299      	uxth	r1, r3
 80008ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80008ce:	883a      	ldrh	r2, [r7, #0]
 80008d0:	2401      	movs	r4, #1
 80008d2:	9400      	str	r4, [sp, #0]
 80008d4:	f7ff fd94 	bl	8000400 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//5
 80008d8:	89fb      	ldrh	r3, [r7, #14]
 80008da:	88fa      	ldrh	r2, [r7, #6]
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	b298      	uxth	r0, r3
 80008e0:	89bb      	ldrh	r3, [r7, #12]
 80008e2:	88ba      	ldrh	r2, [r7, #4]
 80008e4:	1ad3      	subs	r3, r2, r3
 80008e6:	b299      	uxth	r1, r3
 80008e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80008ec:	883a      	ldrh	r2, [r7, #0]
 80008ee:	2401      	movs	r4, #1
 80008f0:	9400      	str	r4, [sp, #0]
 80008f2:	f7ff fd85 	bl	8000400 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//6
 80008f6:	89fa      	ldrh	r2, [r7, #14]
 80008f8:	88fb      	ldrh	r3, [r7, #6]
 80008fa:	4413      	add	r3, r2
 80008fc:	b298      	uxth	r0, r3
 80008fe:	89bb      	ldrh	r3, [r7, #12]
 8000900:	88ba      	ldrh	r2, [r7, #4]
 8000902:	1ad3      	subs	r3, r2, r3
 8000904:	b299      	uxth	r1, r3
 8000906:	f897 3020 	ldrb.w	r3, [r7, #32]
 800090a:	883a      	ldrh	r2, [r7, #0]
 800090c:	2401      	movs	r4, #1
 800090e:	9400      	str	r4, [sp, #0]
 8000910:	f7ff fd76 	bl	8000400 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//7
 8000914:	89ba      	ldrh	r2, [r7, #12]
 8000916:	88fb      	ldrh	r3, [r7, #6]
 8000918:	4413      	add	r3, r2
 800091a:	b298      	uxth	r0, r3
 800091c:	89fb      	ldrh	r3, [r7, #14]
 800091e:	88ba      	ldrh	r2, [r7, #4]
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	b299      	uxth	r1, r3
 8000924:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000928:	883a      	ldrh	r2, [r7, #0]
 800092a:	2401      	movs	r4, #1
 800092c:	9400      	str	r4, [sp, #0]
 800092e:	f7ff fd67 	bl	8000400 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//0
 8000932:	89ba      	ldrh	r2, [r7, #12]
 8000934:	88fb      	ldrh	r3, [r7, #6]
 8000936:	4413      	add	r3, r2
 8000938:	b298      	uxth	r0, r3
 800093a:	89fa      	ldrh	r2, [r7, #14]
 800093c:	88bb      	ldrh	r3, [r7, #4]
 800093e:	4413      	add	r3, r2
 8000940:	b299      	uxth	r1, r3
 8000942:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000946:	883a      	ldrh	r2, [r7, #0]
 8000948:	2401      	movs	r4, #1
 800094a:	9400      	str	r4, [sp, #0]
 800094c:	f7ff fd58 	bl	8000400 <Paint_DrawPoint>

            if (Esp < 0 )
 8000950:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000954:	2b00      	cmp	r3, #0
 8000956:	da09      	bge.n	800096c <Paint_DrawCircle+0x2d4>
                Esp += 4 * XCurrent + 6;
 8000958:	89fb      	ldrh	r3, [r7, #14]
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	b29a      	uxth	r2, r3
 800095e:	897b      	ldrh	r3, [r7, #10]
 8000960:	4413      	add	r3, r2
 8000962:	b29b      	uxth	r3, r3
 8000964:	3306      	adds	r3, #6
 8000966:	b29b      	uxth	r3, r3
 8000968:	817b      	strh	r3, [r7, #10]
 800096a:	e013      	b.n	8000994 <Paint_DrawCircle+0x2fc>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 800096c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000970:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	b29b      	uxth	r3, r3
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	b29a      	uxth	r2, r3
 800097c:	897b      	ldrh	r3, [r7, #10]
 800097e:	4413      	add	r3, r2
 8000980:	b29b      	uxth	r3, r3
 8000982:	330a      	adds	r3, #10
 8000984:	b29b      	uxth	r3, r3
 8000986:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 8000988:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800098c:	b29b      	uxth	r3, r3
 800098e:	3b01      	subs	r3, #1
 8000990:	b29b      	uxth	r3, r3
 8000992:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 8000994:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000998:	b29b      	uxth	r3, r3
 800099a:	3301      	adds	r3, #1
 800099c:	b29b      	uxth	r3, r3
 800099e:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) {
 80009a0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80009a4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	f77f af59 	ble.w	8000860 <Paint_DrawCircle+0x1c8>
        }
    }
}
 80009ae:	3714      	adds	r7, #20
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd90      	pop	{r4, r7, pc}

080009b4 <Paint_DrawChar>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Background, UWORD Color_Foreground)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b088      	sub	sp, #32
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	4603      	mov	r3, r0
 80009be:	81fb      	strh	r3, [r7, #14]
 80009c0:	460b      	mov	r3, r1
 80009c2:	81bb      	strh	r3, [r7, #12]
 80009c4:	4613      	mov	r3, r2
 80009c6:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 80009c8:	4b4e      	ldr	r3, [pc, #312]	; (8000b04 <Paint_DrawChar+0x150>)
 80009ca:	889b      	ldrh	r3, [r3, #4]
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	89fa      	ldrh	r2, [r7, #14]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	d805      	bhi.n	80009e0 <Paint_DrawChar+0x2c>
 80009d4:	4b4b      	ldr	r3, [pc, #300]	; (8000b04 <Paint_DrawChar+0x150>)
 80009d6:	88db      	ldrh	r3, [r3, #6]
 80009d8:	b29b      	uxth	r3, r3
 80009da:	89ba      	ldrh	r2, [r7, #12]
 80009dc:	429a      	cmp	r2, r3
 80009de:	d903      	bls.n	80009e8 <Paint_DrawChar+0x34>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 80009e0:	4849      	ldr	r0, [pc, #292]	; (8000b08 <Paint_DrawChar+0x154>)
 80009e2:	f003 f971 	bl	8003cc8 <puts>
        return;
 80009e6:	e089      	b.n	8000afc <Paint_DrawChar+0x148>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 80009e8:	7afb      	ldrb	r3, [r7, #11]
 80009ea:	3b20      	subs	r3, #32
 80009ec:	687a      	ldr	r2, [r7, #4]
 80009ee:	88d2      	ldrh	r2, [r2, #6]
 80009f0:	fb02 f303 	mul.w	r3, r2, r3
 80009f4:	687a      	ldr	r2, [r7, #4]
 80009f6:	8892      	ldrh	r2, [r2, #4]
 80009f8:	08d2      	lsrs	r2, r2, #3
 80009fa:	b292      	uxth	r2, r2
 80009fc:	4611      	mov	r1, r2
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	8892      	ldrh	r2, [r2, #4]
 8000a02:	f002 0207 	and.w	r2, r2, #7
 8000a06:	b292      	uxth	r2, r2
 8000a08:	2a00      	cmp	r2, #0
 8000a0a:	bf14      	ite	ne
 8000a0c:	2201      	movne	r2, #1
 8000a0e:	2200      	moveq	r2, #0
 8000a10:	b2d2      	uxtb	r2, r2
 8000a12:	440a      	add	r2, r1
 8000a14:	fb02 f303 	mul.w	r3, r2, r3
 8000a18:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	4413      	add	r3, r2
 8000a22:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 8000a24:	2300      	movs	r3, #0
 8000a26:	83fb      	strh	r3, [r7, #30]
 8000a28:	e063      	b.n	8000af2 <Paint_DrawChar+0x13e>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	83bb      	strh	r3, [r7, #28]
 8000a2e:	e04e      	b.n	8000ace <Paint_DrawChar+0x11a>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8000a30:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000a32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d118      	bne.n	8000a6c <Paint_DrawChar+0xb8>
                if (*ptr & (0x80 >> (Column % 8)))
 8000a3a:	69bb      	ldr	r3, [r7, #24]
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	4619      	mov	r1, r3
 8000a40:	8bbb      	ldrh	r3, [r7, #28]
 8000a42:	f003 0307 	and.w	r3, r3, #7
 8000a46:	2280      	movs	r2, #128	; 0x80
 8000a48:	fa42 f303 	asr.w	r3, r2, r3
 8000a4c:	400b      	ands	r3, r1
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d031      	beq.n	8000ab6 <Paint_DrawChar+0x102>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8000a52:	89fa      	ldrh	r2, [r7, #14]
 8000a54:	8bbb      	ldrh	r3, [r7, #28]
 8000a56:	4413      	add	r3, r2
 8000a58:	b298      	uxth	r0, r3
 8000a5a:	89ba      	ldrh	r2, [r7, #12]
 8000a5c:	8bfb      	ldrh	r3, [r7, #30]
 8000a5e:	4413      	add	r3, r2
 8000a60:	b29b      	uxth	r3, r3
 8000a62:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000a64:	4619      	mov	r1, r3
 8000a66:	f7ff fc0b 	bl	8000280 <Paint_SetPixel>
 8000a6a:	e024      	b.n	8000ab6 <Paint_DrawChar+0x102>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	4619      	mov	r1, r3
 8000a72:	8bbb      	ldrh	r3, [r7, #28]
 8000a74:	f003 0307 	and.w	r3, r3, #7
 8000a78:	2280      	movs	r2, #128	; 0x80
 8000a7a:	fa42 f303 	asr.w	r3, r2, r3
 8000a7e:	400b      	ands	r3, r1
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d00c      	beq.n	8000a9e <Paint_DrawChar+0xea>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8000a84:	89fa      	ldrh	r2, [r7, #14]
 8000a86:	8bbb      	ldrh	r3, [r7, #28]
 8000a88:	4413      	add	r3, r2
 8000a8a:	b298      	uxth	r0, r3
 8000a8c:	89ba      	ldrh	r2, [r7, #12]
 8000a8e:	8bfb      	ldrh	r3, [r7, #30]
 8000a90:	4413      	add	r3, r2
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000a96:	4619      	mov	r1, r3
 8000a98:	f7ff fbf2 	bl	8000280 <Paint_SetPixel>
 8000a9c:	e00b      	b.n	8000ab6 <Paint_DrawChar+0x102>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8000a9e:	89fa      	ldrh	r2, [r7, #14]
 8000aa0:	8bbb      	ldrh	r3, [r7, #28]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	b298      	uxth	r0, r3
 8000aa6:	89ba      	ldrh	r2, [r7, #12]
 8000aa8:	8bfb      	ldrh	r3, [r7, #30]
 8000aaa:	4413      	add	r3, r2
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	f7ff fbe5 	bl	8000280 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 8000ab6:	8bbb      	ldrh	r3, [r7, #28]
 8000ab8:	f003 0307 	and.w	r3, r3, #7
 8000abc:	b29b      	uxth	r3, r3
 8000abe:	2b07      	cmp	r3, #7
 8000ac0:	d102      	bne.n	8000ac8 <Paint_DrawChar+0x114>
                ptr++;
 8000ac2:	69bb      	ldr	r3, [r7, #24]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8000ac8:	8bbb      	ldrh	r3, [r7, #28]
 8000aca:	3301      	adds	r3, #1
 8000acc:	83bb      	strh	r3, [r7, #28]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	889b      	ldrh	r3, [r3, #4]
 8000ad2:	8bba      	ldrh	r2, [r7, #28]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d3ab      	bcc.n	8000a30 <Paint_DrawChar+0x7c>
        }// Write a line
        if (Font->Width % 8 != 0)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	889b      	ldrh	r3, [r3, #4]
 8000adc:	f003 0307 	and.w	r3, r3, #7
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d002      	beq.n	8000aec <Paint_DrawChar+0x138>
            ptr++;
 8000ae6:	69bb      	ldr	r3, [r7, #24]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 8000aec:	8bfb      	ldrh	r3, [r7, #30]
 8000aee:	3301      	adds	r3, #1
 8000af0:	83fb      	strh	r3, [r7, #30]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	88db      	ldrh	r3, [r3, #6]
 8000af6:	8bfa      	ldrh	r2, [r7, #30]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d396      	bcc.n	8000a2a <Paint_DrawChar+0x76>
    }// Write all
}
 8000afc:	3720      	adds	r7, #32
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	2000008c 	.word	0x2000008c
 8000b08:	08004a88 	.word	0x08004a88

08000b0c <Paint_DrawString_EN>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Background, UWORD Color_Foreground )
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b088      	sub	sp, #32
 8000b10:	af02      	add	r7, sp, #8
 8000b12:	60ba      	str	r2, [r7, #8]
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	4603      	mov	r3, r0
 8000b18:	81fb      	strh	r3, [r7, #14]
 8000b1a:	460b      	mov	r3, r1
 8000b1c:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 8000b1e:	89fb      	ldrh	r3, [r7, #14]
 8000b20:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 8000b22:	89bb      	ldrh	r3, [r7, #12]
 8000b24:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 8000b26:	4b23      	ldr	r3, [pc, #140]	; (8000bb4 <Paint_DrawString_EN+0xa8>)
 8000b28:	889b      	ldrh	r3, [r3, #4]
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	89fa      	ldrh	r2, [r7, #14]
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d805      	bhi.n	8000b3e <Paint_DrawString_EN+0x32>
 8000b32:	4b20      	ldr	r3, [pc, #128]	; (8000bb4 <Paint_DrawString_EN+0xa8>)
 8000b34:	88db      	ldrh	r3, [r3, #6]
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	89ba      	ldrh	r2, [r7, #12]
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	d933      	bls.n	8000ba6 <Paint_DrawString_EN+0x9a>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 8000b3e:	481e      	ldr	r0, [pc, #120]	; (8000bb8 <Paint_DrawString_EN+0xac>)
 8000b40:	f003 f8c2 	bl	8003cc8 <puts>
        return;
 8000b44:	e033      	b.n	8000bae <Paint_DrawString_EN+0xa2>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 8000b46:	8afb      	ldrh	r3, [r7, #22]
 8000b48:	687a      	ldr	r2, [r7, #4]
 8000b4a:	8892      	ldrh	r2, [r2, #4]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	4a19      	ldr	r2, [pc, #100]	; (8000bb4 <Paint_DrawString_EN+0xa8>)
 8000b50:	8892      	ldrh	r2, [r2, #4]
 8000b52:	b292      	uxth	r2, r2
 8000b54:	4293      	cmp	r3, r2
 8000b56:	dd06      	ble.n	8000b66 <Paint_DrawString_EN+0x5a>
            Xpoint = Xstart;
 8000b58:	89fb      	ldrh	r3, [r7, #14]
 8000b5a:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	88da      	ldrh	r2, [r3, #6]
 8000b60:	8abb      	ldrh	r3, [r7, #20]
 8000b62:	4413      	add	r3, r2
 8000b64:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 8000b66:	8abb      	ldrh	r3, [r7, #20]
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	88d2      	ldrh	r2, [r2, #6]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	4a11      	ldr	r2, [pc, #68]	; (8000bb4 <Paint_DrawString_EN+0xa8>)
 8000b70:	88d2      	ldrh	r2, [r2, #6]
 8000b72:	b292      	uxth	r2, r2
 8000b74:	4293      	cmp	r3, r2
 8000b76:	dd03      	ble.n	8000b80 <Paint_DrawString_EN+0x74>
            Xpoint = Xstart;
 8000b78:	89fb      	ldrh	r3, [r7, #14]
 8000b7a:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 8000b7c:	89bb      	ldrh	r3, [r7, #12]
 8000b7e:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	781a      	ldrb	r2, [r3, #0]
 8000b84:	8ab9      	ldrh	r1, [r7, #20]
 8000b86:	8af8      	ldrh	r0, [r7, #22]
 8000b88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000b8a:	9301      	str	r3, [sp, #4]
 8000b8c:	8c3b      	ldrh	r3, [r7, #32]
 8000b8e:	9300      	str	r3, [sp, #0]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f7ff ff0f 	bl	80009b4 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	889a      	ldrh	r2, [r3, #4]
 8000ba0:	8afb      	ldrh	r3, [r7, #22]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d1cb      	bne.n	8000b46 <Paint_DrawString_EN+0x3a>
    }
}
 8000bae:	3718      	adds	r7, #24
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	2000008c 	.word	0x2000008c
 8000bb8:	08004ac8 	.word	0x08004ac8

08000bbc <Paint_DrawImage>:
    yStart           : Y starting coordinates
    xEnd             ：Image width
    yEnd             : Image height
******************************************************************************/
void Paint_DrawImage(const unsigned char *image, UWORD xStart, UWORD yStart, UWORD W_Image, UWORD H_Image) 
{
 8000bbc:	b590      	push	{r4, r7, lr}
 8000bbe:	b087      	sub	sp, #28
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	4608      	mov	r0, r1
 8000bc6:	4611      	mov	r1, r2
 8000bc8:	461a      	mov	r2, r3
 8000bca:	4603      	mov	r3, r0
 8000bcc:	817b      	strh	r3, [r7, #10]
 8000bce:	460b      	mov	r3, r1
 8000bd0:	813b      	strh	r3, [r7, #8]
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	80fb      	strh	r3, [r7, #6]
    int i,j; 
		for(j = 0; j < H_Image; j++){
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	613b      	str	r3, [r7, #16]
 8000bda:	e049      	b.n	8000c70 <Paint_DrawImage+0xb4>
			for(i = 0; i < W_Image; i++){
 8000bdc:	2300      	movs	r3, #0
 8000bde:	617b      	str	r3, [r7, #20]
 8000be0:	e03f      	b.n	8000c62 <Paint_DrawImage+0xa6>
				if(xStart+i < Paint.WidthMemory  &&  yStart+j < Paint.HeightMemory)//Exceeded part does not display
 8000be2:	897a      	ldrh	r2, [r7, #10]
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	4413      	add	r3, r2
 8000be8:	4a26      	ldr	r2, [pc, #152]	; (8000c84 <Paint_DrawImage+0xc8>)
 8000bea:	8912      	ldrh	r2, [r2, #8]
 8000bec:	b292      	uxth	r2, r2
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	da34      	bge.n	8000c5c <Paint_DrawImage+0xa0>
 8000bf2:	893a      	ldrh	r2, [r7, #8]
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	4a22      	ldr	r2, [pc, #136]	; (8000c84 <Paint_DrawImage+0xc8>)
 8000bfa:	8952      	ldrh	r2, [r2, #10]
 8000bfc:	b292      	uxth	r2, r2
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	da2c      	bge.n	8000c5c <Paint_DrawImage+0xa0>
					Paint_SetPixel(xStart + i, yStart + j, (*(image + j*W_Image*2 + i*2+1))<<8 | (*(image + j*W_Image*2 + i*2)));
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	b29a      	uxth	r2, r3
 8000c06:	897b      	ldrh	r3, [r7, #10]
 8000c08:	4413      	add	r3, r2
 8000c0a:	b298      	uxth	r0, r3
 8000c0c:	693b      	ldr	r3, [r7, #16]
 8000c0e:	b29a      	uxth	r2, r3
 8000c10:	893b      	ldrh	r3, [r7, #8]
 8000c12:	4413      	add	r3, r2
 8000c14:	b29c      	uxth	r4, r3
 8000c16:	88fb      	ldrh	r3, [r7, #6]
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	fb02 f303 	mul.w	r3, r2, r3
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	461a      	mov	r2, r3
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	4413      	add	r3, r2
 8000c28:	3301      	adds	r3, #1
 8000c2a:	68fa      	ldr	r2, [r7, #12]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	021b      	lsls	r3, r3, #8
 8000c32:	b21a      	sxth	r2, r3
 8000c34:	88fb      	ldrh	r3, [r7, #6]
 8000c36:	6939      	ldr	r1, [r7, #16]
 8000c38:	fb01 f303 	mul.w	r3, r1, r3
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	4619      	mov	r1, r3
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	440b      	add	r3, r1
 8000c46:	68f9      	ldr	r1, [r7, #12]
 8000c48:	440b      	add	r3, r1
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	b21b      	sxth	r3, r3
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	b21b      	sxth	r3, r3
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	461a      	mov	r2, r3
 8000c56:	4621      	mov	r1, r4
 8000c58:	f7ff fb12 	bl	8000280 <Paint_SetPixel>
			for(i = 0; i < W_Image; i++){
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	617b      	str	r3, [r7, #20]
 8000c62:	88fb      	ldrh	r3, [r7, #6]
 8000c64:	697a      	ldr	r2, [r7, #20]
 8000c66:	429a      	cmp	r2, r3
 8000c68:	dbbb      	blt.n	8000be2 <Paint_DrawImage+0x26>
		for(j = 0; j < H_Image; j++){
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	dbb1      	blt.n	8000bdc <Paint_DrawImage+0x20>
				//j*W_Image*2 			   Y offset
				//i*2              	   X offset
			}
		}
      
}
 8000c78:	bf00      	nop
 8000c7a:	bf00      	nop
 8000c7c:	371c      	adds	r7, #28
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd90      	pop	{r4, r7, pc}
 8000c82:	bf00      	nop
 8000c84:	2000008c 	.word	0x2000008c

08000c88 <LCD_1IN28_Reset>:
/******************************************************************************
function :	Hardware reset
parameter:
******************************************************************************/
static void LCD_1IN28_Reset(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
    LCD_1IN28_RST_1;
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c92:	480d      	ldr	r0, [pc, #52]	; (8000cc8 <LCD_1IN28_Reset+0x40>)
 8000c94:	f001 fab0 	bl	80021f8 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 8000c98:	2064      	movs	r0, #100	; 0x64
 8000c9a:	f001 f821 	bl	8001ce0 <HAL_Delay>
    LCD_1IN28_RST_0;
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ca4:	4808      	ldr	r0, [pc, #32]	; (8000cc8 <LCD_1IN28_Reset+0x40>)
 8000ca6:	f001 faa7 	bl	80021f8 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 8000caa:	2064      	movs	r0, #100	; 0x64
 8000cac:	f001 f818 	bl	8001ce0 <HAL_Delay>
    LCD_1IN28_RST_1;
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cb6:	4804      	ldr	r0, [pc, #16]	; (8000cc8 <LCD_1IN28_Reset+0x40>)
 8000cb8:	f001 fa9e 	bl	80021f8 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 8000cbc:	2064      	movs	r0, #100	; 0x64
 8000cbe:	f001 f80f 	bl	8001ce0 <HAL_Delay>
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40010800 	.word	0x40010800

08000ccc <LCD_1IN28_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void LCD_1IN28_SendCommand(UBYTE Reg)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
    LCD_1IN28_DC_0;
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cdc:	4807      	ldr	r0, [pc, #28]	; (8000cfc <LCD_1IN28_SendCommand+0x30>)
 8000cde:	f001 fa8b 	bl	80021f8 <HAL_GPIO_WritePin>
    LCD_1IN28_CS_0;
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2140      	movs	r1, #64	; 0x40
 8000ce6:	4806      	ldr	r0, [pc, #24]	; (8000d00 <LCD_1IN28_SendCommand+0x34>)
 8000ce8:	f001 fa86 	bl	80021f8 <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Reg);
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff fa2c 	bl	800014c <DEV_SPI_WRite>
    // LCD_1IN28_CS_1;
}
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40010800 	.word	0x40010800
 8000d00:	40010c00 	.word	0x40010c00

08000d04 <LCD_1IN28_SendData_8Bit>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void LCD_1IN28_SendData_8Bit(UBYTE Data)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
    LCD_1IN28_DC_1;
 8000d0e:	2201      	movs	r2, #1
 8000d10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d14:	480a      	ldr	r0, [pc, #40]	; (8000d40 <LCD_1IN28_SendData_8Bit+0x3c>)
 8000d16:	f001 fa6f 	bl	80021f8 <HAL_GPIO_WritePin>
    LCD_1IN28_CS_0;
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2140      	movs	r1, #64	; 0x40
 8000d1e:	4809      	ldr	r0, [pc, #36]	; (8000d44 <LCD_1IN28_SendData_8Bit+0x40>)
 8000d20:	f001 fa6a 	bl	80021f8 <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Data);
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff fa10 	bl	800014c <DEV_SPI_WRite>
    LCD_1IN28_CS_1;
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	2140      	movs	r1, #64	; 0x40
 8000d30:	4804      	ldr	r0, [pc, #16]	; (8000d44 <LCD_1IN28_SendData_8Bit+0x40>)
 8000d32:	f001 fa61 	bl	80021f8 <HAL_GPIO_WritePin>
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40010800 	.word	0x40010800
 8000d44:	40010c00 	.word	0x40010c00

08000d48 <LCD_1IN28_SendData_16Bit>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void LCD_1IN28_SendData_16Bit(UWORD Data)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	80fb      	strh	r3, [r7, #6]
    LCD_1IN28_DC_1;
 8000d52:	2201      	movs	r2, #1
 8000d54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d58:	480e      	ldr	r0, [pc, #56]	; (8000d94 <LCD_1IN28_SendData_16Bit+0x4c>)
 8000d5a:	f001 fa4d 	bl	80021f8 <HAL_GPIO_WritePin>
    LCD_1IN28_CS_0;
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2140      	movs	r1, #64	; 0x40
 8000d62:	480d      	ldr	r0, [pc, #52]	; (8000d98 <LCD_1IN28_SendData_16Bit+0x50>)
 8000d64:	f001 fa48 	bl	80021f8 <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Data >> 8);
 8000d68:	88fb      	ldrh	r3, [r7, #6]
 8000d6a:	0a1b      	lsrs	r3, r3, #8
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff f9eb 	bl	800014c <DEV_SPI_WRite>
    DEV_SPI_WRITE(Data);
 8000d76:	88fb      	ldrh	r3, [r7, #6]
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff f9e6 	bl	800014c <DEV_SPI_WRite>
    LCD_1IN28_CS_1;
 8000d80:	2201      	movs	r2, #1
 8000d82:	2140      	movs	r1, #64	; 0x40
 8000d84:	4804      	ldr	r0, [pc, #16]	; (8000d98 <LCD_1IN28_SendData_16Bit+0x50>)
 8000d86:	f001 fa37 	bl	80021f8 <HAL_GPIO_WritePin>
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40010800 	.word	0x40010800
 8000d98:	40010c00 	.word	0x40010c00

08000d9c <LCD_1IN28_InitReg>:
/******************************************************************************
function :	Initialize the lcd register
parameter:
******************************************************************************/
static void LCD_1IN28_InitReg(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  LCD_1IN28_SendCommand(0xEF);
 8000da0:	20ef      	movs	r0, #239	; 0xef
 8000da2:	f7ff ff93 	bl	8000ccc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0xEB);
 8000da6:	20eb      	movs	r0, #235	; 0xeb
 8000da8:	f7ff ff90 	bl	8000ccc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x14); 
 8000dac:	2014      	movs	r0, #20
 8000dae:	f7ff ffa9 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	
  LCD_1IN28_SendCommand(0xFE);			 
 8000db2:	20fe      	movs	r0, #254	; 0xfe
 8000db4:	f7ff ff8a 	bl	8000ccc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0xEF); 
 8000db8:	20ef      	movs	r0, #239	; 0xef
 8000dba:	f7ff ff87 	bl	8000ccc <LCD_1IN28_SendCommand>

	LCD_1IN28_SendCommand(0xEB);	
 8000dbe:	20eb      	movs	r0, #235	; 0xeb
 8000dc0:	f7ff ff84 	bl	8000ccc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x14); 
 8000dc4:	2014      	movs	r0, #20
 8000dc6:	f7ff ff9d 	bl	8000d04 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x84);			
 8000dca:	2084      	movs	r0, #132	; 0x84
 8000dcc:	f7ff ff7e 	bl	8000ccc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x40); 
 8000dd0:	2040      	movs	r0, #64	; 0x40
 8000dd2:	f7ff ff97 	bl	8000d04 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x85);			
 8000dd6:	2085      	movs	r0, #133	; 0x85
 8000dd8:	f7ff ff78 	bl	8000ccc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 8000ddc:	20ff      	movs	r0, #255	; 0xff
 8000dde:	f7ff ff91 	bl	8000d04 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x86);			
 8000de2:	2086      	movs	r0, #134	; 0x86
 8000de4:	f7ff ff72 	bl	8000ccc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 8000de8:	20ff      	movs	r0, #255	; 0xff
 8000dea:	f7ff ff8b 	bl	8000d04 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x87);			
 8000dee:	2087      	movs	r0, #135	; 0x87
 8000df0:	f7ff ff6c 	bl	8000ccc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF);
 8000df4:	20ff      	movs	r0, #255	; 0xff
 8000df6:	f7ff ff85 	bl	8000d04 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x88);			
 8000dfa:	2088      	movs	r0, #136	; 0x88
 8000dfc:	f7ff ff66 	bl	8000ccc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x0A);
 8000e00:	200a      	movs	r0, #10
 8000e02:	f7ff ff7f 	bl	8000d04 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x89);			
 8000e06:	2089      	movs	r0, #137	; 0x89
 8000e08:	f7ff ff60 	bl	8000ccc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x21); 
 8000e0c:	2021      	movs	r0, #33	; 0x21
 8000e0e:	f7ff ff79 	bl	8000d04 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8A);			
 8000e12:	208a      	movs	r0, #138	; 0x8a
 8000e14:	f7ff ff5a 	bl	8000ccc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00); 
 8000e18:	2000      	movs	r0, #0
 8000e1a:	f7ff ff73 	bl	8000d04 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8B);			
 8000e1e:	208b      	movs	r0, #139	; 0x8b
 8000e20:	f7ff ff54 	bl	8000ccc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x80); 
 8000e24:	2080      	movs	r0, #128	; 0x80
 8000e26:	f7ff ff6d 	bl	8000d04 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8C);			
 8000e2a:	208c      	movs	r0, #140	; 0x8c
 8000e2c:	f7ff ff4e 	bl	8000ccc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x01); 
 8000e30:	2001      	movs	r0, #1
 8000e32:	f7ff ff67 	bl	8000d04 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8D);			
 8000e36:	208d      	movs	r0, #141	; 0x8d
 8000e38:	f7ff ff48 	bl	8000ccc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x01); 
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	f7ff ff61 	bl	8000d04 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8E);			
 8000e42:	208e      	movs	r0, #142	; 0x8e
 8000e44:	f7ff ff42 	bl	8000ccc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 8000e48:	20ff      	movs	r0, #255	; 0xff
 8000e4a:	f7ff ff5b 	bl	8000d04 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8F);			
 8000e4e:	208f      	movs	r0, #143	; 0x8f
 8000e50:	f7ff ff3c 	bl	8000ccc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 8000e54:	20ff      	movs	r0, #255	; 0xff
 8000e56:	f7ff ff55 	bl	8000d04 <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0xB6);
 8000e5a:	20b6      	movs	r0, #182	; 0xb6
 8000e5c:	f7ff ff36 	bl	8000ccc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 8000e60:	2000      	movs	r0, #0
 8000e62:	f7ff ff4f 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x20);
 8000e66:	2020      	movs	r0, #32
 8000e68:	f7ff ff4c 	bl	8000d04 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x36);
 8000e6c:	2036      	movs	r0, #54	; 0x36
 8000e6e:	f7ff ff2d 	bl	8000ccc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x08);//Set as vertical screen
 8000e72:	2008      	movs	r0, #8
 8000e74:	f7ff ff46 	bl	8000d04 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x3A);			
 8000e78:	203a      	movs	r0, #58	; 0x3a
 8000e7a:	f7ff ff27 	bl	8000ccc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x05); 
 8000e7e:	2005      	movs	r0, #5
 8000e80:	f7ff ff40 	bl	8000d04 <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0x90);			
 8000e84:	2090      	movs	r0, #144	; 0x90
 8000e86:	f7ff ff21 	bl	8000ccc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x08);
 8000e8a:	2008      	movs	r0, #8
 8000e8c:	f7ff ff3a 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8000e90:	2008      	movs	r0, #8
 8000e92:	f7ff ff37 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8000e96:	2008      	movs	r0, #8
 8000e98:	f7ff ff34 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08); 
 8000e9c:	2008      	movs	r0, #8
 8000e9e:	f7ff ff31 	bl	8000d04 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xBD);			
 8000ea2:	20bd      	movs	r0, #189	; 0xbd
 8000ea4:	f7ff ff12 	bl	8000ccc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x06);
 8000ea8:	2006      	movs	r0, #6
 8000eaa:	f7ff ff2b 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	
	LCD_1IN28_SendCommand(0xBC);			
 8000eae:	20bc      	movs	r0, #188	; 0xbc
 8000eb0:	f7ff ff0c 	bl	8000ccc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);	
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	f7ff ff25 	bl	8000d04 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xFF);			
 8000eba:	20ff      	movs	r0, #255	; 0xff
 8000ebc:	f7ff ff06 	bl	8000ccc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x60);
 8000ec0:	2060      	movs	r0, #96	; 0x60
 8000ec2:	f7ff ff1f 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	f7ff ff1c 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x04);
 8000ecc:	2004      	movs	r0, #4
 8000ece:	f7ff ff19 	bl	8000d04 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xC3);			
 8000ed2:	20c3      	movs	r0, #195	; 0xc3
 8000ed4:	f7ff fefa 	bl	8000ccc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x13);
 8000ed8:	2013      	movs	r0, #19
 8000eda:	f7ff ff13 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendCommand(0xC4);			
 8000ede:	20c4      	movs	r0, #196	; 0xc4
 8000ee0:	f7ff fef4 	bl	8000ccc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x13);
 8000ee4:	2013      	movs	r0, #19
 8000ee6:	f7ff ff0d 	bl	8000d04 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xC9);			
 8000eea:	20c9      	movs	r0, #201	; 0xc9
 8000eec:	f7ff feee 	bl	8000ccc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x22);
 8000ef0:	2022      	movs	r0, #34	; 0x22
 8000ef2:	f7ff ff07 	bl	8000d04 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xBE);			
 8000ef6:	20be      	movs	r0, #190	; 0xbe
 8000ef8:	f7ff fee8 	bl	8000ccc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x11); 
 8000efc:	2011      	movs	r0, #17
 8000efe:	f7ff ff01 	bl	8000d04 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xE1);			
 8000f02:	20e1      	movs	r0, #225	; 0xe1
 8000f04:	f7ff fee2 	bl	8000ccc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x10);
 8000f08:	2010      	movs	r0, #16
 8000f0a:	f7ff fefb 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0E);
 8000f0e:	200e      	movs	r0, #14
 8000f10:	f7ff fef8 	bl	8000d04 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xDF);			
 8000f14:	20df      	movs	r0, #223	; 0xdf
 8000f16:	f7ff fed9 	bl	8000ccc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x21);
 8000f1a:	2021      	movs	r0, #33	; 0x21
 8000f1c:	f7ff fef2 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0c);
 8000f20:	200c      	movs	r0, #12
 8000f22:	f7ff feef 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x02);
 8000f26:	2002      	movs	r0, #2
 8000f28:	f7ff feec 	bl	8000d04 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xF0);   
 8000f2c:	20f0      	movs	r0, #240	; 0xf0
 8000f2e:	f7ff fecd 	bl	8000ccc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x45);
 8000f32:	2045      	movs	r0, #69	; 0x45
 8000f34:	f7ff fee6 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x09);
 8000f38:	2009      	movs	r0, #9
 8000f3a:	f7ff fee3 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8000f3e:	2008      	movs	r0, #8
 8000f40:	f7ff fee0 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8000f44:	2008      	movs	r0, #8
 8000f46:	f7ff fedd 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x26);
 8000f4a:	2026      	movs	r0, #38	; 0x26
 8000f4c:	f7ff feda 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x2A);
 8000f50:	202a      	movs	r0, #42	; 0x2a
 8000f52:	f7ff fed7 	bl	8000d04 <LCD_1IN28_SendData_8Bit>

 	LCD_1IN28_SendCommand(0xF1);    
 8000f56:	20f1      	movs	r0, #241	; 0xf1
 8000f58:	f7ff feb8 	bl	8000ccc <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x43);
 8000f5c:	2043      	movs	r0, #67	; 0x43
 8000f5e:	f7ff fed1 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x70);
 8000f62:	2070      	movs	r0, #112	; 0x70
 8000f64:	f7ff fece 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x72);
 8000f68:	2072      	movs	r0, #114	; 0x72
 8000f6a:	f7ff fecb 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x36);
 8000f6e:	2036      	movs	r0, #54	; 0x36
 8000f70:	f7ff fec8 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x37);  
 8000f74:	2037      	movs	r0, #55	; 0x37
 8000f76:	f7ff fec5 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x6F);
 8000f7a:	206f      	movs	r0, #111	; 0x6f
 8000f7c:	f7ff fec2 	bl	8000d04 <LCD_1IN28_SendData_8Bit>


 	LCD_1IN28_SendCommand(0xF2);   
 8000f80:	20f2      	movs	r0, #242	; 0xf2
 8000f82:	f7ff fea3 	bl	8000ccc <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x45);
 8000f86:	2045      	movs	r0, #69	; 0x45
 8000f88:	f7ff febc 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x09);
 8000f8c:	2009      	movs	r0, #9
 8000f8e:	f7ff feb9 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x08);
 8000f92:	2008      	movs	r0, #8
 8000f94:	f7ff feb6 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x08);
 8000f98:	2008      	movs	r0, #8
 8000f9a:	f7ff feb3 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x26);
 8000f9e:	2026      	movs	r0, #38	; 0x26
 8000fa0:	f7ff feb0 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x2A);
 8000fa4:	202a      	movs	r0, #42	; 0x2a
 8000fa6:	f7ff fead 	bl	8000d04 <LCD_1IN28_SendData_8Bit>

 	LCD_1IN28_SendCommand(0xF3);   
 8000faa:	20f3      	movs	r0, #243	; 0xf3
 8000fac:	f7ff fe8e 	bl	8000ccc <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x43);
 8000fb0:	2043      	movs	r0, #67	; 0x43
 8000fb2:	f7ff fea7 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x70);
 8000fb6:	2070      	movs	r0, #112	; 0x70
 8000fb8:	f7ff fea4 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x72);
 8000fbc:	2072      	movs	r0, #114	; 0x72
 8000fbe:	f7ff fea1 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x36);
 8000fc2:	2036      	movs	r0, #54	; 0x36
 8000fc4:	f7ff fe9e 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x37); 
 8000fc8:	2037      	movs	r0, #55	; 0x37
 8000fca:	f7ff fe9b 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x6F);
 8000fce:	206f      	movs	r0, #111	; 0x6f
 8000fd0:	f7ff fe98 	bl	8000d04 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xED);	
 8000fd4:	20ed      	movs	r0, #237	; 0xed
 8000fd6:	f7ff fe79 	bl	8000ccc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x1B); 
 8000fda:	201b      	movs	r0, #27
 8000fdc:	f7ff fe92 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0B); 
 8000fe0:	200b      	movs	r0, #11
 8000fe2:	f7ff fe8f 	bl	8000d04 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xAE);			
 8000fe6:	20ae      	movs	r0, #174	; 0xae
 8000fe8:	f7ff fe70 	bl	8000ccc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x77);
 8000fec:	2077      	movs	r0, #119	; 0x77
 8000fee:	f7ff fe89 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	
	LCD_1IN28_SendCommand(0xCD);			
 8000ff2:	20cd      	movs	r0, #205	; 0xcd
 8000ff4:	f7ff fe6a 	bl	8000ccc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x63);		
 8000ff8:	2063      	movs	r0, #99	; 0x63
 8000ffa:	f7ff fe83 	bl	8000d04 <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0x70);			
 8000ffe:	2070      	movs	r0, #112	; 0x70
 8001000:	f7ff fe64 	bl	8000ccc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x07);
 8001004:	2007      	movs	r0, #7
 8001006:	f7ff fe7d 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 800100a:	2007      	movs	r0, #7
 800100c:	f7ff fe7a 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x04);
 8001010:	2004      	movs	r0, #4
 8001012:	f7ff fe77 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0E); 
 8001016:	200e      	movs	r0, #14
 8001018:	f7ff fe74 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0F); 
 800101c:	200f      	movs	r0, #15
 800101e:	f7ff fe71 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x09);
 8001022:	2009      	movs	r0, #9
 8001024:	f7ff fe6e 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8001028:	2007      	movs	r0, #7
 800102a:	f7ff fe6b 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 800102e:	2008      	movs	r0, #8
 8001030:	f7ff fe68 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x03);
 8001034:	2003      	movs	r0, #3
 8001036:	f7ff fe65 	bl	8000d04 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xE8);			
 800103a:	20e8      	movs	r0, #232	; 0xe8
 800103c:	f7ff fe46 	bl	8000ccc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x34);
 8001040:	2034      	movs	r0, #52	; 0x34
 8001042:	f7ff fe5f 	bl	8000d04 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x62);			
 8001046:	2062      	movs	r0, #98	; 0x62
 8001048:	f7ff fe40 	bl	8000ccc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x18);
 800104c:	2018      	movs	r0, #24
 800104e:	f7ff fe59 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0D);
 8001052:	200d      	movs	r0, #13
 8001054:	f7ff fe56 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 8001058:	2071      	movs	r0, #113	; 0x71
 800105a:	f7ff fe53 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xED);
 800105e:	20ed      	movs	r0, #237	; 0xed
 8001060:	f7ff fe50 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 8001064:	2070      	movs	r0, #112	; 0x70
 8001066:	f7ff fe4d 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 800106a:	2070      	movs	r0, #112	; 0x70
 800106c:	f7ff fe4a 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x18);
 8001070:	2018      	movs	r0, #24
 8001072:	f7ff fe47 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0F);
 8001076:	200f      	movs	r0, #15
 8001078:	f7ff fe44 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 800107c:	2071      	movs	r0, #113	; 0x71
 800107e:	f7ff fe41 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xEF);
 8001082:	20ef      	movs	r0, #239	; 0xef
 8001084:	f7ff fe3e 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 8001088:	2070      	movs	r0, #112	; 0x70
 800108a:	f7ff fe3b 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 800108e:	2070      	movs	r0, #112	; 0x70
 8001090:	f7ff fe38 	bl	8000d04 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x63);			
 8001094:	2063      	movs	r0, #99	; 0x63
 8001096:	f7ff fe19 	bl	8000ccc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x18);
 800109a:	2018      	movs	r0, #24
 800109c:	f7ff fe32 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x11);
 80010a0:	2011      	movs	r0, #17
 80010a2:	f7ff fe2f 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 80010a6:	2071      	movs	r0, #113	; 0x71
 80010a8:	f7ff fe2c 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 80010ac:	20f1      	movs	r0, #241	; 0xf1
 80010ae:	f7ff fe29 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 80010b2:	2070      	movs	r0, #112	; 0x70
 80010b4:	f7ff fe26 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 80010b8:	2070      	movs	r0, #112	; 0x70
 80010ba:	f7ff fe23 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x18);
 80010be:	2018      	movs	r0, #24
 80010c0:	f7ff fe20 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x13);
 80010c4:	2013      	movs	r0, #19
 80010c6:	f7ff fe1d 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 80010ca:	2071      	movs	r0, #113	; 0x71
 80010cc:	f7ff fe1a 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF3);
 80010d0:	20f3      	movs	r0, #243	; 0xf3
 80010d2:	f7ff fe17 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 80010d6:	2070      	movs	r0, #112	; 0x70
 80010d8:	f7ff fe14 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 80010dc:	2070      	movs	r0, #112	; 0x70
 80010de:	f7ff fe11 	bl	8000d04 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x64);			
 80010e2:	2064      	movs	r0, #100	; 0x64
 80010e4:	f7ff fdf2 	bl	8000ccc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x28);
 80010e8:	2028      	movs	r0, #40	; 0x28
 80010ea:	f7ff fe0b 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x29);
 80010ee:	2029      	movs	r0, #41	; 0x29
 80010f0:	f7ff fe08 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 80010f4:	20f1      	movs	r0, #241	; 0xf1
 80010f6:	f7ff fe05 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 80010fa:	2001      	movs	r0, #1
 80010fc:	f7ff fe02 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 8001100:	20f1      	movs	r0, #241	; 0xf1
 8001102:	f7ff fdff 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001106:	2000      	movs	r0, #0
 8001108:	f7ff fdfc 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 800110c:	2007      	movs	r0, #7
 800110e:	f7ff fdf9 	bl	8000d04 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x66);			
 8001112:	2066      	movs	r0, #102	; 0x66
 8001114:	f7ff fdda 	bl	8000ccc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x3C);
 8001118:	203c      	movs	r0, #60	; 0x3c
 800111a:	f7ff fdf3 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 800111e:	2000      	movs	r0, #0
 8001120:	f7ff fdf0 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xCD);
 8001124:	20cd      	movs	r0, #205	; 0xcd
 8001126:	f7ff fded 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x67);
 800112a:	2067      	movs	r0, #103	; 0x67
 800112c:	f7ff fdea 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x45);
 8001130:	2045      	movs	r0, #69	; 0x45
 8001132:	f7ff fde7 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x45);
 8001136:	2045      	movs	r0, #69	; 0x45
 8001138:	f7ff fde4 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x10);
 800113c:	2010      	movs	r0, #16
 800113e:	f7ff fde1 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001142:	2000      	movs	r0, #0
 8001144:	f7ff fdde 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001148:	2000      	movs	r0, #0
 800114a:	f7ff fddb 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 800114e:	2000      	movs	r0, #0
 8001150:	f7ff fdd8 	bl	8000d04 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x67);			
 8001154:	2067      	movs	r0, #103	; 0x67
 8001156:	f7ff fdb9 	bl	8000ccc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 800115a:	2000      	movs	r0, #0
 800115c:	f7ff fdd2 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x3C);
 8001160:	203c      	movs	r0, #60	; 0x3c
 8001162:	f7ff fdcf 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001166:	2000      	movs	r0, #0
 8001168:	f7ff fdcc 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 800116c:	2000      	movs	r0, #0
 800116e:	f7ff fdc9 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001172:	2000      	movs	r0, #0
 8001174:	f7ff fdc6 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 8001178:	2001      	movs	r0, #1
 800117a:	f7ff fdc3 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x54);
 800117e:	2054      	movs	r0, #84	; 0x54
 8001180:	f7ff fdc0 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x10);
 8001184:	2010      	movs	r0, #16
 8001186:	f7ff fdbd 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x32);
 800118a:	2032      	movs	r0, #50	; 0x32
 800118c:	f7ff fdba 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x98);
 8001190:	2098      	movs	r0, #152	; 0x98
 8001192:	f7ff fdb7 	bl	8000d04 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x74);			
 8001196:	2074      	movs	r0, #116	; 0x74
 8001198:	f7ff fd98 	bl	8000ccc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x10);	
 800119c:	2010      	movs	r0, #16
 800119e:	f7ff fdb1 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x85);	
 80011a2:	2085      	movs	r0, #133	; 0x85
 80011a4:	f7ff fdae 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x80);
 80011a8:	2080      	movs	r0, #128	; 0x80
 80011aa:	f7ff fdab 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00); 
 80011ae:	2000      	movs	r0, #0
 80011b0:	f7ff fda8 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00); 
 80011b4:	2000      	movs	r0, #0
 80011b6:	f7ff fda5 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x4E);
 80011ba:	204e      	movs	r0, #78	; 0x4e
 80011bc:	f7ff fda2 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);					
 80011c0:	2000      	movs	r0, #0
 80011c2:	f7ff fd9f 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	
  LCD_1IN28_SendCommand(0x98);			
 80011c6:	2098      	movs	r0, #152	; 0x98
 80011c8:	f7ff fd80 	bl	8000ccc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x3e);
 80011cc:	203e      	movs	r0, #62	; 0x3e
 80011ce:	f7ff fd99 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 80011d2:	2007      	movs	r0, #7
 80011d4:	f7ff fd96 	bl	8000d04 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x35);	
 80011d8:	2035      	movs	r0, #53	; 0x35
 80011da:	f7ff fd77 	bl	8000ccc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0x21);
 80011de:	2021      	movs	r0, #33	; 0x21
 80011e0:	f7ff fd74 	bl	8000ccc <LCD_1IN28_SendCommand>

	LCD_1IN28_SendCommand(0x11);
 80011e4:	2011      	movs	r0, #17
 80011e6:	f7ff fd71 	bl	8000ccc <LCD_1IN28_SendCommand>
	DEV_Delay_ms(120);
 80011ea:	2078      	movs	r0, #120	; 0x78
 80011ec:	f000 fd78 	bl	8001ce0 <HAL_Delay>
	LCD_1IN28_SendCommand(0x29);
 80011f0:	2029      	movs	r0, #41	; 0x29
 80011f2:	f7ff fd6b 	bl	8000ccc <LCD_1IN28_SendCommand>
	DEV_Delay_ms(20);
 80011f6:	2014      	movs	r0, #20
 80011f8:	f000 fd72 	bl	8001ce0 <HAL_Delay>
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}

08001200 <LCD_1IN28_SetAttributes>:
function:	Set the resolution and scanning method of the screen
parameter:
		Scan_dir:   Scan direction
********************************************************************************/
static void LCD_1IN28_SetAttributes(UBYTE Scan_dir)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
    //Get the screen scan direction
    LCD_1IN28.SCAN_DIR = Scan_dir;
 800120a:	4a12      	ldr	r2, [pc, #72]	; (8001254 <LCD_1IN28_SetAttributes+0x54>)
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	7113      	strb	r3, [r2, #4]
    UBYTE MemoryAccessReg = 0x08;
 8001210:	2308      	movs	r3, #8
 8001212:	73fb      	strb	r3, [r7, #15]

    //Get GRAM and LCD width and height
    if(Scan_dir == HORIZONTAL) {
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d108      	bne.n	800122c <LCD_1IN28_SetAttributes+0x2c>
        LCD_1IN28.HEIGHT	= LCD_1IN28_HEIGHT;
 800121a:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <LCD_1IN28_SetAttributes+0x54>)
 800121c:	22f0      	movs	r2, #240	; 0xf0
 800121e:	805a      	strh	r2, [r3, #2]
        LCD_1IN28.WIDTH   = LCD_1IN28_WIDTH;
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <LCD_1IN28_SetAttributes+0x54>)
 8001222:	22f0      	movs	r2, #240	; 0xf0
 8001224:	801a      	strh	r2, [r3, #0]
        MemoryAccessReg = 0XC8;
 8001226:	23c8      	movs	r3, #200	; 0xc8
 8001228:	73fb      	strb	r3, [r7, #15]
 800122a:	e007      	b.n	800123c <LCD_1IN28_SetAttributes+0x3c>
    } else {
        LCD_1IN28.HEIGHT	= LCD_1IN28_WIDTH;
 800122c:	4b09      	ldr	r3, [pc, #36]	; (8001254 <LCD_1IN28_SetAttributes+0x54>)
 800122e:	22f0      	movs	r2, #240	; 0xf0
 8001230:	805a      	strh	r2, [r3, #2]
        LCD_1IN28.WIDTH   = LCD_1IN28_HEIGHT;
 8001232:	4b08      	ldr	r3, [pc, #32]	; (8001254 <LCD_1IN28_SetAttributes+0x54>)
 8001234:	22f0      	movs	r2, #240	; 0xf0
 8001236:	801a      	strh	r2, [r3, #0]
        MemoryAccessReg = 0X68;
 8001238:	2368      	movs	r3, #104	; 0x68
 800123a:	73fb      	strb	r3, [r7, #15]
    }

    // Set the read / write scan direction of the frame memory
    LCD_1IN28_SendCommand(0x36); //MX, MY, RGB mode
 800123c:	2036      	movs	r0, #54	; 0x36
 800123e:	f7ff fd45 	bl	8000ccc <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(MemoryAccessReg);	//0x08 set RGB
 8001242:	7bfb      	ldrb	r3, [r7, #15]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff fd5d 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
}
 800124a:	bf00      	nop
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	200000ac 	.word	0x200000ac

08001258 <LCD_1IN28_Init>:
/********************************************************************************
function :	Initialize the lcd
parameter:
********************************************************************************/
void LCD_1IN28_Init(UBYTE Scan_dir)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]

    //Hardware reset
    LCD_1IN28_Reset();
 8001262:	f7ff fd11 	bl	8000c88 <LCD_1IN28_Reset>

    //Set the resolution and scanning method of the screen
    LCD_1IN28_SetAttributes(Scan_dir);
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ffc9 	bl	8001200 <LCD_1IN28_SetAttributes>
    
    //Set the initialization register
    LCD_1IN28_InitReg();
 800126e:	f7ff fd95 	bl	8000d9c <LCD_1IN28_InitReg>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <LCD_1IN28_SetWindows>:
		Ystart  :   Y direction Start coordinates
		Xend    :   X direction end coordinates
		Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_1IN28_SetWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend)
{
 800127a:	b590      	push	{r4, r7, lr}
 800127c:	b083      	sub	sp, #12
 800127e:	af00      	add	r7, sp, #0
 8001280:	4604      	mov	r4, r0
 8001282:	4608      	mov	r0, r1
 8001284:	4611      	mov	r1, r2
 8001286:	461a      	mov	r2, r3
 8001288:	4623      	mov	r3, r4
 800128a:	80fb      	strh	r3, [r7, #6]
 800128c:	4603      	mov	r3, r0
 800128e:	80bb      	strh	r3, [r7, #4]
 8001290:	460b      	mov	r3, r1
 8001292:	807b      	strh	r3, [r7, #2]
 8001294:	4613      	mov	r3, r2
 8001296:	803b      	strh	r3, [r7, #0]
    //set the X coordinates
    LCD_1IN28_SendCommand(0x2A);
 8001298:	202a      	movs	r0, #42	; 0x2a
 800129a:	f7ff fd17 	bl	8000ccc <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(0x00);
 800129e:	2000      	movs	r0, #0
 80012a0:	f7ff fd30 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Xstart);
 80012a4:	88fb      	ldrh	r3, [r7, #6]
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fd2b 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	  LCD_1IN28_SendData_8Bit(0x00);
 80012ae:	2000      	movs	r0, #0
 80012b0:	f7ff fd28 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Xend);
 80012b4:	887b      	ldrh	r3, [r7, #2]
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff fd23 	bl	8000d04 <LCD_1IN28_SendData_8Bit>

    //set the Y coordinates
    LCD_1IN28_SendCommand(0x2B);
 80012be:	202b      	movs	r0, #43	; 0x2b
 80012c0:	f7ff fd04 	bl	8000ccc <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(0x00);
 80012c4:	2000      	movs	r0, #0
 80012c6:	f7ff fd1d 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	  LCD_1IN28_SendData_8Bit(Ystart);
 80012ca:	88bb      	ldrh	r3, [r7, #4]
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff fd18 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
	  LCD_1IN28_SendData_8Bit(0x00);
 80012d4:	2000      	movs	r0, #0
 80012d6:	f7ff fd15 	bl	8000d04 <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Yend);
 80012da:	883b      	ldrh	r3, [r7, #0]
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff fd10 	bl	8000d04 <LCD_1IN28_SendData_8Bit>

    LCD_1IN28_SendCommand(0X2C);
 80012e4:	202c      	movs	r0, #44	; 0x2c
 80012e6:	f7ff fcf1 	bl	8000ccc <LCD_1IN28_SendCommand>
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd90      	pop	{r4, r7, pc}
	...

080012f4 <LCD_1IN28_Clear>:
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void LCD_1IN28_Clear(UWORD Color)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	80fb      	strh	r3, [r7, #6]
    UWORD i,j;
    LCD_1IN28_SetWindows(0, 0, LCD_1IN28_WIDTH-1, LCD_1IN28_HEIGHT-1);
 80012fe:	23ef      	movs	r3, #239	; 0xef
 8001300:	22ef      	movs	r2, #239	; 0xef
 8001302:	2100      	movs	r1, #0
 8001304:	2000      	movs	r0, #0
 8001306:	f7ff ffb8 	bl	800127a <LCD_1IN28_SetWindows>

	DEV_Digital_Write(DEV_DC_PIN, 1);
 800130a:	2201      	movs	r2, #1
 800130c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001310:	4812      	ldr	r0, [pc, #72]	; (800135c <LCD_1IN28_Clear+0x68>)
 8001312:	f000 ff71 	bl	80021f8 <HAL_GPIO_WritePin>
	for(i = 0; i < LCD_1IN28_WIDTH; i++){
 8001316:	2300      	movs	r3, #0
 8001318:	81fb      	strh	r3, [r7, #14]
 800131a:	e017      	b.n	800134c <LCD_1IN28_Clear+0x58>
		for(j = 0; j < LCD_1IN28_HEIGHT; j++){
 800131c:	2300      	movs	r3, #0
 800131e:	81bb      	strh	r3, [r7, #12]
 8001320:	e00e      	b.n	8001340 <LCD_1IN28_Clear+0x4c>
			DEV_SPI_WRITE(Color>>8);
 8001322:	88fb      	ldrh	r3, [r7, #6]
 8001324:	0a1b      	lsrs	r3, r3, #8
 8001326:	b29b      	uxth	r3, r3
 8001328:	b2db      	uxtb	r3, r3
 800132a:	4618      	mov	r0, r3
 800132c:	f7fe ff0e 	bl	800014c <DEV_SPI_WRite>
			DEV_SPI_WRITE(Color);
 8001330:	88fb      	ldrh	r3, [r7, #6]
 8001332:	b2db      	uxtb	r3, r3
 8001334:	4618      	mov	r0, r3
 8001336:	f7fe ff09 	bl	800014c <DEV_SPI_WRite>
		for(j = 0; j < LCD_1IN28_HEIGHT; j++){
 800133a:	89bb      	ldrh	r3, [r7, #12]
 800133c:	3301      	adds	r3, #1
 800133e:	81bb      	strh	r3, [r7, #12]
 8001340:	89bb      	ldrh	r3, [r7, #12]
 8001342:	2bef      	cmp	r3, #239	; 0xef
 8001344:	d9ed      	bls.n	8001322 <LCD_1IN28_Clear+0x2e>
	for(i = 0; i < LCD_1IN28_WIDTH; i++){
 8001346:	89fb      	ldrh	r3, [r7, #14]
 8001348:	3301      	adds	r3, #1
 800134a:	81fb      	strh	r3, [r7, #14]
 800134c:	89fb      	ldrh	r3, [r7, #14]
 800134e:	2bef      	cmp	r3, #239	; 0xef
 8001350:	d9e4      	bls.n	800131c <LCD_1IN28_Clear+0x28>
		}
	 }
}
 8001352:	bf00      	nop
 8001354:	bf00      	nop
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40010800 	.word	0x40010800

08001360 <LCD_1IN28_DrawPaint>:
	    X	: 	Set the X coordinate
	    Y	:	Set the Y coordinate
	  Color :	Set the color
******************************************************************************/
void LCD_1IN28_DrawPaint(UWORD x, UWORD y, UWORD Color)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	80fb      	strh	r3, [r7, #6]
 800136a:	460b      	mov	r3, r1
 800136c:	80bb      	strh	r3, [r7, #4]
 800136e:	4613      	mov	r3, r2
 8001370:	807b      	strh	r3, [r7, #2]
	LCD_1IN28_SetWindows(x,y,x,y);
 8001372:	88bb      	ldrh	r3, [r7, #4]
 8001374:	88fa      	ldrh	r2, [r7, #6]
 8001376:	88b9      	ldrh	r1, [r7, #4]
 8001378:	88f8      	ldrh	r0, [r7, #6]
 800137a:	f7ff ff7e 	bl	800127a <LCD_1IN28_SetWindows>
	LCD_1IN28_SendData_16Bit(Color); 	    
 800137e:	887b      	ldrh	r3, [r7, #2]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff fce1 	bl	8000d48 <LCD_1IN28_SendData_16Bit>
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <LCD_1IN28_SetBackLight>:
	Setting backlight
parameter	:
	  value : Range 0~1000   Duty cycle is value/1000	
*******************************************************************************/
void LCD_1IN28_SetBackLight(UWORD Value)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	80fb      	strh	r3, [r7, #6]
	DEV_Set_PWM(Value);
 800139a:	4a04      	ldr	r2, [pc, #16]	; (80013ac <LCD_1IN28_SetBackLight+0x1c>)
 800139c:	88fb      	ldrh	r3, [r7, #6]
 800139e:	6393      	str	r3, [r2, #56]	; 0x38
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc80      	pop	{r7}
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	40012c00 	.word	0x40012c00

080013b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b6:	f107 0308 	add.w	r3, r7, #8
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c4:	4b21      	ldr	r3, [pc, #132]	; (800144c <MX_GPIO_Init+0x9c>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	4a20      	ldr	r2, [pc, #128]	; (800144c <MX_GPIO_Init+0x9c>)
 80013ca:	f043 0304 	orr.w	r3, r3, #4
 80013ce:	6193      	str	r3, [r2, #24]
 80013d0:	4b1e      	ldr	r3, [pc, #120]	; (800144c <MX_GPIO_Init+0x9c>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	f003 0304 	and.w	r3, r3, #4
 80013d8:	607b      	str	r3, [r7, #4]
 80013da:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013dc:	4b1b      	ldr	r3, [pc, #108]	; (800144c <MX_GPIO_Init+0x9c>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	4a1a      	ldr	r2, [pc, #104]	; (800144c <MX_GPIO_Init+0x9c>)
 80013e2:	f043 0308 	orr.w	r3, r3, #8
 80013e6:	6193      	str	r3, [r2, #24]
 80013e8:	4b18      	ldr	r3, [pc, #96]	; (800144c <MX_GPIO_Init+0x9c>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	f003 0308 	and.w	r3, r3, #8
 80013f0:	603b      	str	r3, [r7, #0]
 80013f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80013f4:	2200      	movs	r2, #0
 80013f6:	f44f 7140 	mov.w	r1, #768	; 0x300
 80013fa:	4815      	ldr	r0, [pc, #84]	; (8001450 <MX_GPIO_Init+0xa0>)
 80013fc:	f000 fefc 	bl	80021f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001400:	2200      	movs	r2, #0
 8001402:	2140      	movs	r1, #64	; 0x40
 8001404:	4813      	ldr	r0, [pc, #76]	; (8001454 <MX_GPIO_Init+0xa4>)
 8001406:	f000 fef7 	bl	80021f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800140a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800140e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001410:	2301      	movs	r3, #1
 8001412:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001418:	2302      	movs	r3, #2
 800141a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141c:	f107 0308 	add.w	r3, r7, #8
 8001420:	4619      	mov	r1, r3
 8001422:	480b      	ldr	r0, [pc, #44]	; (8001450 <MX_GPIO_Init+0xa0>)
 8001424:	f000 fd64 	bl	8001ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001428:	2340      	movs	r3, #64	; 0x40
 800142a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142c:	2301      	movs	r3, #1
 800142e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001434:	2302      	movs	r3, #2
 8001436:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001438:	f107 0308 	add.w	r3, r7, #8
 800143c:	4619      	mov	r1, r3
 800143e:	4805      	ldr	r0, [pc, #20]	; (8001454 <MX_GPIO_Init+0xa4>)
 8001440:	f000 fd56 	bl	8001ef0 <HAL_GPIO_Init>

}
 8001444:	bf00      	nop
 8001446:	3718      	adds	r7, #24
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40021000 	.word	0x40021000
 8001450:	40010800 	.word	0x40010800
 8001454:	40010c00 	.word	0x40010c00

08001458 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800145c:	f000 fbde 	bl	8001c1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001460:	f000 f80b 	bl	800147a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001464:	f7ff ffa4 	bl	80013b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001468:	f000 fa6c 	bl	8001944 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800146c:	f000 f9c4 	bl	80017f8 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001470:	f000 f844 	bl	80014fc <MX_SPI1_Init>
  LCD_1in28_test(); 
 8001474:	f000 fb00 	bl	8001a78 <LCD_1in28_test>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001478:	e7fe      	b.n	8001478 <main+0x20>

0800147a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b090      	sub	sp, #64	; 0x40
 800147e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001480:	f107 0318 	add.w	r3, r7, #24
 8001484:	2228      	movs	r2, #40	; 0x28
 8001486:	2100      	movs	r1, #0
 8001488:	4618      	mov	r0, r3
 800148a:	f002 fcfd 	bl	8003e88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800149c:	2302      	movs	r3, #2
 800149e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014a0:	2301      	movs	r3, #1
 80014a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014a4:	2310      	movs	r3, #16
 80014a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ac:	f107 0318 	add.w	r3, r7, #24
 80014b0:	4618      	mov	r0, r3
 80014b2:	f000 feb9 	bl	8002228 <HAL_RCC_OscConfig>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80014bc:	f000 f818 	bl	80014f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014c0:	230f      	movs	r3, #15
 80014c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014c4:	2300      	movs	r3, #0
 80014c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014cc:	2300      	movs	r3, #0
 80014ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	2100      	movs	r1, #0
 80014d8:	4618      	mov	r0, r3
 80014da:	f001 f927 	bl	800272c <HAL_RCC_ClockConfig>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80014e4:	f000 f804 	bl	80014f0 <Error_Handler>
  }
}
 80014e8:	bf00      	nop
 80014ea:	3740      	adds	r7, #64	; 0x40
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014f4:	b672      	cpsid	i
}
 80014f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <Error_Handler+0x8>
	...

080014fc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001500:	4b17      	ldr	r3, [pc, #92]	; (8001560 <MX_SPI1_Init+0x64>)
 8001502:	4a18      	ldr	r2, [pc, #96]	; (8001564 <MX_SPI1_Init+0x68>)
 8001504:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001506:	4b16      	ldr	r3, [pc, #88]	; (8001560 <MX_SPI1_Init+0x64>)
 8001508:	f44f 7282 	mov.w	r2, #260	; 0x104
 800150c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800150e:	4b14      	ldr	r3, [pc, #80]	; (8001560 <MX_SPI1_Init+0x64>)
 8001510:	2200      	movs	r2, #0
 8001512:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001514:	4b12      	ldr	r3, [pc, #72]	; (8001560 <MX_SPI1_Init+0x64>)
 8001516:	2200      	movs	r2, #0
 8001518:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800151a:	4b11      	ldr	r3, [pc, #68]	; (8001560 <MX_SPI1_Init+0x64>)
 800151c:	2200      	movs	r2, #0
 800151e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001520:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <MX_SPI1_Init+0x64>)
 8001522:	2200      	movs	r2, #0
 8001524:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001526:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <MX_SPI1_Init+0x64>)
 8001528:	f44f 7200 	mov.w	r2, #512	; 0x200
 800152c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800152e:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <MX_SPI1_Init+0x64>)
 8001530:	2200      	movs	r2, #0
 8001532:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001534:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <MX_SPI1_Init+0x64>)
 8001536:	2200      	movs	r2, #0
 8001538:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800153a:	4b09      	ldr	r3, [pc, #36]	; (8001560 <MX_SPI1_Init+0x64>)
 800153c:	2200      	movs	r2, #0
 800153e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001540:	4b07      	ldr	r3, [pc, #28]	; (8001560 <MX_SPI1_Init+0x64>)
 8001542:	2200      	movs	r2, #0
 8001544:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <MX_SPI1_Init+0x64>)
 8001548:	220a      	movs	r2, #10
 800154a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800154c:	4804      	ldr	r0, [pc, #16]	; (8001560 <MX_SPI1_Init+0x64>)
 800154e:	f001 fa7b 	bl	8002a48 <HAL_SPI_Init>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001558:	f7ff ffca 	bl	80014f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}
 8001560:	200000b4 	.word	0x200000b4
 8001564:	40013000 	.word	0x40013000

08001568 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b088      	sub	sp, #32
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001570:	f107 0310 	add.w	r3, r7, #16
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a1b      	ldr	r2, [pc, #108]	; (80015f0 <HAL_SPI_MspInit+0x88>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d12f      	bne.n	80015e8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001588:	4b1a      	ldr	r3, [pc, #104]	; (80015f4 <HAL_SPI_MspInit+0x8c>)
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	4a19      	ldr	r2, [pc, #100]	; (80015f4 <HAL_SPI_MspInit+0x8c>)
 800158e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001592:	6193      	str	r3, [r2, #24]
 8001594:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <HAL_SPI_MspInit+0x8c>)
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a0:	4b14      	ldr	r3, [pc, #80]	; (80015f4 <HAL_SPI_MspInit+0x8c>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	4a13      	ldr	r2, [pc, #76]	; (80015f4 <HAL_SPI_MspInit+0x8c>)
 80015a6:	f043 0304 	orr.w	r3, r3, #4
 80015aa:	6193      	str	r3, [r2, #24]
 80015ac:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <HAL_SPI_MspInit+0x8c>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	f003 0304 	and.w	r3, r3, #4
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80015b8:	23a0      	movs	r3, #160	; 0xa0
 80015ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015bc:	2302      	movs	r3, #2
 80015be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015c0:	2303      	movs	r3, #3
 80015c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c4:	f107 0310 	add.w	r3, r7, #16
 80015c8:	4619      	mov	r1, r3
 80015ca:	480b      	ldr	r0, [pc, #44]	; (80015f8 <HAL_SPI_MspInit+0x90>)
 80015cc:	f000 fc90 	bl	8001ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015d0:	2340      	movs	r3, #64	; 0x40
 80015d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015dc:	f107 0310 	add.w	r3, r7, #16
 80015e0:	4619      	mov	r1, r3
 80015e2:	4805      	ldr	r0, [pc, #20]	; (80015f8 <HAL_SPI_MspInit+0x90>)
 80015e4:	f000 fc84 	bl	8001ef0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80015e8:	bf00      	nop
 80015ea:	3720      	adds	r7, #32
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40013000 	.word	0x40013000
 80015f4:	40021000 	.word	0x40021000
 80015f8:	40010800 	.word	0x40010800

080015fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001602:	4b15      	ldr	r3, [pc, #84]	; (8001658 <HAL_MspInit+0x5c>)
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	4a14      	ldr	r2, [pc, #80]	; (8001658 <HAL_MspInit+0x5c>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6193      	str	r3, [r2, #24]
 800160e:	4b12      	ldr	r3, [pc, #72]	; (8001658 <HAL_MspInit+0x5c>)
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800161a:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <HAL_MspInit+0x5c>)
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	4a0e      	ldr	r2, [pc, #56]	; (8001658 <HAL_MspInit+0x5c>)
 8001620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001624:	61d3      	str	r3, [r2, #28]
 8001626:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <HAL_MspInit+0x5c>)
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162e:	607b      	str	r3, [r7, #4]
 8001630:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001632:	4b0a      	ldr	r3, [pc, #40]	; (800165c <HAL_MspInit+0x60>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	4a04      	ldr	r2, [pc, #16]	; (800165c <HAL_MspInit+0x60>)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800164e:	bf00      	nop
 8001650:	3714      	adds	r7, #20
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr
 8001658:	40021000 	.word	0x40021000
 800165c:	40010000 	.word	0x40010000

08001660 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001664:	e7fe      	b.n	8001664 <NMI_Handler+0x4>

08001666 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800166a:	e7fe      	b.n	800166a <HardFault_Handler+0x4>

0800166c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001670:	e7fe      	b.n	8001670 <MemManage_Handler+0x4>

08001672 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001672:	b480      	push	{r7}
 8001674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001676:	e7fe      	b.n	8001676 <BusFault_Handler+0x4>

08001678 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800167c:	e7fe      	b.n	800167c <UsageFault_Handler+0x4>

0800167e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	46bd      	mov	sp, r7
 8001686:	bc80      	pop	{r7}
 8001688:	4770      	bx	lr

0800168a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	46bd      	mov	sp, r7
 8001692:	bc80      	pop	{r7}
 8001694:	4770      	bx	lr

08001696 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr

080016a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016a6:	f000 faff 	bl	8001ca8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}

080016ae <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b086      	sub	sp, #24
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	60f8      	str	r0, [r7, #12]
 80016b6:	60b9      	str	r1, [r7, #8]
 80016b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ba:	2300      	movs	r3, #0
 80016bc:	617b      	str	r3, [r7, #20]
 80016be:	e00a      	b.n	80016d6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016c0:	f3af 8000 	nop.w
 80016c4:	4601      	mov	r1, r0
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	1c5a      	adds	r2, r3, #1
 80016ca:	60ba      	str	r2, [r7, #8]
 80016cc:	b2ca      	uxtb	r2, r1
 80016ce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	3301      	adds	r3, #1
 80016d4:	617b      	str	r3, [r7, #20]
 80016d6:	697a      	ldr	r2, [r7, #20]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	429a      	cmp	r2, r3
 80016dc:	dbf0      	blt.n	80016c0 <_read+0x12>
  }

  return len;
 80016de:	687b      	ldr	r3, [r7, #4]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3718      	adds	r7, #24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
 80016f8:	e009      	b.n	800170e <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	1c5a      	adds	r2, r3, #1
 80016fe:	60ba      	str	r2, [r7, #8]
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	3301      	adds	r3, #1
 800170c:	617b      	str	r3, [r7, #20]
 800170e:	697a      	ldr	r2, [r7, #20]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	429a      	cmp	r2, r3
 8001714:	dbf1      	blt.n	80016fa <_write+0x12>
  }
  return len;
 8001716:	687b      	ldr	r3, [r7, #4]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <_close>:

int _close(int file)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001728:	f04f 33ff 	mov.w	r3, #4294967295
}
 800172c:	4618      	mov	r0, r3
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	bc80      	pop	{r7}
 8001734:	4770      	bx	lr

08001736 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001736:	b480      	push	{r7}
 8001738:	b083      	sub	sp, #12
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
 800173e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001746:	605a      	str	r2, [r3, #4]
  return 0;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr

08001754 <_isatty>:

int _isatty(int file)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800175c:	2301      	movs	r3, #1
}
 800175e:	4618      	mov	r0, r3
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr

08001768 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3714      	adds	r7, #20
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr

08001780 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001788:	4a14      	ldr	r2, [pc, #80]	; (80017dc <_sbrk+0x5c>)
 800178a:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <_sbrk+0x60>)
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001794:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <_sbrk+0x64>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d102      	bne.n	80017a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800179c:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <_sbrk+0x64>)
 800179e:	4a12      	ldr	r2, [pc, #72]	; (80017e8 <_sbrk+0x68>)
 80017a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017a2:	4b10      	ldr	r3, [pc, #64]	; (80017e4 <_sbrk+0x64>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4413      	add	r3, r2
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d207      	bcs.n	80017c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017b0:	f002 fbc8 	bl	8003f44 <__errno>
 80017b4:	4603      	mov	r3, r0
 80017b6:	220c      	movs	r2, #12
 80017b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ba:	f04f 33ff 	mov.w	r3, #4294967295
 80017be:	e009      	b.n	80017d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017c0:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <_sbrk+0x64>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017c6:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <_sbrk+0x64>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4413      	add	r3, r2
 80017ce:	4a05      	ldr	r2, [pc, #20]	; (80017e4 <_sbrk+0x64>)
 80017d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017d2:	68fb      	ldr	r3, [r7, #12]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3718      	adds	r7, #24
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20005000 	.word	0x20005000
 80017e0:	00000400 	.word	0x00000400
 80017e4:	2000010c 	.word	0x2000010c
 80017e8:	200002f0 	.word	0x200002f0

080017ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr

080017f8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08a      	sub	sp, #40	; 0x28
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017fe:	f107 0320 	add.w	r3, r7, #32
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001808:	1d3b      	adds	r3, r7, #4
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	605a      	str	r2, [r3, #4]
 8001810:	609a      	str	r2, [r3, #8]
 8001812:	60da      	str	r2, [r3, #12]
 8001814:	611a      	str	r2, [r3, #16]
 8001816:	615a      	str	r2, [r3, #20]
 8001818:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800181a:	4b23      	ldr	r3, [pc, #140]	; (80018a8 <MX_TIM2_Init+0xb0>)
 800181c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001820:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001822:	4b21      	ldr	r3, [pc, #132]	; (80018a8 <MX_TIM2_Init+0xb0>)
 8001824:	2247      	movs	r2, #71	; 0x47
 8001826:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001828:	4b1f      	ldr	r3, [pc, #124]	; (80018a8 <MX_TIM2_Init+0xb0>)
 800182a:	2200      	movs	r2, #0
 800182c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800182e:	4b1e      	ldr	r3, [pc, #120]	; (80018a8 <MX_TIM2_Init+0xb0>)
 8001830:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001834:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001836:	4b1c      	ldr	r3, [pc, #112]	; (80018a8 <MX_TIM2_Init+0xb0>)
 8001838:	2200      	movs	r2, #0
 800183a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800183c:	4b1a      	ldr	r3, [pc, #104]	; (80018a8 <MX_TIM2_Init+0xb0>)
 800183e:	2200      	movs	r2, #0
 8001840:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001842:	4819      	ldr	r0, [pc, #100]	; (80018a8 <MX_TIM2_Init+0xb0>)
 8001844:	f001 fb6e 	bl	8002f24 <HAL_TIM_PWM_Init>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800184e:	f7ff fe4f 	bl	80014f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001852:	2300      	movs	r3, #0
 8001854:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001856:	2300      	movs	r3, #0
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800185a:	f107 0320 	add.w	r3, r7, #32
 800185e:	4619      	mov	r1, r3
 8001860:	4811      	ldr	r0, [pc, #68]	; (80018a8 <MX_TIM2_Init+0xb0>)
 8001862:	f001 ff21 	bl	80036a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800186c:	f7ff fe40 	bl	80014f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001870:	2360      	movs	r3, #96	; 0x60
 8001872:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8001874:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001878:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001882:	1d3b      	adds	r3, r7, #4
 8001884:	2200      	movs	r2, #0
 8001886:	4619      	mov	r1, r3
 8001888:	4807      	ldr	r0, [pc, #28]	; (80018a8 <MX_TIM2_Init+0xb0>)
 800188a:	f001 fc3d 	bl	8003108 <HAL_TIM_PWM_ConfigChannel>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001894:	f7ff fe2c 	bl	80014f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001898:	4803      	ldr	r0, [pc, #12]	; (80018a8 <MX_TIM2_Init+0xb0>)
 800189a:	f000 f823 	bl	80018e4 <HAL_TIM_MspPostInit>

}
 800189e:	bf00      	nop
 80018a0:	3728      	adds	r7, #40	; 0x28
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000110 	.word	0x20000110

080018ac <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018bc:	d10b      	bne.n	80018d6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018be:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <HAL_TIM_PWM_MspInit+0x34>)
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	4a07      	ldr	r2, [pc, #28]	; (80018e0 <HAL_TIM_PWM_MspInit+0x34>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	61d3      	str	r3, [r2, #28]
 80018ca:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <HAL_TIM_PWM_MspInit+0x34>)
 80018cc:	69db      	ldr	r3, [r3, #28]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80018d6:	bf00      	nop
 80018d8:	3714      	adds	r7, #20
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr
 80018e0:	40021000 	.word	0x40021000

080018e4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b088      	sub	sp, #32
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ec:	f107 0310 	add.w	r3, r7, #16
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001902:	d117      	bne.n	8001934 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001904:	4b0d      	ldr	r3, [pc, #52]	; (800193c <HAL_TIM_MspPostInit+0x58>)
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	4a0c      	ldr	r2, [pc, #48]	; (800193c <HAL_TIM_MspPostInit+0x58>)
 800190a:	f043 0304 	orr.w	r3, r3, #4
 800190e:	6193      	str	r3, [r2, #24]
 8001910:	4b0a      	ldr	r3, [pc, #40]	; (800193c <HAL_TIM_MspPostInit+0x58>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	f003 0304 	and.w	r3, r3, #4
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800191c:	2301      	movs	r3, #1
 800191e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001920:	2302      	movs	r3, #2
 8001922:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001924:	2302      	movs	r3, #2
 8001926:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001928:	f107 0310 	add.w	r3, r7, #16
 800192c:	4619      	mov	r1, r3
 800192e:	4804      	ldr	r0, [pc, #16]	; (8001940 <HAL_TIM_MspPostInit+0x5c>)
 8001930:	f000 fade 	bl	8001ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001934:	bf00      	nop
 8001936:	3720      	adds	r7, #32
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40021000 	.word	0x40021000
 8001940:	40010800 	.word	0x40010800

08001944 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001948:	4b11      	ldr	r3, [pc, #68]	; (8001990 <MX_USART2_UART_Init+0x4c>)
 800194a:	4a12      	ldr	r2, [pc, #72]	; (8001994 <MX_USART2_UART_Init+0x50>)
 800194c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800194e:	4b10      	ldr	r3, [pc, #64]	; (8001990 <MX_USART2_UART_Init+0x4c>)
 8001950:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001954:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001956:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <MX_USART2_UART_Init+0x4c>)
 8001958:	2200      	movs	r2, #0
 800195a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800195c:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <MX_USART2_UART_Init+0x4c>)
 800195e:	2200      	movs	r2, #0
 8001960:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001962:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <MX_USART2_UART_Init+0x4c>)
 8001964:	2200      	movs	r2, #0
 8001966:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001968:	4b09      	ldr	r3, [pc, #36]	; (8001990 <MX_USART2_UART_Init+0x4c>)
 800196a:	220c      	movs	r2, #12
 800196c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800196e:	4b08      	ldr	r3, [pc, #32]	; (8001990 <MX_USART2_UART_Init+0x4c>)
 8001970:	2200      	movs	r2, #0
 8001972:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001974:	4b06      	ldr	r3, [pc, #24]	; (8001990 <MX_USART2_UART_Init+0x4c>)
 8001976:	2200      	movs	r2, #0
 8001978:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800197a:	4805      	ldr	r0, [pc, #20]	; (8001990 <MX_USART2_UART_Init+0x4c>)
 800197c:	f001 fef2 	bl	8003764 <HAL_UART_Init>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001986:	f7ff fdb3 	bl	80014f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000158 	.word	0x20000158
 8001994:	40004400 	.word	0x40004400

08001998 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b088      	sub	sp, #32
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a0:	f107 0310 	add.w	r3, r7, #16
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a1b      	ldr	r2, [pc, #108]	; (8001a20 <HAL_UART_MspInit+0x88>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d12f      	bne.n	8001a18 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019b8:	4b1a      	ldr	r3, [pc, #104]	; (8001a24 <HAL_UART_MspInit+0x8c>)
 80019ba:	69db      	ldr	r3, [r3, #28]
 80019bc:	4a19      	ldr	r2, [pc, #100]	; (8001a24 <HAL_UART_MspInit+0x8c>)
 80019be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c2:	61d3      	str	r3, [r2, #28]
 80019c4:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <HAL_UART_MspInit+0x8c>)
 80019c6:	69db      	ldr	r3, [r3, #28]
 80019c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d0:	4b14      	ldr	r3, [pc, #80]	; (8001a24 <HAL_UART_MspInit+0x8c>)
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	4a13      	ldr	r2, [pc, #76]	; (8001a24 <HAL_UART_MspInit+0x8c>)
 80019d6:	f043 0304 	orr.w	r3, r3, #4
 80019da:	6193      	str	r3, [r2, #24]
 80019dc:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <HAL_UART_MspInit+0x8c>)
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	60bb      	str	r3, [r7, #8]
 80019e6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019e8:	2304      	movs	r3, #4
 80019ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ec:	2302      	movs	r3, #2
 80019ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019f0:	2303      	movs	r3, #3
 80019f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f4:	f107 0310 	add.w	r3, r7, #16
 80019f8:	4619      	mov	r1, r3
 80019fa:	480b      	ldr	r0, [pc, #44]	; (8001a28 <HAL_UART_MspInit+0x90>)
 80019fc:	f000 fa78 	bl	8001ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a00:	2308      	movs	r3, #8
 8001a02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0c:	f107 0310 	add.w	r3, r7, #16
 8001a10:	4619      	mov	r1, r3
 8001a12:	4805      	ldr	r0, [pc, #20]	; (8001a28 <HAL_UART_MspInit+0x90>)
 8001a14:	f000 fa6c 	bl	8001ef0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001a18:	bf00      	nop
 8001a1a:	3720      	adds	r7, #32
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40004400 	.word	0x40004400
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40010800 	.word	0x40010800

08001a2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a2c:	f7ff fede 	bl	80017ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a30:	480b      	ldr	r0, [pc, #44]	; (8001a60 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a32:	490c      	ldr	r1, [pc, #48]	; (8001a64 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a34:	4a0c      	ldr	r2, [pc, #48]	; (8001a68 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a38:	e002      	b.n	8001a40 <LoopCopyDataInit>

08001a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a3e:	3304      	adds	r3, #4

08001a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a44:	d3f9      	bcc.n	8001a3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a46:	4a09      	ldr	r2, [pc, #36]	; (8001a6c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a48:	4c09      	ldr	r4, [pc, #36]	; (8001a70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a4c:	e001      	b.n	8001a52 <LoopFillZerobss>

08001a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a50:	3204      	adds	r2, #4

08001a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a54:	d3fb      	bcc.n	8001a4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a56:	f002 fa7b 	bl	8003f50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a5a:	f7ff fcfd 	bl	8001458 <main>
  bx lr
 8001a5e:	4770      	bx	lr
  ldr r0, =_sdata
 8001a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a64:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001a68:	08007e90 	.word	0x08007e90
  ldr r2, =_sbss
 8001a6c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001a70:	200002f0 	.word	0x200002f0

08001a74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a74:	e7fe      	b.n	8001a74 <ADC1_2_IRQHandler>
	...

08001a78 <LCD_1in28_test>:
#include "LCD_1in28.h"
#include "DEV_Config.h"


void LCD_1in28_test()
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af04      	add	r7, sp, #16
	printf("LCD_1IN28_test Demo\r\n");
 8001a7e:	485a      	ldr	r0, [pc, #360]	; (8001be8 <LCD_1in28_test+0x170>)
 8001a80:	f002 f922 	bl	8003cc8 <puts>
	DEV_Module_Init();
 8001a84:	f7fe fb74 	bl	8000170 <DEV_Module_Init>
  
  printf("LCD_1IN28_ Init and Clear...\r\n");
 8001a88:	4858      	ldr	r0, [pc, #352]	; (8001bec <LCD_1in28_test+0x174>)
 8001a8a:	f002 f91d 	bl	8003cc8 <puts>
	LCD_1IN28_SetBackLight(1000);
 8001a8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a92:	f7ff fc7d 	bl	8001390 <LCD_1IN28_SetBackLight>
	LCD_1IN28_Init(VERTICAL);
 8001a96:	2001      	movs	r0, #1
 8001a98:	f7ff fbde 	bl	8001258 <LCD_1IN28_Init>
 	LCD_1IN28_Clear(BLACK);
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	f7ff fc29 	bl	80012f4 <LCD_1IN28_Clear>
	
	printf("Paint_NewImage\r\n");
 8001aa2:	4853      	ldr	r0, [pc, #332]	; (8001bf0 <LCD_1in28_test+0x178>)
 8001aa4:	f002 f910 	bl	8003cc8 <puts>
	Paint_NewImage(LCD_1IN28_WIDTH,LCD_1IN28_HEIGHT, 0, BLACK);
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	2200      	movs	r2, #0
 8001aac:	21f0      	movs	r1, #240	; 0xf0
 8001aae:	20f0      	movs	r0, #240	; 0xf0
 8001ab0:	f7fe fb7e 	bl	80001b0 <Paint_NewImage>
	
	printf("Set Clear and Display Funtion\r\n");
 8001ab4:	484f      	ldr	r0, [pc, #316]	; (8001bf4 <LCD_1in28_test+0x17c>)
 8001ab6:	f002 f907 	bl	8003cc8 <puts>
	Paint_SetClearFuntion(LCD_1IN28_Clear);
 8001aba:	484f      	ldr	r0, [pc, #316]	; (8001bf8 <LCD_1in28_test+0x180>)
 8001abc:	f7fe fbc4 	bl	8000248 <Paint_SetClearFuntion>
	Paint_SetDisplayFuntion(LCD_1IN28_DrawPaint);
 8001ac0:	484e      	ldr	r0, [pc, #312]	; (8001bfc <LCD_1in28_test+0x184>)
 8001ac2:	f7fe fbcf 	bl	8000264 <Paint_SetDisplayFuntion>

  printf("Paint_Clear\r\n");
 8001ac6:	484e      	ldr	r0, [pc, #312]	; (8001c00 <LCD_1in28_test+0x188>)
 8001ac8:	f002 f8fe 	bl	8003cc8 <puts>
  Paint_Clear(BLACK);
 8001acc:	2000      	movs	r0, #0
 8001ace:	f7fe fc87 	bl	80003e0 <Paint_Clear>
//  DEV_Delay_ms(1000);
	
 printf("drawing...\r\n");
 8001ad2:	484c      	ldr	r0, [pc, #304]	; (8001c04 <LCD_1in28_test+0x18c>)
 8001ad4:	f002 f8f8 	bl	8003cc8 <puts>
  Paint_DrawCircle(120,120, 120, BLUE ,DOT_PIXEL_2X2,DRAW_FILL_EMPTY);
 8001ad8:	2300      	movs	r3, #0
 8001ada:	9301      	str	r3, [sp, #4]
 8001adc:	2302      	movs	r3, #2
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	231f      	movs	r3, #31
 8001ae2:	2278      	movs	r2, #120	; 0x78
 8001ae4:	2178      	movs	r1, #120	; 0x78
 8001ae6:	2078      	movs	r0, #120	; 0x78
 8001ae8:	f7fe fdd6 	bl	8000698 <Paint_DrawCircle>
  Paint_DrawLine  (120, 0, 120, 12,GREEN ,DOT_PIXEL_4X4,LINE_STYLE_SOLID);
 8001aec:	2300      	movs	r3, #0
 8001aee:	9302      	str	r3, [sp, #8]
 8001af0:	2304      	movs	r3, #4
 8001af2:	9301      	str	r3, [sp, #4]
 8001af4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	230c      	movs	r3, #12
 8001afc:	2278      	movs	r2, #120	; 0x78
 8001afe:	2100      	movs	r1, #0
 8001b00:	2078      	movs	r0, #120	; 0x78
 8001b02:	f7fe fd19 	bl	8000538 <Paint_DrawLine>
  Paint_DrawLine  (120, 228, 120, 240,GREEN ,DOT_PIXEL_4X4,LINE_STYLE_SOLID);
 8001b06:	2300      	movs	r3, #0
 8001b08:	9302      	str	r3, [sp, #8]
 8001b0a:	2304      	movs	r3, #4
 8001b0c:	9301      	str	r3, [sp, #4]
 8001b0e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	23f0      	movs	r3, #240	; 0xf0
 8001b16:	2278      	movs	r2, #120	; 0x78
 8001b18:	21e4      	movs	r1, #228	; 0xe4
 8001b1a:	2078      	movs	r0, #120	; 0x78
 8001b1c:	f7fe fd0c 	bl	8000538 <Paint_DrawLine>
  Paint_DrawLine  (0, 120, 12, 120,GREEN ,DOT_PIXEL_4X4,LINE_STYLE_SOLID);
 8001b20:	2300      	movs	r3, #0
 8001b22:	9302      	str	r3, [sp, #8]
 8001b24:	2304      	movs	r3, #4
 8001b26:	9301      	str	r3, [sp, #4]
 8001b28:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	2378      	movs	r3, #120	; 0x78
 8001b30:	220c      	movs	r2, #12
 8001b32:	2178      	movs	r1, #120	; 0x78
 8001b34:	2000      	movs	r0, #0
 8001b36:	f7fe fcff 	bl	8000538 <Paint_DrawLine>
  Paint_DrawLine  (228, 120, 240, 120,GREEN ,DOT_PIXEL_4X4,LINE_STYLE_SOLID);
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	9302      	str	r3, [sp, #8]
 8001b3e:	2304      	movs	r3, #4
 8001b40:	9301      	str	r3, [sp, #4]
 8001b42:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	2378      	movs	r3, #120	; 0x78
 8001b4a:	22f0      	movs	r2, #240	; 0xf0
 8001b4c:	2178      	movs	r1, #120	; 0x78
 8001b4e:	20e4      	movs	r0, #228	; 0xe4
 8001b50:	f7fe fcf2 	bl	8000538 <Paint_DrawLine>
	
  Paint_DrawImage(gImage_70X70, 85, 25, 70, 70); 
 8001b54:	2346      	movs	r3, #70	; 0x46
 8001b56:	9300      	str	r3, [sp, #0]
 8001b58:	2346      	movs	r3, #70	; 0x46
 8001b5a:	2219      	movs	r2, #25
 8001b5c:	2155      	movs	r1, #85	; 0x55
 8001b5e:	482a      	ldr	r0, [pc, #168]	; (8001c08 <LCD_1in28_test+0x190>)
 8001b60:	f7ff f82c 	bl	8000bbc <Paint_DrawImage>
//  Paint_DrawString_CN(56,140, "΢ѩ����",   &Font24CN,BLACK,  WHITE);
  Paint_DrawString_EN(30,140, "Hello",   &Font16,BLACK,  WHITE);
 8001b64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b68:	9301      	str	r3, [sp, #4]
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	9300      	str	r3, [sp, #0]
 8001b6e:	4b27      	ldr	r3, [pc, #156]	; (8001c0c <LCD_1in28_test+0x194>)
 8001b70:	4a27      	ldr	r2, [pc, #156]	; (8001c10 <LCD_1in28_test+0x198>)
 8001b72:	218c      	movs	r1, #140	; 0x8c
 8001b74:	201e      	movs	r0, #30
 8001b76:	f7fe ffc9 	bl	8000b0c <Paint_DrawString_EN>
  Paint_DrawString_EN(123, 123, "World",&Font16,  BLACK, GREEN);
 8001b7a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001b7e:	9301      	str	r3, [sp, #4]
 8001b80:	2300      	movs	r3, #0
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	4b21      	ldr	r3, [pc, #132]	; (8001c0c <LCD_1in28_test+0x194>)
 8001b86:	4a23      	ldr	r2, [pc, #140]	; (8001c14 <LCD_1in28_test+0x19c>)
 8001b88:	217b      	movs	r1, #123	; 0x7b
 8001b8a:	207b      	movs	r0, #123	; 0x7b
 8001b8c:	f7fe ffbe 	bl	8000b0c <Paint_DrawString_EN>
	
	Paint_DrawLine  (120, 120, 70, 70,YELLOW ,DOT_PIXEL_3X3,LINE_STYLE_SOLID);
 8001b90:	2300      	movs	r3, #0
 8001b92:	9302      	str	r3, [sp, #8]
 8001b94:	2303      	movs	r3, #3
 8001b96:	9301      	str	r3, [sp, #4]
 8001b98:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	2346      	movs	r3, #70	; 0x46
 8001ba0:	2246      	movs	r2, #70	; 0x46
 8001ba2:	2178      	movs	r1, #120	; 0x78
 8001ba4:	2078      	movs	r0, #120	; 0x78
 8001ba6:	f7fe fcc7 	bl	8000538 <Paint_DrawLine>
	Paint_DrawLine  (120, 120, 176, 64,BLUE ,DOT_PIXEL_3X3,LINE_STYLE_SOLID);
 8001baa:	2300      	movs	r3, #0
 8001bac:	9302      	str	r3, [sp, #8]
 8001bae:	2303      	movs	r3, #3
 8001bb0:	9301      	str	r3, [sp, #4]
 8001bb2:	231f      	movs	r3, #31
 8001bb4:	9300      	str	r3, [sp, #0]
 8001bb6:	2340      	movs	r3, #64	; 0x40
 8001bb8:	22b0      	movs	r2, #176	; 0xb0
 8001bba:	2178      	movs	r1, #120	; 0x78
 8001bbc:	2078      	movs	r0, #120	; 0x78
 8001bbe:	f7fe fcbb 	bl	8000538 <Paint_DrawLine>
	Paint_DrawLine  (120, 120, 120, 210,RED ,DOT_PIXEL_2X2,LINE_STYLE_SOLID);
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	9302      	str	r3, [sp, #8]
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	9301      	str	r3, [sp, #4]
 8001bca:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	23d2      	movs	r3, #210	; 0xd2
 8001bd2:	2278      	movs	r2, #120	; 0x78
 8001bd4:	2178      	movs	r1, #120	; 0x78
 8001bd6:	2078      	movs	r0, #120	; 0x78
 8001bd8:	f7fe fcae 	bl	8000538 <Paint_DrawLine>
	
	printf("quit...\r\n");
 8001bdc:	480e      	ldr	r0, [pc, #56]	; (8001c18 <LCD_1in28_test+0x1a0>)
 8001bde:	f002 f873 	bl	8003cc8 <puts>
	//DEV_Module_Exit();
  
}
 8001be2:	bf00      	nop
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	08004b60 	.word	0x08004b60
 8001bec:	08004b78 	.word	0x08004b78
 8001bf0:	08004b98 	.word	0x08004b98
 8001bf4:	08004ba8 	.word	0x08004ba8
 8001bf8:	080012f5 	.word	0x080012f5
 8001bfc:	08001361 	.word	0x08001361
 8001c00:	08004bc8 	.word	0x08004bc8
 8001c04:	08004bd8 	.word	0x08004bd8
 8001c08:	080057f8 	.word	0x080057f8
 8001c0c:	20000000 	.word	0x20000000
 8001c10:	08004be4 	.word	0x08004be4
 8001c14:	08004bec 	.word	0x08004bec
 8001c18:	08004bf4 	.word	0x08004bf4

08001c1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c20:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <HAL_Init+0x28>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a07      	ldr	r2, [pc, #28]	; (8001c44 <HAL_Init+0x28>)
 8001c26:	f043 0310 	orr.w	r3, r3, #16
 8001c2a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c2c:	2003      	movs	r0, #3
 8001c2e:	f000 f92b 	bl	8001e88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c32:	200f      	movs	r0, #15
 8001c34:	f000 f808 	bl	8001c48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c38:	f7ff fce0 	bl	80015fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40022000 	.word	0x40022000

08001c48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c50:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <HAL_InitTick+0x54>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <HAL_InitTick+0x58>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c66:	4618      	mov	r0, r3
 8001c68:	f000 f935 	bl	8001ed6 <HAL_SYSTICK_Config>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e00e      	b.n	8001c94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b0f      	cmp	r3, #15
 8001c7a:	d80a      	bhi.n	8001c92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	f04f 30ff 	mov.w	r0, #4294967295
 8001c84:	f000 f90b 	bl	8001e9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c88:	4a06      	ldr	r2, [pc, #24]	; (8001ca4 <HAL_InitTick+0x5c>)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	e000      	b.n	8001c94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20000008 	.word	0x20000008
 8001ca0:	20000010 	.word	0x20000010
 8001ca4:	2000000c 	.word	0x2000000c

08001ca8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cac:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <HAL_IncTick+0x1c>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <HAL_IncTick+0x20>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	4a03      	ldr	r2, [pc, #12]	; (8001cc8 <HAL_IncTick+0x20>)
 8001cba:	6013      	str	r3, [r2, #0]
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr
 8001cc4:	20000010 	.word	0x20000010
 8001cc8:	200001a0 	.word	0x200001a0

08001ccc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  return uwTick;
 8001cd0:	4b02      	ldr	r3, [pc, #8]	; (8001cdc <HAL_GetTick+0x10>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr
 8001cdc:	200001a0 	.word	0x200001a0

08001ce0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ce8:	f7ff fff0 	bl	8001ccc <HAL_GetTick>
 8001cec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf8:	d005      	beq.n	8001d06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cfa:	4b0a      	ldr	r3, [pc, #40]	; (8001d24 <HAL_Delay+0x44>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4413      	add	r3, r2
 8001d04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d06:	bf00      	nop
 8001d08:	f7ff ffe0 	bl	8001ccc <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d8f7      	bhi.n	8001d08 <HAL_Delay+0x28>
  {
  }
}
 8001d18:	bf00      	nop
 8001d1a:	bf00      	nop
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	20000010 	.word	0x20000010

08001d28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d38:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <__NVIC_SetPriorityGrouping+0x44>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d3e:	68ba      	ldr	r2, [r7, #8]
 8001d40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d44:	4013      	ands	r3, r2
 8001d46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d5a:	4a04      	ldr	r2, [pc, #16]	; (8001d6c <__NVIC_SetPriorityGrouping+0x44>)
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	60d3      	str	r3, [r2, #12]
}
 8001d60:	bf00      	nop
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bc80      	pop	{r7}
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d74:	4b04      	ldr	r3, [pc, #16]	; (8001d88 <__NVIC_GetPriorityGrouping+0x18>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	0a1b      	lsrs	r3, r3, #8
 8001d7a:	f003 0307 	and.w	r3, r3, #7
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bc80      	pop	{r7}
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	6039      	str	r1, [r7, #0]
 8001d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	db0a      	blt.n	8001db6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	490c      	ldr	r1, [pc, #48]	; (8001dd8 <__NVIC_SetPriority+0x4c>)
 8001da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001daa:	0112      	lsls	r2, r2, #4
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	440b      	add	r3, r1
 8001db0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001db4:	e00a      	b.n	8001dcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	4908      	ldr	r1, [pc, #32]	; (8001ddc <__NVIC_SetPriority+0x50>)
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	3b04      	subs	r3, #4
 8001dc4:	0112      	lsls	r2, r2, #4
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	440b      	add	r3, r1
 8001dca:	761a      	strb	r2, [r3, #24]
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc80      	pop	{r7}
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	e000e100 	.word	0xe000e100
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b089      	sub	sp, #36	; 0x24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f1c3 0307 	rsb	r3, r3, #7
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	bf28      	it	cs
 8001dfe:	2304      	movcs	r3, #4
 8001e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3304      	adds	r3, #4
 8001e06:	2b06      	cmp	r3, #6
 8001e08:	d902      	bls.n	8001e10 <NVIC_EncodePriority+0x30>
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	3b03      	subs	r3, #3
 8001e0e:	e000      	b.n	8001e12 <NVIC_EncodePriority+0x32>
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e14:	f04f 32ff 	mov.w	r2, #4294967295
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43da      	mvns	r2, r3
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	401a      	ands	r2, r3
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e28:	f04f 31ff 	mov.w	r1, #4294967295
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e32:	43d9      	mvns	r1, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e38:	4313      	orrs	r3, r2
         );
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3724      	adds	r7, #36	; 0x24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr

08001e44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e54:	d301      	bcc.n	8001e5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e56:	2301      	movs	r3, #1
 8001e58:	e00f      	b.n	8001e7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e5a:	4a0a      	ldr	r2, [pc, #40]	; (8001e84 <SysTick_Config+0x40>)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e62:	210f      	movs	r1, #15
 8001e64:	f04f 30ff 	mov.w	r0, #4294967295
 8001e68:	f7ff ff90 	bl	8001d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e6c:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <SysTick_Config+0x40>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e72:	4b04      	ldr	r3, [pc, #16]	; (8001e84 <SysTick_Config+0x40>)
 8001e74:	2207      	movs	r2, #7
 8001e76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	e000e010 	.word	0xe000e010

08001e88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f7ff ff49 	bl	8001d28 <__NVIC_SetPriorityGrouping>
}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b086      	sub	sp, #24
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	60b9      	str	r1, [r7, #8]
 8001ea8:	607a      	str	r2, [r7, #4]
 8001eaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001eac:	2300      	movs	r3, #0
 8001eae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eb0:	f7ff ff5e 	bl	8001d70 <__NVIC_GetPriorityGrouping>
 8001eb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	68b9      	ldr	r1, [r7, #8]
 8001eba:	6978      	ldr	r0, [r7, #20]
 8001ebc:	f7ff ff90 	bl	8001de0 <NVIC_EncodePriority>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ec6:	4611      	mov	r1, r2
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff ff5f 	bl	8001d8c <__NVIC_SetPriority>
}
 8001ece:	bf00      	nop
 8001ed0:	3718      	adds	r7, #24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b082      	sub	sp, #8
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7ff ffb0 	bl	8001e44 <SysTick_Config>
 8001ee4:	4603      	mov	r3, r0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
	...

08001ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b08b      	sub	sp, #44	; 0x2c
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001efa:	2300      	movs	r3, #0
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001efe:	2300      	movs	r3, #0
 8001f00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f02:	e169      	b.n	80021d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f04:	2201      	movs	r2, #1
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	69fa      	ldr	r2, [r7, #28]
 8001f14:	4013      	ands	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	f040 8158 	bne.w	80021d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	4a9a      	ldr	r2, [pc, #616]	; (8002190 <HAL_GPIO_Init+0x2a0>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d05e      	beq.n	8001fea <HAL_GPIO_Init+0xfa>
 8001f2c:	4a98      	ldr	r2, [pc, #608]	; (8002190 <HAL_GPIO_Init+0x2a0>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d875      	bhi.n	800201e <HAL_GPIO_Init+0x12e>
 8001f32:	4a98      	ldr	r2, [pc, #608]	; (8002194 <HAL_GPIO_Init+0x2a4>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d058      	beq.n	8001fea <HAL_GPIO_Init+0xfa>
 8001f38:	4a96      	ldr	r2, [pc, #600]	; (8002194 <HAL_GPIO_Init+0x2a4>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d86f      	bhi.n	800201e <HAL_GPIO_Init+0x12e>
 8001f3e:	4a96      	ldr	r2, [pc, #600]	; (8002198 <HAL_GPIO_Init+0x2a8>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d052      	beq.n	8001fea <HAL_GPIO_Init+0xfa>
 8001f44:	4a94      	ldr	r2, [pc, #592]	; (8002198 <HAL_GPIO_Init+0x2a8>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d869      	bhi.n	800201e <HAL_GPIO_Init+0x12e>
 8001f4a:	4a94      	ldr	r2, [pc, #592]	; (800219c <HAL_GPIO_Init+0x2ac>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d04c      	beq.n	8001fea <HAL_GPIO_Init+0xfa>
 8001f50:	4a92      	ldr	r2, [pc, #584]	; (800219c <HAL_GPIO_Init+0x2ac>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d863      	bhi.n	800201e <HAL_GPIO_Init+0x12e>
 8001f56:	4a92      	ldr	r2, [pc, #584]	; (80021a0 <HAL_GPIO_Init+0x2b0>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d046      	beq.n	8001fea <HAL_GPIO_Init+0xfa>
 8001f5c:	4a90      	ldr	r2, [pc, #576]	; (80021a0 <HAL_GPIO_Init+0x2b0>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d85d      	bhi.n	800201e <HAL_GPIO_Init+0x12e>
 8001f62:	2b12      	cmp	r3, #18
 8001f64:	d82a      	bhi.n	8001fbc <HAL_GPIO_Init+0xcc>
 8001f66:	2b12      	cmp	r3, #18
 8001f68:	d859      	bhi.n	800201e <HAL_GPIO_Init+0x12e>
 8001f6a:	a201      	add	r2, pc, #4	; (adr r2, 8001f70 <HAL_GPIO_Init+0x80>)
 8001f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f70:	08001feb 	.word	0x08001feb
 8001f74:	08001fc5 	.word	0x08001fc5
 8001f78:	08001fd7 	.word	0x08001fd7
 8001f7c:	08002019 	.word	0x08002019
 8001f80:	0800201f 	.word	0x0800201f
 8001f84:	0800201f 	.word	0x0800201f
 8001f88:	0800201f 	.word	0x0800201f
 8001f8c:	0800201f 	.word	0x0800201f
 8001f90:	0800201f 	.word	0x0800201f
 8001f94:	0800201f 	.word	0x0800201f
 8001f98:	0800201f 	.word	0x0800201f
 8001f9c:	0800201f 	.word	0x0800201f
 8001fa0:	0800201f 	.word	0x0800201f
 8001fa4:	0800201f 	.word	0x0800201f
 8001fa8:	0800201f 	.word	0x0800201f
 8001fac:	0800201f 	.word	0x0800201f
 8001fb0:	0800201f 	.word	0x0800201f
 8001fb4:	08001fcd 	.word	0x08001fcd
 8001fb8:	08001fe1 	.word	0x08001fe1
 8001fbc:	4a79      	ldr	r2, [pc, #484]	; (80021a4 <HAL_GPIO_Init+0x2b4>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d013      	beq.n	8001fea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001fc2:	e02c      	b.n	800201e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	623b      	str	r3, [r7, #32]
          break;
 8001fca:	e029      	b.n	8002020 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	623b      	str	r3, [r7, #32]
          break;
 8001fd4:	e024      	b.n	8002020 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	3308      	adds	r3, #8
 8001fdc:	623b      	str	r3, [r7, #32]
          break;
 8001fde:	e01f      	b.n	8002020 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	330c      	adds	r3, #12
 8001fe6:	623b      	str	r3, [r7, #32]
          break;
 8001fe8:	e01a      	b.n	8002020 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d102      	bne.n	8001ff8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ff2:	2304      	movs	r3, #4
 8001ff4:	623b      	str	r3, [r7, #32]
          break;
 8001ff6:	e013      	b.n	8002020 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d105      	bne.n	800200c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002000:	2308      	movs	r3, #8
 8002002:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	69fa      	ldr	r2, [r7, #28]
 8002008:	611a      	str	r2, [r3, #16]
          break;
 800200a:	e009      	b.n	8002020 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800200c:	2308      	movs	r3, #8
 800200e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	69fa      	ldr	r2, [r7, #28]
 8002014:	615a      	str	r2, [r3, #20]
          break;
 8002016:	e003      	b.n	8002020 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002018:	2300      	movs	r3, #0
 800201a:	623b      	str	r3, [r7, #32]
          break;
 800201c:	e000      	b.n	8002020 <HAL_GPIO_Init+0x130>
          break;
 800201e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	2bff      	cmp	r3, #255	; 0xff
 8002024:	d801      	bhi.n	800202a <HAL_GPIO_Init+0x13a>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	e001      	b.n	800202e <HAL_GPIO_Init+0x13e>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	3304      	adds	r3, #4
 800202e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	2bff      	cmp	r3, #255	; 0xff
 8002034:	d802      	bhi.n	800203c <HAL_GPIO_Init+0x14c>
 8002036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	e002      	b.n	8002042 <HAL_GPIO_Init+0x152>
 800203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203e:	3b08      	subs	r3, #8
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	210f      	movs	r1, #15
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	fa01 f303 	lsl.w	r3, r1, r3
 8002050:	43db      	mvns	r3, r3
 8002052:	401a      	ands	r2, r3
 8002054:	6a39      	ldr	r1, [r7, #32]
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	fa01 f303 	lsl.w	r3, r1, r3
 800205c:	431a      	orrs	r2, r3
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206a:	2b00      	cmp	r3, #0
 800206c:	f000 80b1 	beq.w	80021d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002070:	4b4d      	ldr	r3, [pc, #308]	; (80021a8 <HAL_GPIO_Init+0x2b8>)
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	4a4c      	ldr	r2, [pc, #304]	; (80021a8 <HAL_GPIO_Init+0x2b8>)
 8002076:	f043 0301 	orr.w	r3, r3, #1
 800207a:	6193      	str	r3, [r2, #24]
 800207c:	4b4a      	ldr	r3, [pc, #296]	; (80021a8 <HAL_GPIO_Init+0x2b8>)
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	60bb      	str	r3, [r7, #8]
 8002086:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002088:	4a48      	ldr	r2, [pc, #288]	; (80021ac <HAL_GPIO_Init+0x2bc>)
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	089b      	lsrs	r3, r3, #2
 800208e:	3302      	adds	r3, #2
 8002090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002094:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	f003 0303 	and.w	r3, r3, #3
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	220f      	movs	r2, #15
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	43db      	mvns	r3, r3
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	4013      	ands	r3, r2
 80020aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a40      	ldr	r2, [pc, #256]	; (80021b0 <HAL_GPIO_Init+0x2c0>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d013      	beq.n	80020dc <HAL_GPIO_Init+0x1ec>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a3f      	ldr	r2, [pc, #252]	; (80021b4 <HAL_GPIO_Init+0x2c4>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d00d      	beq.n	80020d8 <HAL_GPIO_Init+0x1e8>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a3e      	ldr	r2, [pc, #248]	; (80021b8 <HAL_GPIO_Init+0x2c8>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d007      	beq.n	80020d4 <HAL_GPIO_Init+0x1e4>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a3d      	ldr	r2, [pc, #244]	; (80021bc <HAL_GPIO_Init+0x2cc>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d101      	bne.n	80020d0 <HAL_GPIO_Init+0x1e0>
 80020cc:	2303      	movs	r3, #3
 80020ce:	e006      	b.n	80020de <HAL_GPIO_Init+0x1ee>
 80020d0:	2304      	movs	r3, #4
 80020d2:	e004      	b.n	80020de <HAL_GPIO_Init+0x1ee>
 80020d4:	2302      	movs	r3, #2
 80020d6:	e002      	b.n	80020de <HAL_GPIO_Init+0x1ee>
 80020d8:	2301      	movs	r3, #1
 80020da:	e000      	b.n	80020de <HAL_GPIO_Init+0x1ee>
 80020dc:	2300      	movs	r3, #0
 80020de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020e0:	f002 0203 	and.w	r2, r2, #3
 80020e4:	0092      	lsls	r2, r2, #2
 80020e6:	4093      	lsls	r3, r2
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020ee:	492f      	ldr	r1, [pc, #188]	; (80021ac <HAL_GPIO_Init+0x2bc>)
 80020f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f2:	089b      	lsrs	r3, r3, #2
 80020f4:	3302      	adds	r3, #2
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d006      	beq.n	8002116 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002108:	4b2d      	ldr	r3, [pc, #180]	; (80021c0 <HAL_GPIO_Init+0x2d0>)
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	492c      	ldr	r1, [pc, #176]	; (80021c0 <HAL_GPIO_Init+0x2d0>)
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	4313      	orrs	r3, r2
 8002112:	608b      	str	r3, [r1, #8]
 8002114:	e006      	b.n	8002124 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002116:	4b2a      	ldr	r3, [pc, #168]	; (80021c0 <HAL_GPIO_Init+0x2d0>)
 8002118:	689a      	ldr	r2, [r3, #8]
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	43db      	mvns	r3, r3
 800211e:	4928      	ldr	r1, [pc, #160]	; (80021c0 <HAL_GPIO_Init+0x2d0>)
 8002120:	4013      	ands	r3, r2
 8002122:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d006      	beq.n	800213e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002130:	4b23      	ldr	r3, [pc, #140]	; (80021c0 <HAL_GPIO_Init+0x2d0>)
 8002132:	68da      	ldr	r2, [r3, #12]
 8002134:	4922      	ldr	r1, [pc, #136]	; (80021c0 <HAL_GPIO_Init+0x2d0>)
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	4313      	orrs	r3, r2
 800213a:	60cb      	str	r3, [r1, #12]
 800213c:	e006      	b.n	800214c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800213e:	4b20      	ldr	r3, [pc, #128]	; (80021c0 <HAL_GPIO_Init+0x2d0>)
 8002140:	68da      	ldr	r2, [r3, #12]
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	43db      	mvns	r3, r3
 8002146:	491e      	ldr	r1, [pc, #120]	; (80021c0 <HAL_GPIO_Init+0x2d0>)
 8002148:	4013      	ands	r3, r2
 800214a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d006      	beq.n	8002166 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002158:	4b19      	ldr	r3, [pc, #100]	; (80021c0 <HAL_GPIO_Init+0x2d0>)
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	4918      	ldr	r1, [pc, #96]	; (80021c0 <HAL_GPIO_Init+0x2d0>)
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	4313      	orrs	r3, r2
 8002162:	604b      	str	r3, [r1, #4]
 8002164:	e006      	b.n	8002174 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002166:	4b16      	ldr	r3, [pc, #88]	; (80021c0 <HAL_GPIO_Init+0x2d0>)
 8002168:	685a      	ldr	r2, [r3, #4]
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	43db      	mvns	r3, r3
 800216e:	4914      	ldr	r1, [pc, #80]	; (80021c0 <HAL_GPIO_Init+0x2d0>)
 8002170:	4013      	ands	r3, r2
 8002172:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d021      	beq.n	80021c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002180:	4b0f      	ldr	r3, [pc, #60]	; (80021c0 <HAL_GPIO_Init+0x2d0>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	490e      	ldr	r1, [pc, #56]	; (80021c0 <HAL_GPIO_Init+0x2d0>)
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	4313      	orrs	r3, r2
 800218a:	600b      	str	r3, [r1, #0]
 800218c:	e021      	b.n	80021d2 <HAL_GPIO_Init+0x2e2>
 800218e:	bf00      	nop
 8002190:	10320000 	.word	0x10320000
 8002194:	10310000 	.word	0x10310000
 8002198:	10220000 	.word	0x10220000
 800219c:	10210000 	.word	0x10210000
 80021a0:	10120000 	.word	0x10120000
 80021a4:	10110000 	.word	0x10110000
 80021a8:	40021000 	.word	0x40021000
 80021ac:	40010000 	.word	0x40010000
 80021b0:	40010800 	.word	0x40010800
 80021b4:	40010c00 	.word	0x40010c00
 80021b8:	40011000 	.word	0x40011000
 80021bc:	40011400 	.word	0x40011400
 80021c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021c4:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <HAL_GPIO_Init+0x304>)
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	43db      	mvns	r3, r3
 80021cc:	4909      	ldr	r1, [pc, #36]	; (80021f4 <HAL_GPIO_Init+0x304>)
 80021ce:	4013      	ands	r3, r2
 80021d0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	3301      	adds	r3, #1
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	fa22 f303 	lsr.w	r3, r2, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f47f ae8e 	bne.w	8001f04 <HAL_GPIO_Init+0x14>
  }
}
 80021e8:	bf00      	nop
 80021ea:	bf00      	nop
 80021ec:	372c      	adds	r7, #44	; 0x2c
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr
 80021f4:	40010400 	.word	0x40010400

080021f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	460b      	mov	r3, r1
 8002202:	807b      	strh	r3, [r7, #2]
 8002204:	4613      	mov	r3, r2
 8002206:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002208:	787b      	ldrb	r3, [r7, #1]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800220e:	887a      	ldrh	r2, [r7, #2]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002214:	e003      	b.n	800221e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002216:	887b      	ldrh	r3, [r7, #2]
 8002218:	041a      	lsls	r2, r3, #16
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	611a      	str	r2, [r3, #16]
}
 800221e:	bf00      	nop
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr

08002228 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e272      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 8087 	beq.w	8002356 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002248:	4b92      	ldr	r3, [pc, #584]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 030c 	and.w	r3, r3, #12
 8002250:	2b04      	cmp	r3, #4
 8002252:	d00c      	beq.n	800226e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002254:	4b8f      	ldr	r3, [pc, #572]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 030c 	and.w	r3, r3, #12
 800225c:	2b08      	cmp	r3, #8
 800225e:	d112      	bne.n	8002286 <HAL_RCC_OscConfig+0x5e>
 8002260:	4b8c      	ldr	r3, [pc, #560]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800226c:	d10b      	bne.n	8002286 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800226e:	4b89      	ldr	r3, [pc, #548]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d06c      	beq.n	8002354 <HAL_RCC_OscConfig+0x12c>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d168      	bne.n	8002354 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e24c      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800228e:	d106      	bne.n	800229e <HAL_RCC_OscConfig+0x76>
 8002290:	4b80      	ldr	r3, [pc, #512]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a7f      	ldr	r2, [pc, #508]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002296:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800229a:	6013      	str	r3, [r2, #0]
 800229c:	e02e      	b.n	80022fc <HAL_RCC_OscConfig+0xd4>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d10c      	bne.n	80022c0 <HAL_RCC_OscConfig+0x98>
 80022a6:	4b7b      	ldr	r3, [pc, #492]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a7a      	ldr	r2, [pc, #488]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	4b78      	ldr	r3, [pc, #480]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a77      	ldr	r2, [pc, #476]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	e01d      	b.n	80022fc <HAL_RCC_OscConfig+0xd4>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022c8:	d10c      	bne.n	80022e4 <HAL_RCC_OscConfig+0xbc>
 80022ca:	4b72      	ldr	r3, [pc, #456]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a71      	ldr	r2, [pc, #452]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	4b6f      	ldr	r3, [pc, #444]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a6e      	ldr	r2, [pc, #440]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e0:	6013      	str	r3, [r2, #0]
 80022e2:	e00b      	b.n	80022fc <HAL_RCC_OscConfig+0xd4>
 80022e4:	4b6b      	ldr	r3, [pc, #428]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a6a      	ldr	r2, [pc, #424]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ee:	6013      	str	r3, [r2, #0]
 80022f0:	4b68      	ldr	r3, [pc, #416]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a67      	ldr	r2, [pc, #412]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d013      	beq.n	800232c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002304:	f7ff fce2 	bl	8001ccc <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800230c:	f7ff fcde 	bl	8001ccc <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b64      	cmp	r3, #100	; 0x64
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e200      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800231e:	4b5d      	ldr	r3, [pc, #372]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d0f0      	beq.n	800230c <HAL_RCC_OscConfig+0xe4>
 800232a:	e014      	b.n	8002356 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232c:	f7ff fcce 	bl	8001ccc <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002334:	f7ff fcca 	bl	8001ccc <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b64      	cmp	r3, #100	; 0x64
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e1ec      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002346:	4b53      	ldr	r3, [pc, #332]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1f0      	bne.n	8002334 <HAL_RCC_OscConfig+0x10c>
 8002352:	e000      	b.n	8002356 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002354:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d063      	beq.n	800242a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002362:	4b4c      	ldr	r3, [pc, #304]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f003 030c 	and.w	r3, r3, #12
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00b      	beq.n	8002386 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800236e:	4b49      	ldr	r3, [pc, #292]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f003 030c 	and.w	r3, r3, #12
 8002376:	2b08      	cmp	r3, #8
 8002378:	d11c      	bne.n	80023b4 <HAL_RCC_OscConfig+0x18c>
 800237a:	4b46      	ldr	r3, [pc, #280]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d116      	bne.n	80023b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002386:	4b43      	ldr	r3, [pc, #268]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d005      	beq.n	800239e <HAL_RCC_OscConfig+0x176>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d001      	beq.n	800239e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e1c0      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800239e:	4b3d      	ldr	r3, [pc, #244]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	4939      	ldr	r1, [pc, #228]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023b2:	e03a      	b.n	800242a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d020      	beq.n	80023fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023bc:	4b36      	ldr	r3, [pc, #216]	; (8002498 <HAL_RCC_OscConfig+0x270>)
 80023be:	2201      	movs	r2, #1
 80023c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c2:	f7ff fc83 	bl	8001ccc <HAL_GetTick>
 80023c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c8:	e008      	b.n	80023dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ca:	f7ff fc7f 	bl	8001ccc <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d901      	bls.n	80023dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e1a1      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023dc:	4b2d      	ldr	r3, [pc, #180]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0f0      	beq.n	80023ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e8:	4b2a      	ldr	r3, [pc, #168]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	4927      	ldr	r1, [pc, #156]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	600b      	str	r3, [r1, #0]
 80023fc:	e015      	b.n	800242a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023fe:	4b26      	ldr	r3, [pc, #152]	; (8002498 <HAL_RCC_OscConfig+0x270>)
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002404:	f7ff fc62 	bl	8001ccc <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800240c:	f7ff fc5e 	bl	8001ccc <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e180      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800241e:	4b1d      	ldr	r3, [pc, #116]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f0      	bne.n	800240c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0308 	and.w	r3, r3, #8
 8002432:	2b00      	cmp	r3, #0
 8002434:	d03a      	beq.n	80024ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d019      	beq.n	8002472 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800243e:	4b17      	ldr	r3, [pc, #92]	; (800249c <HAL_RCC_OscConfig+0x274>)
 8002440:	2201      	movs	r2, #1
 8002442:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002444:	f7ff fc42 	bl	8001ccc <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800244c:	f7ff fc3e 	bl	8001ccc <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e160      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800245e:	4b0d      	ldr	r3, [pc, #52]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d0f0      	beq.n	800244c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800246a:	2001      	movs	r0, #1
 800246c:	f000 face 	bl	8002a0c <RCC_Delay>
 8002470:	e01c      	b.n	80024ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002472:	4b0a      	ldr	r3, [pc, #40]	; (800249c <HAL_RCC_OscConfig+0x274>)
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002478:	f7ff fc28 	bl	8001ccc <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800247e:	e00f      	b.n	80024a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002480:	f7ff fc24 	bl	8001ccc <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d908      	bls.n	80024a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e146      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
 8002492:	bf00      	nop
 8002494:	40021000 	.word	0x40021000
 8002498:	42420000 	.word	0x42420000
 800249c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a0:	4b92      	ldr	r3, [pc, #584]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1e9      	bne.n	8002480 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f000 80a6 	beq.w	8002606 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ba:	2300      	movs	r3, #0
 80024bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024be:	4b8b      	ldr	r3, [pc, #556]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10d      	bne.n	80024e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ca:	4b88      	ldr	r3, [pc, #544]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	4a87      	ldr	r2, [pc, #540]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 80024d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d4:	61d3      	str	r3, [r2, #28]
 80024d6:	4b85      	ldr	r3, [pc, #532]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024de:	60bb      	str	r3, [r7, #8]
 80024e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024e2:	2301      	movs	r3, #1
 80024e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e6:	4b82      	ldr	r3, [pc, #520]	; (80026f0 <HAL_RCC_OscConfig+0x4c8>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d118      	bne.n	8002524 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024f2:	4b7f      	ldr	r3, [pc, #508]	; (80026f0 <HAL_RCC_OscConfig+0x4c8>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a7e      	ldr	r2, [pc, #504]	; (80026f0 <HAL_RCC_OscConfig+0x4c8>)
 80024f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024fe:	f7ff fbe5 	bl	8001ccc <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002504:	e008      	b.n	8002518 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002506:	f7ff fbe1 	bl	8001ccc <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b64      	cmp	r3, #100	; 0x64
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e103      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002518:	4b75      	ldr	r3, [pc, #468]	; (80026f0 <HAL_RCC_OscConfig+0x4c8>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0f0      	beq.n	8002506 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d106      	bne.n	800253a <HAL_RCC_OscConfig+0x312>
 800252c:	4b6f      	ldr	r3, [pc, #444]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	4a6e      	ldr	r2, [pc, #440]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002532:	f043 0301 	orr.w	r3, r3, #1
 8002536:	6213      	str	r3, [r2, #32]
 8002538:	e02d      	b.n	8002596 <HAL_RCC_OscConfig+0x36e>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10c      	bne.n	800255c <HAL_RCC_OscConfig+0x334>
 8002542:	4b6a      	ldr	r3, [pc, #424]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	4a69      	ldr	r2, [pc, #420]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002548:	f023 0301 	bic.w	r3, r3, #1
 800254c:	6213      	str	r3, [r2, #32]
 800254e:	4b67      	ldr	r3, [pc, #412]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	4a66      	ldr	r2, [pc, #408]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002554:	f023 0304 	bic.w	r3, r3, #4
 8002558:	6213      	str	r3, [r2, #32]
 800255a:	e01c      	b.n	8002596 <HAL_RCC_OscConfig+0x36e>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	2b05      	cmp	r3, #5
 8002562:	d10c      	bne.n	800257e <HAL_RCC_OscConfig+0x356>
 8002564:	4b61      	ldr	r3, [pc, #388]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	4a60      	ldr	r2, [pc, #384]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 800256a:	f043 0304 	orr.w	r3, r3, #4
 800256e:	6213      	str	r3, [r2, #32]
 8002570:	4b5e      	ldr	r3, [pc, #376]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	4a5d      	ldr	r2, [pc, #372]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002576:	f043 0301 	orr.w	r3, r3, #1
 800257a:	6213      	str	r3, [r2, #32]
 800257c:	e00b      	b.n	8002596 <HAL_RCC_OscConfig+0x36e>
 800257e:	4b5b      	ldr	r3, [pc, #364]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	4a5a      	ldr	r2, [pc, #360]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002584:	f023 0301 	bic.w	r3, r3, #1
 8002588:	6213      	str	r3, [r2, #32]
 800258a:	4b58      	ldr	r3, [pc, #352]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	4a57      	ldr	r2, [pc, #348]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002590:	f023 0304 	bic.w	r3, r3, #4
 8002594:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d015      	beq.n	80025ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259e:	f7ff fb95 	bl	8001ccc <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a4:	e00a      	b.n	80025bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a6:	f7ff fb91 	bl	8001ccc <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e0b1      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025bc:	4b4b      	ldr	r3, [pc, #300]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0ee      	beq.n	80025a6 <HAL_RCC_OscConfig+0x37e>
 80025c8:	e014      	b.n	80025f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ca:	f7ff fb7f 	bl	8001ccc <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d0:	e00a      	b.n	80025e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025d2:	f7ff fb7b 	bl	8001ccc <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e09b      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025e8:	4b40      	ldr	r3, [pc, #256]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 80025ea:	6a1b      	ldr	r3, [r3, #32]
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1ee      	bne.n	80025d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025f4:	7dfb      	ldrb	r3, [r7, #23]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d105      	bne.n	8002606 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025fa:	4b3c      	ldr	r3, [pc, #240]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	4a3b      	ldr	r2, [pc, #236]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002600:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002604:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	2b00      	cmp	r3, #0
 800260c:	f000 8087 	beq.w	800271e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002610:	4b36      	ldr	r3, [pc, #216]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f003 030c 	and.w	r3, r3, #12
 8002618:	2b08      	cmp	r3, #8
 800261a:	d061      	beq.n	80026e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	69db      	ldr	r3, [r3, #28]
 8002620:	2b02      	cmp	r3, #2
 8002622:	d146      	bne.n	80026b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002624:	4b33      	ldr	r3, [pc, #204]	; (80026f4 <HAL_RCC_OscConfig+0x4cc>)
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262a:	f7ff fb4f 	bl	8001ccc <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002632:	f7ff fb4b 	bl	8001ccc <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e06d      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002644:	4b29      	ldr	r3, [pc, #164]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1f0      	bne.n	8002632 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a1b      	ldr	r3, [r3, #32]
 8002654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002658:	d108      	bne.n	800266c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800265a:	4b24      	ldr	r3, [pc, #144]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	4921      	ldr	r1, [pc, #132]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002668:	4313      	orrs	r3, r2
 800266a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800266c:	4b1f      	ldr	r3, [pc, #124]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a19      	ldr	r1, [r3, #32]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	430b      	orrs	r3, r1
 800267e:	491b      	ldr	r1, [pc, #108]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002680:	4313      	orrs	r3, r2
 8002682:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002684:	4b1b      	ldr	r3, [pc, #108]	; (80026f4 <HAL_RCC_OscConfig+0x4cc>)
 8002686:	2201      	movs	r2, #1
 8002688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268a:	f7ff fb1f 	bl	8001ccc <HAL_GetTick>
 800268e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002690:	e008      	b.n	80026a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002692:	f7ff fb1b 	bl	8001ccc <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e03d      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026a4:	4b11      	ldr	r3, [pc, #68]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d0f0      	beq.n	8002692 <HAL_RCC_OscConfig+0x46a>
 80026b0:	e035      	b.n	800271e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b2:	4b10      	ldr	r3, [pc, #64]	; (80026f4 <HAL_RCC_OscConfig+0x4cc>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b8:	f7ff fb08 	bl	8001ccc <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c0:	f7ff fb04 	bl	8001ccc <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e026      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026d2:	4b06      	ldr	r3, [pc, #24]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1f0      	bne.n	80026c0 <HAL_RCC_OscConfig+0x498>
 80026de:	e01e      	b.n	800271e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	69db      	ldr	r3, [r3, #28]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d107      	bne.n	80026f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e019      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
 80026ec:	40021000 	.word	0x40021000
 80026f0:	40007000 	.word	0x40007000
 80026f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026f8:	4b0b      	ldr	r3, [pc, #44]	; (8002728 <HAL_RCC_OscConfig+0x500>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	429a      	cmp	r2, r3
 800270a:	d106      	bne.n	800271a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002716:	429a      	cmp	r2, r3
 8002718:	d001      	beq.n	800271e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e000      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40021000 	.word	0x40021000

0800272c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e0d0      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002740:	4b6a      	ldr	r3, [pc, #424]	; (80028ec <HAL_RCC_ClockConfig+0x1c0>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0307 	and.w	r3, r3, #7
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	429a      	cmp	r2, r3
 800274c:	d910      	bls.n	8002770 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274e:	4b67      	ldr	r3, [pc, #412]	; (80028ec <HAL_RCC_ClockConfig+0x1c0>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f023 0207 	bic.w	r2, r3, #7
 8002756:	4965      	ldr	r1, [pc, #404]	; (80028ec <HAL_RCC_ClockConfig+0x1c0>)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	4313      	orrs	r3, r2
 800275c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800275e:	4b63      	ldr	r3, [pc, #396]	; (80028ec <HAL_RCC_ClockConfig+0x1c0>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	429a      	cmp	r2, r3
 800276a:	d001      	beq.n	8002770 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e0b8      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d020      	beq.n	80027be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b00      	cmp	r3, #0
 8002786:	d005      	beq.n	8002794 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002788:	4b59      	ldr	r3, [pc, #356]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	4a58      	ldr	r2, [pc, #352]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 800278e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002792:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0308 	and.w	r3, r3, #8
 800279c:	2b00      	cmp	r3, #0
 800279e:	d005      	beq.n	80027ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027a0:	4b53      	ldr	r3, [pc, #332]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	4a52      	ldr	r2, [pc, #328]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 80027a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027ac:	4b50      	ldr	r3, [pc, #320]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	494d      	ldr	r1, [pc, #308]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d040      	beq.n	800284c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d107      	bne.n	80027e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d2:	4b47      	ldr	r3, [pc, #284]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d115      	bne.n	800280a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e07f      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d107      	bne.n	80027fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ea:	4b41      	ldr	r3, [pc, #260]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d109      	bne.n	800280a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e073      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fa:	4b3d      	ldr	r3, [pc, #244]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e06b      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800280a:	4b39      	ldr	r3, [pc, #228]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f023 0203 	bic.w	r2, r3, #3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	4936      	ldr	r1, [pc, #216]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002818:	4313      	orrs	r3, r2
 800281a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800281c:	f7ff fa56 	bl	8001ccc <HAL_GetTick>
 8002820:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002822:	e00a      	b.n	800283a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002824:	f7ff fa52 	bl	8001ccc <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002832:	4293      	cmp	r3, r2
 8002834:	d901      	bls.n	800283a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e053      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800283a:	4b2d      	ldr	r3, [pc, #180]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f003 020c 	and.w	r2, r3, #12
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	429a      	cmp	r2, r3
 800284a:	d1eb      	bne.n	8002824 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800284c:	4b27      	ldr	r3, [pc, #156]	; (80028ec <HAL_RCC_ClockConfig+0x1c0>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	429a      	cmp	r2, r3
 8002858:	d210      	bcs.n	800287c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800285a:	4b24      	ldr	r3, [pc, #144]	; (80028ec <HAL_RCC_ClockConfig+0x1c0>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f023 0207 	bic.w	r2, r3, #7
 8002862:	4922      	ldr	r1, [pc, #136]	; (80028ec <HAL_RCC_ClockConfig+0x1c0>)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	4313      	orrs	r3, r2
 8002868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800286a:	4b20      	ldr	r3, [pc, #128]	; (80028ec <HAL_RCC_ClockConfig+0x1c0>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	429a      	cmp	r2, r3
 8002876:	d001      	beq.n	800287c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e032      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	2b00      	cmp	r3, #0
 8002886:	d008      	beq.n	800289a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002888:	4b19      	ldr	r3, [pc, #100]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	4916      	ldr	r1, [pc, #88]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002896:	4313      	orrs	r3, r2
 8002898:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0308 	and.w	r3, r3, #8
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d009      	beq.n	80028ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028a6:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	490e      	ldr	r1, [pc, #56]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028ba:	f000 f821 	bl	8002900 <HAL_RCC_GetSysClockFreq>
 80028be:	4602      	mov	r2, r0
 80028c0:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	091b      	lsrs	r3, r3, #4
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	490a      	ldr	r1, [pc, #40]	; (80028f4 <HAL_RCC_ClockConfig+0x1c8>)
 80028cc:	5ccb      	ldrb	r3, [r1, r3]
 80028ce:	fa22 f303 	lsr.w	r3, r2, r3
 80028d2:	4a09      	ldr	r2, [pc, #36]	; (80028f8 <HAL_RCC_ClockConfig+0x1cc>)
 80028d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028d6:	4b09      	ldr	r3, [pc, #36]	; (80028fc <HAL_RCC_ClockConfig+0x1d0>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f7ff f9b4 	bl	8001c48 <HAL_InitTick>

  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	40022000 	.word	0x40022000
 80028f0:	40021000 	.word	0x40021000
 80028f4:	080057e0 	.word	0x080057e0
 80028f8:	20000008 	.word	0x20000008
 80028fc:	2000000c 	.word	0x2000000c

08002900 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002900:	b480      	push	{r7}
 8002902:	b087      	sub	sp, #28
 8002904:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002906:	2300      	movs	r3, #0
 8002908:	60fb      	str	r3, [r7, #12]
 800290a:	2300      	movs	r3, #0
 800290c:	60bb      	str	r3, [r7, #8]
 800290e:	2300      	movs	r3, #0
 8002910:	617b      	str	r3, [r7, #20]
 8002912:	2300      	movs	r3, #0
 8002914:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002916:	2300      	movs	r3, #0
 8002918:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800291a:	4b1e      	ldr	r3, [pc, #120]	; (8002994 <HAL_RCC_GetSysClockFreq+0x94>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f003 030c 	and.w	r3, r3, #12
 8002926:	2b04      	cmp	r3, #4
 8002928:	d002      	beq.n	8002930 <HAL_RCC_GetSysClockFreq+0x30>
 800292a:	2b08      	cmp	r3, #8
 800292c:	d003      	beq.n	8002936 <HAL_RCC_GetSysClockFreq+0x36>
 800292e:	e027      	b.n	8002980 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002930:	4b19      	ldr	r3, [pc, #100]	; (8002998 <HAL_RCC_GetSysClockFreq+0x98>)
 8002932:	613b      	str	r3, [r7, #16]
      break;
 8002934:	e027      	b.n	8002986 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	0c9b      	lsrs	r3, r3, #18
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	4a17      	ldr	r2, [pc, #92]	; (800299c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002940:	5cd3      	ldrb	r3, [r2, r3]
 8002942:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d010      	beq.n	8002970 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800294e:	4b11      	ldr	r3, [pc, #68]	; (8002994 <HAL_RCC_GetSysClockFreq+0x94>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	0c5b      	lsrs	r3, r3, #17
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	4a11      	ldr	r2, [pc, #68]	; (80029a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800295a:	5cd3      	ldrb	r3, [r2, r3]
 800295c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a0d      	ldr	r2, [pc, #52]	; (8002998 <HAL_RCC_GetSysClockFreq+0x98>)
 8002962:	fb03 f202 	mul.w	r2, r3, r2
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	fbb2 f3f3 	udiv	r3, r2, r3
 800296c:	617b      	str	r3, [r7, #20]
 800296e:	e004      	b.n	800297a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a0c      	ldr	r2, [pc, #48]	; (80029a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002974:	fb02 f303 	mul.w	r3, r2, r3
 8002978:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	613b      	str	r3, [r7, #16]
      break;
 800297e:	e002      	b.n	8002986 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002980:	4b05      	ldr	r3, [pc, #20]	; (8002998 <HAL_RCC_GetSysClockFreq+0x98>)
 8002982:	613b      	str	r3, [r7, #16]
      break;
 8002984:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002986:	693b      	ldr	r3, [r7, #16]
}
 8002988:	4618      	mov	r0, r3
 800298a:	371c      	adds	r7, #28
 800298c:	46bd      	mov	sp, r7
 800298e:	bc80      	pop	{r7}
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	40021000 	.word	0x40021000
 8002998:	007a1200 	.word	0x007a1200
 800299c:	08007e40 	.word	0x08007e40
 80029a0:	08007e50 	.word	0x08007e50
 80029a4:	003d0900 	.word	0x003d0900

080029a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029ac:	4b02      	ldr	r3, [pc, #8]	; (80029b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80029ae:	681b      	ldr	r3, [r3, #0]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bc80      	pop	{r7}
 80029b6:	4770      	bx	lr
 80029b8:	20000008 	.word	0x20000008

080029bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029c0:	f7ff fff2 	bl	80029a8 <HAL_RCC_GetHCLKFreq>
 80029c4:	4602      	mov	r2, r0
 80029c6:	4b05      	ldr	r3, [pc, #20]	; (80029dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	0a1b      	lsrs	r3, r3, #8
 80029cc:	f003 0307 	and.w	r3, r3, #7
 80029d0:	4903      	ldr	r1, [pc, #12]	; (80029e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029d2:	5ccb      	ldrb	r3, [r1, r3]
 80029d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029d8:	4618      	mov	r0, r3
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40021000 	.word	0x40021000
 80029e0:	080057f0 	.word	0x080057f0

080029e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029e8:	f7ff ffde 	bl	80029a8 <HAL_RCC_GetHCLKFreq>
 80029ec:	4602      	mov	r2, r0
 80029ee:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	0adb      	lsrs	r3, r3, #11
 80029f4:	f003 0307 	and.w	r3, r3, #7
 80029f8:	4903      	ldr	r1, [pc, #12]	; (8002a08 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029fa:	5ccb      	ldrb	r3, [r1, r3]
 80029fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40021000 	.word	0x40021000
 8002a08:	080057f0 	.word	0x080057f0

08002a0c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a14:	4b0a      	ldr	r3, [pc, #40]	; (8002a40 <RCC_Delay+0x34>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a0a      	ldr	r2, [pc, #40]	; (8002a44 <RCC_Delay+0x38>)
 8002a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1e:	0a5b      	lsrs	r3, r3, #9
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	fb02 f303 	mul.w	r3, r2, r3
 8002a26:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a28:	bf00      	nop
  }
  while (Delay --);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	1e5a      	subs	r2, r3, #1
 8002a2e:	60fa      	str	r2, [r7, #12]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1f9      	bne.n	8002a28 <RCC_Delay+0x1c>
}
 8002a34:	bf00      	nop
 8002a36:	bf00      	nop
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr
 8002a40:	20000008 	.word	0x20000008
 8002a44:	10624dd3 	.word	0x10624dd3

08002a48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e076      	b.n	8002b48 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d108      	bne.n	8002a74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a6a:	d009      	beq.n	8002a80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	61da      	str	r2, [r3, #28]
 8002a72:	e005      	b.n	8002a80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d106      	bne.n	8002aa0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f7fe fd64 	bl	8001568 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ab6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002ac8:	431a      	orrs	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	431a      	orrs	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002af0:	431a      	orrs	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b04:	ea42 0103 	orr.w	r1, r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	430a      	orrs	r2, r1
 8002b16:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	0c1a      	lsrs	r2, r3, #16
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f002 0204 	and.w	r2, r2, #4
 8002b26:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	69da      	ldr	r2, [r3, #28]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b36:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3708      	adds	r7, #8
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b088      	sub	sp, #32
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	603b      	str	r3, [r7, #0]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b60:	2300      	movs	r3, #0
 8002b62:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d101      	bne.n	8002b72 <HAL_SPI_Transmit+0x22>
 8002b6e:	2302      	movs	r3, #2
 8002b70:	e12d      	b.n	8002dce <HAL_SPI_Transmit+0x27e>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b7a:	f7ff f8a7 	bl	8001ccc <HAL_GetTick>
 8002b7e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002b80:	88fb      	ldrh	r3, [r7, #6]
 8002b82:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d002      	beq.n	8002b96 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002b90:	2302      	movs	r3, #2
 8002b92:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b94:	e116      	b.n	8002dc4 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d002      	beq.n	8002ba2 <HAL_SPI_Transmit+0x52>
 8002b9c:	88fb      	ldrh	r3, [r7, #6]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d102      	bne.n	8002ba8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ba6:	e10d      	b.n	8002dc4 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2203      	movs	r2, #3
 8002bac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	68ba      	ldr	r2, [r7, #8]
 8002bba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	88fa      	ldrh	r2, [r7, #6]
 8002bc0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	88fa      	ldrh	r2, [r7, #6]
 8002bc6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bee:	d10f      	bne.n	8002c10 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bfe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c0e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1a:	2b40      	cmp	r3, #64	; 0x40
 8002c1c:	d007      	beq.n	8002c2e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c2c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c36:	d14f      	bne.n	8002cd8 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d002      	beq.n	8002c46 <HAL_SPI_Transmit+0xf6>
 8002c40:	8afb      	ldrh	r3, [r7, #22]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d142      	bne.n	8002ccc <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	881a      	ldrh	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c56:	1c9a      	adds	r2, r3, #2
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	3b01      	subs	r3, #1
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002c6a:	e02f      	b.n	8002ccc <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d112      	bne.n	8002ca0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	881a      	ldrh	r2, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8a:	1c9a      	adds	r2, r3, #2
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	3b01      	subs	r3, #1
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	86da      	strh	r2, [r3, #54]	; 0x36
 8002c9e:	e015      	b.n	8002ccc <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ca0:	f7ff f814 	bl	8001ccc <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d803      	bhi.n	8002cb8 <HAL_SPI_Transmit+0x168>
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb6:	d102      	bne.n	8002cbe <HAL_SPI_Transmit+0x16e>
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d106      	bne.n	8002ccc <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002cca:	e07b      	b.n	8002dc4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1ca      	bne.n	8002c6c <HAL_SPI_Transmit+0x11c>
 8002cd6:	e050      	b.n	8002d7a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d002      	beq.n	8002ce6 <HAL_SPI_Transmit+0x196>
 8002ce0:	8afb      	ldrh	r3, [r7, #22]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d144      	bne.n	8002d70 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	330c      	adds	r3, #12
 8002cf0:	7812      	ldrb	r2, [r2, #0]
 8002cf2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf8:	1c5a      	adds	r2, r3, #1
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	3b01      	subs	r3, #1
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002d0c:	e030      	b.n	8002d70 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d113      	bne.n	8002d44 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	330c      	adds	r3, #12
 8002d26:	7812      	ldrb	r2, [r2, #0]
 8002d28:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2e:	1c5a      	adds	r2, r3, #1
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d42:	e015      	b.n	8002d70 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d44:	f7fe ffc2 	bl	8001ccc <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d803      	bhi.n	8002d5c <HAL_SPI_Transmit+0x20c>
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d5a:	d102      	bne.n	8002d62 <HAL_SPI_Transmit+0x212>
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d106      	bne.n	8002d70 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002d6e:	e029      	b.n	8002dc4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1c9      	bne.n	8002d0e <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	6839      	ldr	r1, [r7, #0]
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 f8b2 	bl	8002ee8 <SPI_EndRxTxTransaction>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d002      	beq.n	8002d90 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2220      	movs	r2, #32
 8002d8e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10a      	bne.n	8002dae <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d98:	2300      	movs	r3, #0
 8002d9a:	613b      	str	r3, [r7, #16]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	613b      	str	r3, [r7, #16]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	613b      	str	r3, [r7, #16]
 8002dac:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d002      	beq.n	8002dbc <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	77fb      	strb	r3, [r7, #31]
 8002dba:	e003      	b.n	8002dc4 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002dcc:	7ffb      	ldrb	r3, [r7, #31]
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3720      	adds	r7, #32
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
	...

08002dd8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b088      	sub	sp, #32
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	603b      	str	r3, [r7, #0]
 8002de4:	4613      	mov	r3, r2
 8002de6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002de8:	f7fe ff70 	bl	8001ccc <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df0:	1a9b      	subs	r3, r3, r2
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	4413      	add	r3, r2
 8002df6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002df8:	f7fe ff68 	bl	8001ccc <HAL_GetTick>
 8002dfc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002dfe:	4b39      	ldr	r3, [pc, #228]	; (8002ee4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	015b      	lsls	r3, r3, #5
 8002e04:	0d1b      	lsrs	r3, r3, #20
 8002e06:	69fa      	ldr	r2, [r7, #28]
 8002e08:	fb02 f303 	mul.w	r3, r2, r3
 8002e0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e0e:	e054      	b.n	8002eba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e16:	d050      	beq.n	8002eba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e18:	f7fe ff58 	bl	8001ccc <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	69fa      	ldr	r2, [r7, #28]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d902      	bls.n	8002e2e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d13d      	bne.n	8002eaa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e46:	d111      	bne.n	8002e6c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e50:	d004      	beq.n	8002e5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e5a:	d107      	bne.n	8002e6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e74:	d10f      	bne.n	8002e96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e84:	601a      	str	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e017      	b.n	8002eda <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d101      	bne.n	8002eb4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	68ba      	ldr	r2, [r7, #8]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	bf0c      	ite	eq
 8002eca:	2301      	moveq	r3, #1
 8002ecc:	2300      	movne	r3, #0
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	79fb      	ldrb	r3, [r7, #7]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d19b      	bne.n	8002e10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3720      	adds	r7, #32
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	20000008 	.word	0x20000008

08002ee8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af02      	add	r7, sp, #8
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	2200      	movs	r2, #0
 8002efc:	2180      	movs	r1, #128	; 0x80
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f7ff ff6a 	bl	8002dd8 <SPI_WaitFlagStateUntilTimeout>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d007      	beq.n	8002f1a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0e:	f043 0220 	orr.w	r2, r3, #32
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e000      	b.n	8002f1c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3710      	adds	r7, #16
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e041      	b.n	8002fba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d106      	bne.n	8002f50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f7fe fcae 	bl	80018ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2202      	movs	r2, #2
 8002f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	3304      	adds	r3, #4
 8002f60:	4619      	mov	r1, r3
 8002f62:	4610      	mov	r0, r2
 8002f64:	f000 f992 	bl	800328c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
	...

08002fc4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d109      	bne.n	8002fe8 <HAL_TIM_PWM_Start+0x24>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	bf14      	ite	ne
 8002fe0:	2301      	movne	r3, #1
 8002fe2:	2300      	moveq	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	e022      	b.n	800302e <HAL_TIM_PWM_Start+0x6a>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	2b04      	cmp	r3, #4
 8002fec:	d109      	bne.n	8003002 <HAL_TIM_PWM_Start+0x3e>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	bf14      	ite	ne
 8002ffa:	2301      	movne	r3, #1
 8002ffc:	2300      	moveq	r3, #0
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	e015      	b.n	800302e <HAL_TIM_PWM_Start+0x6a>
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	2b08      	cmp	r3, #8
 8003006:	d109      	bne.n	800301c <HAL_TIM_PWM_Start+0x58>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b01      	cmp	r3, #1
 8003012:	bf14      	ite	ne
 8003014:	2301      	movne	r3, #1
 8003016:	2300      	moveq	r3, #0
 8003018:	b2db      	uxtb	r3, r3
 800301a:	e008      	b.n	800302e <HAL_TIM_PWM_Start+0x6a>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2b01      	cmp	r3, #1
 8003026:	bf14      	ite	ne
 8003028:	2301      	movne	r3, #1
 800302a:	2300      	moveq	r3, #0
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e05e      	b.n	80030f4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d104      	bne.n	8003046 <HAL_TIM_PWM_Start+0x82>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2202      	movs	r2, #2
 8003040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003044:	e013      	b.n	800306e <HAL_TIM_PWM_Start+0xaa>
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	2b04      	cmp	r3, #4
 800304a:	d104      	bne.n	8003056 <HAL_TIM_PWM_Start+0x92>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2202      	movs	r2, #2
 8003050:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003054:	e00b      	b.n	800306e <HAL_TIM_PWM_Start+0xaa>
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	2b08      	cmp	r3, #8
 800305a:	d104      	bne.n	8003066 <HAL_TIM_PWM_Start+0xa2>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2202      	movs	r2, #2
 8003060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003064:	e003      	b.n	800306e <HAL_TIM_PWM_Start+0xaa>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2202      	movs	r2, #2
 800306a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2201      	movs	r2, #1
 8003074:	6839      	ldr	r1, [r7, #0]
 8003076:	4618      	mov	r0, r3
 8003078:	f000 faf2 	bl	8003660 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a1e      	ldr	r2, [pc, #120]	; (80030fc <HAL_TIM_PWM_Start+0x138>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d107      	bne.n	8003096 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003094:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a18      	ldr	r2, [pc, #96]	; (80030fc <HAL_TIM_PWM_Start+0x138>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d00e      	beq.n	80030be <HAL_TIM_PWM_Start+0xfa>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030a8:	d009      	beq.n	80030be <HAL_TIM_PWM_Start+0xfa>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a14      	ldr	r2, [pc, #80]	; (8003100 <HAL_TIM_PWM_Start+0x13c>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d004      	beq.n	80030be <HAL_TIM_PWM_Start+0xfa>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a12      	ldr	r2, [pc, #72]	; (8003104 <HAL_TIM_PWM_Start+0x140>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d111      	bne.n	80030e2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2b06      	cmp	r3, #6
 80030ce:	d010      	beq.n	80030f2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 0201 	orr.w	r2, r2, #1
 80030de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030e0:	e007      	b.n	80030f2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f042 0201 	orr.w	r2, r2, #1
 80030f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40012c00 	.word	0x40012c00
 8003100:	40000400 	.word	0x40000400
 8003104:	40000800 	.word	0x40000800

08003108 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003114:	2300      	movs	r3, #0
 8003116:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800311e:	2b01      	cmp	r3, #1
 8003120:	d101      	bne.n	8003126 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003122:	2302      	movs	r3, #2
 8003124:	e0ae      	b.n	8003284 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b0c      	cmp	r3, #12
 8003132:	f200 809f 	bhi.w	8003274 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003136:	a201      	add	r2, pc, #4	; (adr r2, 800313c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313c:	08003171 	.word	0x08003171
 8003140:	08003275 	.word	0x08003275
 8003144:	08003275 	.word	0x08003275
 8003148:	08003275 	.word	0x08003275
 800314c:	080031b1 	.word	0x080031b1
 8003150:	08003275 	.word	0x08003275
 8003154:	08003275 	.word	0x08003275
 8003158:	08003275 	.word	0x08003275
 800315c:	080031f3 	.word	0x080031f3
 8003160:	08003275 	.word	0x08003275
 8003164:	08003275 	.word	0x08003275
 8003168:	08003275 	.word	0x08003275
 800316c:	08003233 	.word	0x08003233
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68b9      	ldr	r1, [r7, #8]
 8003176:	4618      	mov	r0, r3
 8003178:	f000 f8ea 	bl	8003350 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	699a      	ldr	r2, [r3, #24]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f042 0208 	orr.w	r2, r2, #8
 800318a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	699a      	ldr	r2, [r3, #24]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 0204 	bic.w	r2, r2, #4
 800319a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6999      	ldr	r1, [r3, #24]
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	691a      	ldr	r2, [r3, #16]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	619a      	str	r2, [r3, #24]
      break;
 80031ae:	e064      	b.n	800327a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68b9      	ldr	r1, [r7, #8]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f000 f930 	bl	800341c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	699a      	ldr	r2, [r3, #24]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	699a      	ldr	r2, [r3, #24]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6999      	ldr	r1, [r3, #24]
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	021a      	lsls	r2, r3, #8
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	619a      	str	r2, [r3, #24]
      break;
 80031f0:	e043      	b.n	800327a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68b9      	ldr	r1, [r7, #8]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f000 f979 	bl	80034f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	69da      	ldr	r2, [r3, #28]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f042 0208 	orr.w	r2, r2, #8
 800320c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	69da      	ldr	r2, [r3, #28]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 0204 	bic.w	r2, r2, #4
 800321c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	69d9      	ldr	r1, [r3, #28]
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	691a      	ldr	r2, [r3, #16]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	61da      	str	r2, [r3, #28]
      break;
 8003230:	e023      	b.n	800327a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68b9      	ldr	r1, [r7, #8]
 8003238:	4618      	mov	r0, r3
 800323a:	f000 f9c3 	bl	80035c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	69da      	ldr	r2, [r3, #28]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800324c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	69da      	ldr	r2, [r3, #28]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800325c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	69d9      	ldr	r1, [r3, #28]
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	021a      	lsls	r2, r3, #8
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	61da      	str	r2, [r3, #28]
      break;
 8003272:	e002      	b.n	800327a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	75fb      	strb	r3, [r7, #23]
      break;
 8003278:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003282:	7dfb      	ldrb	r3, [r7, #23]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3718      	adds	r7, #24
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a29      	ldr	r2, [pc, #164]	; (8003344 <TIM_Base_SetConfig+0xb8>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d00b      	beq.n	80032bc <TIM_Base_SetConfig+0x30>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032aa:	d007      	beq.n	80032bc <TIM_Base_SetConfig+0x30>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a26      	ldr	r2, [pc, #152]	; (8003348 <TIM_Base_SetConfig+0xbc>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d003      	beq.n	80032bc <TIM_Base_SetConfig+0x30>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a25      	ldr	r2, [pc, #148]	; (800334c <TIM_Base_SetConfig+0xc0>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d108      	bne.n	80032ce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a1c      	ldr	r2, [pc, #112]	; (8003344 <TIM_Base_SetConfig+0xb8>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d00b      	beq.n	80032ee <TIM_Base_SetConfig+0x62>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032dc:	d007      	beq.n	80032ee <TIM_Base_SetConfig+0x62>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a19      	ldr	r2, [pc, #100]	; (8003348 <TIM_Base_SetConfig+0xbc>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d003      	beq.n	80032ee <TIM_Base_SetConfig+0x62>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a18      	ldr	r2, [pc, #96]	; (800334c <TIM_Base_SetConfig+0xc0>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d108      	bne.n	8003300 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	4313      	orrs	r3, r2
 800330c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a07      	ldr	r2, [pc, #28]	; (8003344 <TIM_Base_SetConfig+0xb8>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d103      	bne.n	8003334 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	691a      	ldr	r2, [r3, #16]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	615a      	str	r2, [r3, #20]
}
 800333a:	bf00      	nop
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	bc80      	pop	{r7}
 8003342:	4770      	bx	lr
 8003344:	40012c00 	.word	0x40012c00
 8003348:	40000400 	.word	0x40000400
 800334c:	40000800 	.word	0x40000800

08003350 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003350:	b480      	push	{r7}
 8003352:	b087      	sub	sp, #28
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	f023 0201 	bic.w	r2, r3, #1
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800337e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f023 0303 	bic.w	r3, r3, #3
 8003386:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	4313      	orrs	r3, r2
 8003390:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f023 0302 	bic.w	r3, r3, #2
 8003398:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a1c      	ldr	r2, [pc, #112]	; (8003418 <TIM_OC1_SetConfig+0xc8>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d10c      	bne.n	80033c6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	f023 0308 	bic.w	r3, r3, #8
 80033b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	f023 0304 	bic.w	r3, r3, #4
 80033c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a13      	ldr	r2, [pc, #76]	; (8003418 <TIM_OC1_SetConfig+0xc8>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d111      	bne.n	80033f2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	621a      	str	r2, [r3, #32]
}
 800340c:	bf00      	nop
 800340e:	371c      	adds	r7, #28
 8003410:	46bd      	mov	sp, r7
 8003412:	bc80      	pop	{r7}
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	40012c00 	.word	0x40012c00

0800341c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800341c:	b480      	push	{r7}
 800341e:	b087      	sub	sp, #28
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	f023 0210 	bic.w	r2, r3, #16
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800344a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003452:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	021b      	lsls	r3, r3, #8
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	4313      	orrs	r3, r2
 800345e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	f023 0320 	bic.w	r3, r3, #32
 8003466:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	011b      	lsls	r3, r3, #4
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	4313      	orrs	r3, r2
 8003472:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a1d      	ldr	r2, [pc, #116]	; (80034ec <TIM_OC2_SetConfig+0xd0>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d10d      	bne.n	8003498 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003482:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	011b      	lsls	r3, r3, #4
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	4313      	orrs	r3, r2
 800348e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003496:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a14      	ldr	r2, [pc, #80]	; (80034ec <TIM_OC2_SetConfig+0xd0>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d113      	bne.n	80034c8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	695b      	ldr	r3, [r3, #20]
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	621a      	str	r2, [r3, #32]
}
 80034e2:	bf00      	nop
 80034e4:	371c      	adds	r7, #28
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bc80      	pop	{r7}
 80034ea:	4770      	bx	lr
 80034ec:	40012c00 	.word	0x40012c00

080034f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b087      	sub	sp, #28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800351e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f023 0303 	bic.w	r3, r3, #3
 8003526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	4313      	orrs	r3, r2
 8003530:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003538:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	021b      	lsls	r3, r3, #8
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	4313      	orrs	r3, r2
 8003544:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a1d      	ldr	r2, [pc, #116]	; (80035c0 <TIM_OC3_SetConfig+0xd0>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d10d      	bne.n	800356a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003554:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	021b      	lsls	r3, r3, #8
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	4313      	orrs	r3, r2
 8003560:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003568:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a14      	ldr	r2, [pc, #80]	; (80035c0 <TIM_OC3_SetConfig+0xd0>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d113      	bne.n	800359a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003578:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003580:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	4313      	orrs	r3, r2
 800358c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	4313      	orrs	r3, r2
 8003598:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	621a      	str	r2, [r3, #32]
}
 80035b4:	bf00      	nop
 80035b6:	371c      	adds	r7, #28
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bc80      	pop	{r7}
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	40012c00 	.word	0x40012c00

080035c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b087      	sub	sp, #28
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	021b      	lsls	r3, r3, #8
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	4313      	orrs	r3, r2
 8003606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800360e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	031b      	lsls	r3, r3, #12
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	4313      	orrs	r3, r2
 800361a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a0f      	ldr	r2, [pc, #60]	; (800365c <TIM_OC4_SetConfig+0x98>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d109      	bne.n	8003638 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800362a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	019b      	lsls	r3, r3, #6
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	4313      	orrs	r3, r2
 8003636:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	621a      	str	r2, [r3, #32]
}
 8003652:	bf00      	nop
 8003654:	371c      	adds	r7, #28
 8003656:	46bd      	mov	sp, r7
 8003658:	bc80      	pop	{r7}
 800365a:	4770      	bx	lr
 800365c:	40012c00 	.word	0x40012c00

08003660 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003660:	b480      	push	{r7}
 8003662:	b087      	sub	sp, #28
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	f003 031f 	and.w	r3, r3, #31
 8003672:	2201      	movs	r2, #1
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6a1a      	ldr	r2, [r3, #32]
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	43db      	mvns	r3, r3
 8003682:	401a      	ands	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6a1a      	ldr	r2, [r3, #32]
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	f003 031f 	and.w	r3, r3, #31
 8003692:	6879      	ldr	r1, [r7, #4]
 8003694:	fa01 f303 	lsl.w	r3, r1, r3
 8003698:	431a      	orrs	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	621a      	str	r2, [r3, #32]
}
 800369e:	bf00      	nop
 80036a0:	371c      	adds	r7, #28
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bc80      	pop	{r7}
 80036a6:	4770      	bx	lr

080036a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d101      	bne.n	80036c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036bc:	2302      	movs	r3, #2
 80036be:	e046      	b.n	800374e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2202      	movs	r2, #2
 80036cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a16      	ldr	r2, [pc, #88]	; (8003758 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d00e      	beq.n	8003722 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800370c:	d009      	beq.n	8003722 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a12      	ldr	r2, [pc, #72]	; (800375c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d004      	beq.n	8003722 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a10      	ldr	r2, [pc, #64]	; (8003760 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d10c      	bne.n	800373c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003728:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	68ba      	ldr	r2, [r7, #8]
 8003730:	4313      	orrs	r3, r2
 8003732:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3714      	adds	r7, #20
 8003752:	46bd      	mov	sp, r7
 8003754:	bc80      	pop	{r7}
 8003756:	4770      	bx	lr
 8003758:	40012c00 	.word	0x40012c00
 800375c:	40000400 	.word	0x40000400
 8003760:	40000800 	.word	0x40000800

08003764 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e042      	b.n	80037fc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d106      	bne.n	8003790 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7fe f904 	bl	8001998 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2224      	movs	r2, #36	; 0x24
 8003794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68da      	ldr	r2, [r3, #12]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 f82b 	bl	8003804 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	691a      	ldr	r2, [r3, #16]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	695a      	ldr	r2, [r3, #20]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68da      	ldr	r2, [r3, #12]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2220      	movs	r2, #32
 80037e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2220      	movs	r2, #32
 80037f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3708      	adds	r7, #8
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68da      	ldr	r2, [r3, #12]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	430a      	orrs	r2, r1
 8003820:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	689a      	ldr	r2, [r3, #8]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	4313      	orrs	r3, r2
 8003832:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800383e:	f023 030c 	bic.w	r3, r3, #12
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	6812      	ldr	r2, [r2, #0]
 8003846:	68b9      	ldr	r1, [r7, #8]
 8003848:	430b      	orrs	r3, r1
 800384a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	699a      	ldr	r2, [r3, #24]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a2c      	ldr	r2, [pc, #176]	; (8003918 <UART_SetConfig+0x114>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d103      	bne.n	8003874 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800386c:	f7ff f8ba 	bl	80029e4 <HAL_RCC_GetPCLK2Freq>
 8003870:	60f8      	str	r0, [r7, #12]
 8003872:	e002      	b.n	800387a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003874:	f7ff f8a2 	bl	80029bc <HAL_RCC_GetPCLK1Freq>
 8003878:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	4613      	mov	r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	4413      	add	r3, r2
 8003882:	009a      	lsls	r2, r3, #2
 8003884:	441a      	add	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003890:	4a22      	ldr	r2, [pc, #136]	; (800391c <UART_SetConfig+0x118>)
 8003892:	fba2 2303 	umull	r2, r3, r2, r3
 8003896:	095b      	lsrs	r3, r3, #5
 8003898:	0119      	lsls	r1, r3, #4
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	4613      	mov	r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	4413      	add	r3, r2
 80038a2:	009a      	lsls	r2, r3, #2
 80038a4:	441a      	add	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80038b0:	4b1a      	ldr	r3, [pc, #104]	; (800391c <UART_SetConfig+0x118>)
 80038b2:	fba3 0302 	umull	r0, r3, r3, r2
 80038b6:	095b      	lsrs	r3, r3, #5
 80038b8:	2064      	movs	r0, #100	; 0x64
 80038ba:	fb00 f303 	mul.w	r3, r0, r3
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	011b      	lsls	r3, r3, #4
 80038c2:	3332      	adds	r3, #50	; 0x32
 80038c4:	4a15      	ldr	r2, [pc, #84]	; (800391c <UART_SetConfig+0x118>)
 80038c6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ca:	095b      	lsrs	r3, r3, #5
 80038cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038d0:	4419      	add	r1, r3
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	4613      	mov	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	4413      	add	r3, r2
 80038da:	009a      	lsls	r2, r3, #2
 80038dc:	441a      	add	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80038e8:	4b0c      	ldr	r3, [pc, #48]	; (800391c <UART_SetConfig+0x118>)
 80038ea:	fba3 0302 	umull	r0, r3, r3, r2
 80038ee:	095b      	lsrs	r3, r3, #5
 80038f0:	2064      	movs	r0, #100	; 0x64
 80038f2:	fb00 f303 	mul.w	r3, r0, r3
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	011b      	lsls	r3, r3, #4
 80038fa:	3332      	adds	r3, #50	; 0x32
 80038fc:	4a07      	ldr	r2, [pc, #28]	; (800391c <UART_SetConfig+0x118>)
 80038fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003902:	095b      	lsrs	r3, r3, #5
 8003904:	f003 020f 	and.w	r2, r3, #15
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	440a      	add	r2, r1
 800390e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003910:	bf00      	nop
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40013800 	.word	0x40013800
 800391c:	51eb851f 	.word	0x51eb851f

08003920 <sbrk_aligned>:
 8003920:	b570      	push	{r4, r5, r6, lr}
 8003922:	4e0e      	ldr	r6, [pc, #56]	; (800395c <sbrk_aligned+0x3c>)
 8003924:	460c      	mov	r4, r1
 8003926:	6831      	ldr	r1, [r6, #0]
 8003928:	4605      	mov	r5, r0
 800392a:	b911      	cbnz	r1, 8003932 <sbrk_aligned+0x12>
 800392c:	f000 fae8 	bl	8003f00 <_sbrk_r>
 8003930:	6030      	str	r0, [r6, #0]
 8003932:	4621      	mov	r1, r4
 8003934:	4628      	mov	r0, r5
 8003936:	f000 fae3 	bl	8003f00 <_sbrk_r>
 800393a:	1c43      	adds	r3, r0, #1
 800393c:	d00a      	beq.n	8003954 <sbrk_aligned+0x34>
 800393e:	1cc4      	adds	r4, r0, #3
 8003940:	f024 0403 	bic.w	r4, r4, #3
 8003944:	42a0      	cmp	r0, r4
 8003946:	d007      	beq.n	8003958 <sbrk_aligned+0x38>
 8003948:	1a21      	subs	r1, r4, r0
 800394a:	4628      	mov	r0, r5
 800394c:	f000 fad8 	bl	8003f00 <_sbrk_r>
 8003950:	3001      	adds	r0, #1
 8003952:	d101      	bne.n	8003958 <sbrk_aligned+0x38>
 8003954:	f04f 34ff 	mov.w	r4, #4294967295
 8003958:	4620      	mov	r0, r4
 800395a:	bd70      	pop	{r4, r5, r6, pc}
 800395c:	200001a8 	.word	0x200001a8

08003960 <_malloc_r>:
 8003960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003964:	1ccd      	adds	r5, r1, #3
 8003966:	f025 0503 	bic.w	r5, r5, #3
 800396a:	3508      	adds	r5, #8
 800396c:	2d0c      	cmp	r5, #12
 800396e:	bf38      	it	cc
 8003970:	250c      	movcc	r5, #12
 8003972:	2d00      	cmp	r5, #0
 8003974:	4607      	mov	r7, r0
 8003976:	db01      	blt.n	800397c <_malloc_r+0x1c>
 8003978:	42a9      	cmp	r1, r5
 800397a:	d905      	bls.n	8003988 <_malloc_r+0x28>
 800397c:	230c      	movs	r3, #12
 800397e:	2600      	movs	r6, #0
 8003980:	603b      	str	r3, [r7, #0]
 8003982:	4630      	mov	r0, r6
 8003984:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003988:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003a5c <_malloc_r+0xfc>
 800398c:	f000 f868 	bl	8003a60 <__malloc_lock>
 8003990:	f8d8 3000 	ldr.w	r3, [r8]
 8003994:	461c      	mov	r4, r3
 8003996:	bb5c      	cbnz	r4, 80039f0 <_malloc_r+0x90>
 8003998:	4629      	mov	r1, r5
 800399a:	4638      	mov	r0, r7
 800399c:	f7ff ffc0 	bl	8003920 <sbrk_aligned>
 80039a0:	1c43      	adds	r3, r0, #1
 80039a2:	4604      	mov	r4, r0
 80039a4:	d155      	bne.n	8003a52 <_malloc_r+0xf2>
 80039a6:	f8d8 4000 	ldr.w	r4, [r8]
 80039aa:	4626      	mov	r6, r4
 80039ac:	2e00      	cmp	r6, #0
 80039ae:	d145      	bne.n	8003a3c <_malloc_r+0xdc>
 80039b0:	2c00      	cmp	r4, #0
 80039b2:	d048      	beq.n	8003a46 <_malloc_r+0xe6>
 80039b4:	6823      	ldr	r3, [r4, #0]
 80039b6:	4631      	mov	r1, r6
 80039b8:	4638      	mov	r0, r7
 80039ba:	eb04 0903 	add.w	r9, r4, r3
 80039be:	f000 fa9f 	bl	8003f00 <_sbrk_r>
 80039c2:	4581      	cmp	r9, r0
 80039c4:	d13f      	bne.n	8003a46 <_malloc_r+0xe6>
 80039c6:	6821      	ldr	r1, [r4, #0]
 80039c8:	4638      	mov	r0, r7
 80039ca:	1a6d      	subs	r5, r5, r1
 80039cc:	4629      	mov	r1, r5
 80039ce:	f7ff ffa7 	bl	8003920 <sbrk_aligned>
 80039d2:	3001      	adds	r0, #1
 80039d4:	d037      	beq.n	8003a46 <_malloc_r+0xe6>
 80039d6:	6823      	ldr	r3, [r4, #0]
 80039d8:	442b      	add	r3, r5
 80039da:	6023      	str	r3, [r4, #0]
 80039dc:	f8d8 3000 	ldr.w	r3, [r8]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d038      	beq.n	8003a56 <_malloc_r+0xf6>
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	42a2      	cmp	r2, r4
 80039e8:	d12b      	bne.n	8003a42 <_malloc_r+0xe2>
 80039ea:	2200      	movs	r2, #0
 80039ec:	605a      	str	r2, [r3, #4]
 80039ee:	e00f      	b.n	8003a10 <_malloc_r+0xb0>
 80039f0:	6822      	ldr	r2, [r4, #0]
 80039f2:	1b52      	subs	r2, r2, r5
 80039f4:	d41f      	bmi.n	8003a36 <_malloc_r+0xd6>
 80039f6:	2a0b      	cmp	r2, #11
 80039f8:	d917      	bls.n	8003a2a <_malloc_r+0xca>
 80039fa:	1961      	adds	r1, r4, r5
 80039fc:	42a3      	cmp	r3, r4
 80039fe:	6025      	str	r5, [r4, #0]
 8003a00:	bf18      	it	ne
 8003a02:	6059      	strne	r1, [r3, #4]
 8003a04:	6863      	ldr	r3, [r4, #4]
 8003a06:	bf08      	it	eq
 8003a08:	f8c8 1000 	streq.w	r1, [r8]
 8003a0c:	5162      	str	r2, [r4, r5]
 8003a0e:	604b      	str	r3, [r1, #4]
 8003a10:	4638      	mov	r0, r7
 8003a12:	f104 060b 	add.w	r6, r4, #11
 8003a16:	f000 f829 	bl	8003a6c <__malloc_unlock>
 8003a1a:	f026 0607 	bic.w	r6, r6, #7
 8003a1e:	1d23      	adds	r3, r4, #4
 8003a20:	1af2      	subs	r2, r6, r3
 8003a22:	d0ae      	beq.n	8003982 <_malloc_r+0x22>
 8003a24:	1b9b      	subs	r3, r3, r6
 8003a26:	50a3      	str	r3, [r4, r2]
 8003a28:	e7ab      	b.n	8003982 <_malloc_r+0x22>
 8003a2a:	42a3      	cmp	r3, r4
 8003a2c:	6862      	ldr	r2, [r4, #4]
 8003a2e:	d1dd      	bne.n	80039ec <_malloc_r+0x8c>
 8003a30:	f8c8 2000 	str.w	r2, [r8]
 8003a34:	e7ec      	b.n	8003a10 <_malloc_r+0xb0>
 8003a36:	4623      	mov	r3, r4
 8003a38:	6864      	ldr	r4, [r4, #4]
 8003a3a:	e7ac      	b.n	8003996 <_malloc_r+0x36>
 8003a3c:	4634      	mov	r4, r6
 8003a3e:	6876      	ldr	r6, [r6, #4]
 8003a40:	e7b4      	b.n	80039ac <_malloc_r+0x4c>
 8003a42:	4613      	mov	r3, r2
 8003a44:	e7cc      	b.n	80039e0 <_malloc_r+0x80>
 8003a46:	230c      	movs	r3, #12
 8003a48:	4638      	mov	r0, r7
 8003a4a:	603b      	str	r3, [r7, #0]
 8003a4c:	f000 f80e 	bl	8003a6c <__malloc_unlock>
 8003a50:	e797      	b.n	8003982 <_malloc_r+0x22>
 8003a52:	6025      	str	r5, [r4, #0]
 8003a54:	e7dc      	b.n	8003a10 <_malloc_r+0xb0>
 8003a56:	605b      	str	r3, [r3, #4]
 8003a58:	deff      	udf	#255	; 0xff
 8003a5a:	bf00      	nop
 8003a5c:	200001a4 	.word	0x200001a4

08003a60 <__malloc_lock>:
 8003a60:	4801      	ldr	r0, [pc, #4]	; (8003a68 <__malloc_lock+0x8>)
 8003a62:	f000 ba9a 	b.w	8003f9a <__retarget_lock_acquire_recursive>
 8003a66:	bf00      	nop
 8003a68:	200002ec 	.word	0x200002ec

08003a6c <__malloc_unlock>:
 8003a6c:	4801      	ldr	r0, [pc, #4]	; (8003a74 <__malloc_unlock+0x8>)
 8003a6e:	f000 ba95 	b.w	8003f9c <__retarget_lock_release_recursive>
 8003a72:	bf00      	nop
 8003a74:	200002ec 	.word	0x200002ec

08003a78 <std>:
 8003a78:	2300      	movs	r3, #0
 8003a7a:	b510      	push	{r4, lr}
 8003a7c:	4604      	mov	r4, r0
 8003a7e:	e9c0 3300 	strd	r3, r3, [r0]
 8003a82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a86:	6083      	str	r3, [r0, #8]
 8003a88:	8181      	strh	r1, [r0, #12]
 8003a8a:	6643      	str	r3, [r0, #100]	; 0x64
 8003a8c:	81c2      	strh	r2, [r0, #14]
 8003a8e:	6183      	str	r3, [r0, #24]
 8003a90:	4619      	mov	r1, r3
 8003a92:	2208      	movs	r2, #8
 8003a94:	305c      	adds	r0, #92	; 0x5c
 8003a96:	f000 f9f7 	bl	8003e88 <memset>
 8003a9a:	4b0d      	ldr	r3, [pc, #52]	; (8003ad0 <std+0x58>)
 8003a9c:	6224      	str	r4, [r4, #32]
 8003a9e:	6263      	str	r3, [r4, #36]	; 0x24
 8003aa0:	4b0c      	ldr	r3, [pc, #48]	; (8003ad4 <std+0x5c>)
 8003aa2:	62a3      	str	r3, [r4, #40]	; 0x28
 8003aa4:	4b0c      	ldr	r3, [pc, #48]	; (8003ad8 <std+0x60>)
 8003aa6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003aa8:	4b0c      	ldr	r3, [pc, #48]	; (8003adc <std+0x64>)
 8003aaa:	6323      	str	r3, [r4, #48]	; 0x30
 8003aac:	4b0c      	ldr	r3, [pc, #48]	; (8003ae0 <std+0x68>)
 8003aae:	429c      	cmp	r4, r3
 8003ab0:	d006      	beq.n	8003ac0 <std+0x48>
 8003ab2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003ab6:	4294      	cmp	r4, r2
 8003ab8:	d002      	beq.n	8003ac0 <std+0x48>
 8003aba:	33d0      	adds	r3, #208	; 0xd0
 8003abc:	429c      	cmp	r4, r3
 8003abe:	d105      	bne.n	8003acc <std+0x54>
 8003ac0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ac8:	f000 ba66 	b.w	8003f98 <__retarget_lock_init_recursive>
 8003acc:	bd10      	pop	{r4, pc}
 8003ace:	bf00      	nop
 8003ad0:	08003cd9 	.word	0x08003cd9
 8003ad4:	08003cfb 	.word	0x08003cfb
 8003ad8:	08003d33 	.word	0x08003d33
 8003adc:	08003d57 	.word	0x08003d57
 8003ae0:	200001ac 	.word	0x200001ac

08003ae4 <stdio_exit_handler>:
 8003ae4:	4a02      	ldr	r2, [pc, #8]	; (8003af0 <stdio_exit_handler+0xc>)
 8003ae6:	4903      	ldr	r1, [pc, #12]	; (8003af4 <stdio_exit_handler+0x10>)
 8003ae8:	4803      	ldr	r0, [pc, #12]	; (8003af8 <stdio_exit_handler+0x14>)
 8003aea:	f000 b869 	b.w	8003bc0 <_fwalk_sglue>
 8003aee:	bf00      	nop
 8003af0:	20000014 	.word	0x20000014
 8003af4:	080046e1 	.word	0x080046e1
 8003af8:	20000020 	.word	0x20000020

08003afc <cleanup_stdio>:
 8003afc:	6841      	ldr	r1, [r0, #4]
 8003afe:	4b0c      	ldr	r3, [pc, #48]	; (8003b30 <cleanup_stdio+0x34>)
 8003b00:	b510      	push	{r4, lr}
 8003b02:	4299      	cmp	r1, r3
 8003b04:	4604      	mov	r4, r0
 8003b06:	d001      	beq.n	8003b0c <cleanup_stdio+0x10>
 8003b08:	f000 fdea 	bl	80046e0 <_fflush_r>
 8003b0c:	68a1      	ldr	r1, [r4, #8]
 8003b0e:	4b09      	ldr	r3, [pc, #36]	; (8003b34 <cleanup_stdio+0x38>)
 8003b10:	4299      	cmp	r1, r3
 8003b12:	d002      	beq.n	8003b1a <cleanup_stdio+0x1e>
 8003b14:	4620      	mov	r0, r4
 8003b16:	f000 fde3 	bl	80046e0 <_fflush_r>
 8003b1a:	68e1      	ldr	r1, [r4, #12]
 8003b1c:	4b06      	ldr	r3, [pc, #24]	; (8003b38 <cleanup_stdio+0x3c>)
 8003b1e:	4299      	cmp	r1, r3
 8003b20:	d004      	beq.n	8003b2c <cleanup_stdio+0x30>
 8003b22:	4620      	mov	r0, r4
 8003b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b28:	f000 bdda 	b.w	80046e0 <_fflush_r>
 8003b2c:	bd10      	pop	{r4, pc}
 8003b2e:	bf00      	nop
 8003b30:	200001ac 	.word	0x200001ac
 8003b34:	20000214 	.word	0x20000214
 8003b38:	2000027c 	.word	0x2000027c

08003b3c <global_stdio_init.part.0>:
 8003b3c:	b510      	push	{r4, lr}
 8003b3e:	4b0b      	ldr	r3, [pc, #44]	; (8003b6c <global_stdio_init.part.0+0x30>)
 8003b40:	4c0b      	ldr	r4, [pc, #44]	; (8003b70 <global_stdio_init.part.0+0x34>)
 8003b42:	4a0c      	ldr	r2, [pc, #48]	; (8003b74 <global_stdio_init.part.0+0x38>)
 8003b44:	4620      	mov	r0, r4
 8003b46:	601a      	str	r2, [r3, #0]
 8003b48:	2104      	movs	r1, #4
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f7ff ff94 	bl	8003a78 <std>
 8003b50:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003b54:	2201      	movs	r2, #1
 8003b56:	2109      	movs	r1, #9
 8003b58:	f7ff ff8e 	bl	8003a78 <std>
 8003b5c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003b60:	2202      	movs	r2, #2
 8003b62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b66:	2112      	movs	r1, #18
 8003b68:	f7ff bf86 	b.w	8003a78 <std>
 8003b6c:	200002e4 	.word	0x200002e4
 8003b70:	200001ac 	.word	0x200001ac
 8003b74:	08003ae5 	.word	0x08003ae5

08003b78 <__sfp_lock_acquire>:
 8003b78:	4801      	ldr	r0, [pc, #4]	; (8003b80 <__sfp_lock_acquire+0x8>)
 8003b7a:	f000 ba0e 	b.w	8003f9a <__retarget_lock_acquire_recursive>
 8003b7e:	bf00      	nop
 8003b80:	200002ed 	.word	0x200002ed

08003b84 <__sfp_lock_release>:
 8003b84:	4801      	ldr	r0, [pc, #4]	; (8003b8c <__sfp_lock_release+0x8>)
 8003b86:	f000 ba09 	b.w	8003f9c <__retarget_lock_release_recursive>
 8003b8a:	bf00      	nop
 8003b8c:	200002ed 	.word	0x200002ed

08003b90 <__sinit>:
 8003b90:	b510      	push	{r4, lr}
 8003b92:	4604      	mov	r4, r0
 8003b94:	f7ff fff0 	bl	8003b78 <__sfp_lock_acquire>
 8003b98:	6a23      	ldr	r3, [r4, #32]
 8003b9a:	b11b      	cbz	r3, 8003ba4 <__sinit+0x14>
 8003b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ba0:	f7ff bff0 	b.w	8003b84 <__sfp_lock_release>
 8003ba4:	4b04      	ldr	r3, [pc, #16]	; (8003bb8 <__sinit+0x28>)
 8003ba6:	6223      	str	r3, [r4, #32]
 8003ba8:	4b04      	ldr	r3, [pc, #16]	; (8003bbc <__sinit+0x2c>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1f5      	bne.n	8003b9c <__sinit+0xc>
 8003bb0:	f7ff ffc4 	bl	8003b3c <global_stdio_init.part.0>
 8003bb4:	e7f2      	b.n	8003b9c <__sinit+0xc>
 8003bb6:	bf00      	nop
 8003bb8:	08003afd 	.word	0x08003afd
 8003bbc:	200002e4 	.word	0x200002e4

08003bc0 <_fwalk_sglue>:
 8003bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003bc4:	4607      	mov	r7, r0
 8003bc6:	4688      	mov	r8, r1
 8003bc8:	4614      	mov	r4, r2
 8003bca:	2600      	movs	r6, #0
 8003bcc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003bd0:	f1b9 0901 	subs.w	r9, r9, #1
 8003bd4:	d505      	bpl.n	8003be2 <_fwalk_sglue+0x22>
 8003bd6:	6824      	ldr	r4, [r4, #0]
 8003bd8:	2c00      	cmp	r4, #0
 8003bda:	d1f7      	bne.n	8003bcc <_fwalk_sglue+0xc>
 8003bdc:	4630      	mov	r0, r6
 8003bde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003be2:	89ab      	ldrh	r3, [r5, #12]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d907      	bls.n	8003bf8 <_fwalk_sglue+0x38>
 8003be8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003bec:	3301      	adds	r3, #1
 8003bee:	d003      	beq.n	8003bf8 <_fwalk_sglue+0x38>
 8003bf0:	4629      	mov	r1, r5
 8003bf2:	4638      	mov	r0, r7
 8003bf4:	47c0      	blx	r8
 8003bf6:	4306      	orrs	r6, r0
 8003bf8:	3568      	adds	r5, #104	; 0x68
 8003bfa:	e7e9      	b.n	8003bd0 <_fwalk_sglue+0x10>

08003bfc <iprintf>:
 8003bfc:	b40f      	push	{r0, r1, r2, r3}
 8003bfe:	b507      	push	{r0, r1, r2, lr}
 8003c00:	4906      	ldr	r1, [pc, #24]	; (8003c1c <iprintf+0x20>)
 8003c02:	ab04      	add	r3, sp, #16
 8003c04:	6808      	ldr	r0, [r1, #0]
 8003c06:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c0a:	6881      	ldr	r1, [r0, #8]
 8003c0c:	9301      	str	r3, [sp, #4]
 8003c0e:	f000 fa37 	bl	8004080 <_vfiprintf_r>
 8003c12:	b003      	add	sp, #12
 8003c14:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c18:	b004      	add	sp, #16
 8003c1a:	4770      	bx	lr
 8003c1c:	2000006c 	.word	0x2000006c

08003c20 <_puts_r>:
 8003c20:	6a03      	ldr	r3, [r0, #32]
 8003c22:	b570      	push	{r4, r5, r6, lr}
 8003c24:	4605      	mov	r5, r0
 8003c26:	460e      	mov	r6, r1
 8003c28:	6884      	ldr	r4, [r0, #8]
 8003c2a:	b90b      	cbnz	r3, 8003c30 <_puts_r+0x10>
 8003c2c:	f7ff ffb0 	bl	8003b90 <__sinit>
 8003c30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c32:	07db      	lsls	r3, r3, #31
 8003c34:	d405      	bmi.n	8003c42 <_puts_r+0x22>
 8003c36:	89a3      	ldrh	r3, [r4, #12]
 8003c38:	0598      	lsls	r0, r3, #22
 8003c3a:	d402      	bmi.n	8003c42 <_puts_r+0x22>
 8003c3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c3e:	f000 f9ac 	bl	8003f9a <__retarget_lock_acquire_recursive>
 8003c42:	89a3      	ldrh	r3, [r4, #12]
 8003c44:	0719      	lsls	r1, r3, #28
 8003c46:	d513      	bpl.n	8003c70 <_puts_r+0x50>
 8003c48:	6923      	ldr	r3, [r4, #16]
 8003c4a:	b18b      	cbz	r3, 8003c70 <_puts_r+0x50>
 8003c4c:	3e01      	subs	r6, #1
 8003c4e:	68a3      	ldr	r3, [r4, #8]
 8003c50:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003c54:	3b01      	subs	r3, #1
 8003c56:	60a3      	str	r3, [r4, #8]
 8003c58:	b9e9      	cbnz	r1, 8003c96 <_puts_r+0x76>
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	da2e      	bge.n	8003cbc <_puts_r+0x9c>
 8003c5e:	4622      	mov	r2, r4
 8003c60:	210a      	movs	r1, #10
 8003c62:	4628      	mov	r0, r5
 8003c64:	f000 f87b 	bl	8003d5e <__swbuf_r>
 8003c68:	3001      	adds	r0, #1
 8003c6a:	d007      	beq.n	8003c7c <_puts_r+0x5c>
 8003c6c:	250a      	movs	r5, #10
 8003c6e:	e007      	b.n	8003c80 <_puts_r+0x60>
 8003c70:	4621      	mov	r1, r4
 8003c72:	4628      	mov	r0, r5
 8003c74:	f000 f8b0 	bl	8003dd8 <__swsetup_r>
 8003c78:	2800      	cmp	r0, #0
 8003c7a:	d0e7      	beq.n	8003c4c <_puts_r+0x2c>
 8003c7c:	f04f 35ff 	mov.w	r5, #4294967295
 8003c80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c82:	07da      	lsls	r2, r3, #31
 8003c84:	d405      	bmi.n	8003c92 <_puts_r+0x72>
 8003c86:	89a3      	ldrh	r3, [r4, #12]
 8003c88:	059b      	lsls	r3, r3, #22
 8003c8a:	d402      	bmi.n	8003c92 <_puts_r+0x72>
 8003c8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c8e:	f000 f985 	bl	8003f9c <__retarget_lock_release_recursive>
 8003c92:	4628      	mov	r0, r5
 8003c94:	bd70      	pop	{r4, r5, r6, pc}
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	da04      	bge.n	8003ca4 <_puts_r+0x84>
 8003c9a:	69a2      	ldr	r2, [r4, #24]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	dc06      	bgt.n	8003cae <_puts_r+0x8e>
 8003ca0:	290a      	cmp	r1, #10
 8003ca2:	d004      	beq.n	8003cae <_puts_r+0x8e>
 8003ca4:	6823      	ldr	r3, [r4, #0]
 8003ca6:	1c5a      	adds	r2, r3, #1
 8003ca8:	6022      	str	r2, [r4, #0]
 8003caa:	7019      	strb	r1, [r3, #0]
 8003cac:	e7cf      	b.n	8003c4e <_puts_r+0x2e>
 8003cae:	4622      	mov	r2, r4
 8003cb0:	4628      	mov	r0, r5
 8003cb2:	f000 f854 	bl	8003d5e <__swbuf_r>
 8003cb6:	3001      	adds	r0, #1
 8003cb8:	d1c9      	bne.n	8003c4e <_puts_r+0x2e>
 8003cba:	e7df      	b.n	8003c7c <_puts_r+0x5c>
 8003cbc:	250a      	movs	r5, #10
 8003cbe:	6823      	ldr	r3, [r4, #0]
 8003cc0:	1c5a      	adds	r2, r3, #1
 8003cc2:	6022      	str	r2, [r4, #0]
 8003cc4:	701d      	strb	r5, [r3, #0]
 8003cc6:	e7db      	b.n	8003c80 <_puts_r+0x60>

08003cc8 <puts>:
 8003cc8:	4b02      	ldr	r3, [pc, #8]	; (8003cd4 <puts+0xc>)
 8003cca:	4601      	mov	r1, r0
 8003ccc:	6818      	ldr	r0, [r3, #0]
 8003cce:	f7ff bfa7 	b.w	8003c20 <_puts_r>
 8003cd2:	bf00      	nop
 8003cd4:	2000006c 	.word	0x2000006c

08003cd8 <__sread>:
 8003cd8:	b510      	push	{r4, lr}
 8003cda:	460c      	mov	r4, r1
 8003cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ce0:	f000 f8fc 	bl	8003edc <_read_r>
 8003ce4:	2800      	cmp	r0, #0
 8003ce6:	bfab      	itete	ge
 8003ce8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003cea:	89a3      	ldrhlt	r3, [r4, #12]
 8003cec:	181b      	addge	r3, r3, r0
 8003cee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003cf2:	bfac      	ite	ge
 8003cf4:	6563      	strge	r3, [r4, #84]	; 0x54
 8003cf6:	81a3      	strhlt	r3, [r4, #12]
 8003cf8:	bd10      	pop	{r4, pc}

08003cfa <__swrite>:
 8003cfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cfe:	461f      	mov	r7, r3
 8003d00:	898b      	ldrh	r3, [r1, #12]
 8003d02:	4605      	mov	r5, r0
 8003d04:	05db      	lsls	r3, r3, #23
 8003d06:	460c      	mov	r4, r1
 8003d08:	4616      	mov	r6, r2
 8003d0a:	d505      	bpl.n	8003d18 <__swrite+0x1e>
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d14:	f000 f8d0 	bl	8003eb8 <_lseek_r>
 8003d18:	89a3      	ldrh	r3, [r4, #12]
 8003d1a:	4632      	mov	r2, r6
 8003d1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d20:	81a3      	strh	r3, [r4, #12]
 8003d22:	4628      	mov	r0, r5
 8003d24:	463b      	mov	r3, r7
 8003d26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d2e:	f000 b8f7 	b.w	8003f20 <_write_r>

08003d32 <__sseek>:
 8003d32:	b510      	push	{r4, lr}
 8003d34:	460c      	mov	r4, r1
 8003d36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d3a:	f000 f8bd 	bl	8003eb8 <_lseek_r>
 8003d3e:	1c43      	adds	r3, r0, #1
 8003d40:	89a3      	ldrh	r3, [r4, #12]
 8003d42:	bf15      	itete	ne
 8003d44:	6560      	strne	r0, [r4, #84]	; 0x54
 8003d46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003d4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003d4e:	81a3      	strheq	r3, [r4, #12]
 8003d50:	bf18      	it	ne
 8003d52:	81a3      	strhne	r3, [r4, #12]
 8003d54:	bd10      	pop	{r4, pc}

08003d56 <__sclose>:
 8003d56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d5a:	f000 b89d 	b.w	8003e98 <_close_r>

08003d5e <__swbuf_r>:
 8003d5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d60:	460e      	mov	r6, r1
 8003d62:	4614      	mov	r4, r2
 8003d64:	4605      	mov	r5, r0
 8003d66:	b118      	cbz	r0, 8003d70 <__swbuf_r+0x12>
 8003d68:	6a03      	ldr	r3, [r0, #32]
 8003d6a:	b90b      	cbnz	r3, 8003d70 <__swbuf_r+0x12>
 8003d6c:	f7ff ff10 	bl	8003b90 <__sinit>
 8003d70:	69a3      	ldr	r3, [r4, #24]
 8003d72:	60a3      	str	r3, [r4, #8]
 8003d74:	89a3      	ldrh	r3, [r4, #12]
 8003d76:	071a      	lsls	r2, r3, #28
 8003d78:	d525      	bpl.n	8003dc6 <__swbuf_r+0x68>
 8003d7a:	6923      	ldr	r3, [r4, #16]
 8003d7c:	b31b      	cbz	r3, 8003dc6 <__swbuf_r+0x68>
 8003d7e:	6823      	ldr	r3, [r4, #0]
 8003d80:	6922      	ldr	r2, [r4, #16]
 8003d82:	b2f6      	uxtb	r6, r6
 8003d84:	1a98      	subs	r0, r3, r2
 8003d86:	6963      	ldr	r3, [r4, #20]
 8003d88:	4637      	mov	r7, r6
 8003d8a:	4283      	cmp	r3, r0
 8003d8c:	dc04      	bgt.n	8003d98 <__swbuf_r+0x3a>
 8003d8e:	4621      	mov	r1, r4
 8003d90:	4628      	mov	r0, r5
 8003d92:	f000 fca5 	bl	80046e0 <_fflush_r>
 8003d96:	b9e0      	cbnz	r0, 8003dd2 <__swbuf_r+0x74>
 8003d98:	68a3      	ldr	r3, [r4, #8]
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	60a3      	str	r3, [r4, #8]
 8003d9e:	6823      	ldr	r3, [r4, #0]
 8003da0:	1c5a      	adds	r2, r3, #1
 8003da2:	6022      	str	r2, [r4, #0]
 8003da4:	701e      	strb	r6, [r3, #0]
 8003da6:	6962      	ldr	r2, [r4, #20]
 8003da8:	1c43      	adds	r3, r0, #1
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d004      	beq.n	8003db8 <__swbuf_r+0x5a>
 8003dae:	89a3      	ldrh	r3, [r4, #12]
 8003db0:	07db      	lsls	r3, r3, #31
 8003db2:	d506      	bpl.n	8003dc2 <__swbuf_r+0x64>
 8003db4:	2e0a      	cmp	r6, #10
 8003db6:	d104      	bne.n	8003dc2 <__swbuf_r+0x64>
 8003db8:	4621      	mov	r1, r4
 8003dba:	4628      	mov	r0, r5
 8003dbc:	f000 fc90 	bl	80046e0 <_fflush_r>
 8003dc0:	b938      	cbnz	r0, 8003dd2 <__swbuf_r+0x74>
 8003dc2:	4638      	mov	r0, r7
 8003dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dc6:	4621      	mov	r1, r4
 8003dc8:	4628      	mov	r0, r5
 8003dca:	f000 f805 	bl	8003dd8 <__swsetup_r>
 8003dce:	2800      	cmp	r0, #0
 8003dd0:	d0d5      	beq.n	8003d7e <__swbuf_r+0x20>
 8003dd2:	f04f 37ff 	mov.w	r7, #4294967295
 8003dd6:	e7f4      	b.n	8003dc2 <__swbuf_r+0x64>

08003dd8 <__swsetup_r>:
 8003dd8:	b538      	push	{r3, r4, r5, lr}
 8003dda:	4b2a      	ldr	r3, [pc, #168]	; (8003e84 <__swsetup_r+0xac>)
 8003ddc:	4605      	mov	r5, r0
 8003dde:	6818      	ldr	r0, [r3, #0]
 8003de0:	460c      	mov	r4, r1
 8003de2:	b118      	cbz	r0, 8003dec <__swsetup_r+0x14>
 8003de4:	6a03      	ldr	r3, [r0, #32]
 8003de6:	b90b      	cbnz	r3, 8003dec <__swsetup_r+0x14>
 8003de8:	f7ff fed2 	bl	8003b90 <__sinit>
 8003dec:	89a3      	ldrh	r3, [r4, #12]
 8003dee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003df2:	0718      	lsls	r0, r3, #28
 8003df4:	d422      	bmi.n	8003e3c <__swsetup_r+0x64>
 8003df6:	06d9      	lsls	r1, r3, #27
 8003df8:	d407      	bmi.n	8003e0a <__swsetup_r+0x32>
 8003dfa:	2309      	movs	r3, #9
 8003dfc:	602b      	str	r3, [r5, #0]
 8003dfe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003e02:	f04f 30ff 	mov.w	r0, #4294967295
 8003e06:	81a3      	strh	r3, [r4, #12]
 8003e08:	e034      	b.n	8003e74 <__swsetup_r+0x9c>
 8003e0a:	0758      	lsls	r0, r3, #29
 8003e0c:	d512      	bpl.n	8003e34 <__swsetup_r+0x5c>
 8003e0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e10:	b141      	cbz	r1, 8003e24 <__swsetup_r+0x4c>
 8003e12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e16:	4299      	cmp	r1, r3
 8003e18:	d002      	beq.n	8003e20 <__swsetup_r+0x48>
 8003e1a:	4628      	mov	r0, r5
 8003e1c:	f000 f8c0 	bl	8003fa0 <_free_r>
 8003e20:	2300      	movs	r3, #0
 8003e22:	6363      	str	r3, [r4, #52]	; 0x34
 8003e24:	89a3      	ldrh	r3, [r4, #12]
 8003e26:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003e2a:	81a3      	strh	r3, [r4, #12]
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	6063      	str	r3, [r4, #4]
 8003e30:	6923      	ldr	r3, [r4, #16]
 8003e32:	6023      	str	r3, [r4, #0]
 8003e34:	89a3      	ldrh	r3, [r4, #12]
 8003e36:	f043 0308 	orr.w	r3, r3, #8
 8003e3a:	81a3      	strh	r3, [r4, #12]
 8003e3c:	6923      	ldr	r3, [r4, #16]
 8003e3e:	b94b      	cbnz	r3, 8003e54 <__swsetup_r+0x7c>
 8003e40:	89a3      	ldrh	r3, [r4, #12]
 8003e42:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003e46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e4a:	d003      	beq.n	8003e54 <__swsetup_r+0x7c>
 8003e4c:	4621      	mov	r1, r4
 8003e4e:	4628      	mov	r0, r5
 8003e50:	f000 fc93 	bl	800477a <__smakebuf_r>
 8003e54:	89a0      	ldrh	r0, [r4, #12]
 8003e56:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e5a:	f010 0301 	ands.w	r3, r0, #1
 8003e5e:	d00a      	beq.n	8003e76 <__swsetup_r+0x9e>
 8003e60:	2300      	movs	r3, #0
 8003e62:	60a3      	str	r3, [r4, #8]
 8003e64:	6963      	ldr	r3, [r4, #20]
 8003e66:	425b      	negs	r3, r3
 8003e68:	61a3      	str	r3, [r4, #24]
 8003e6a:	6923      	ldr	r3, [r4, #16]
 8003e6c:	b943      	cbnz	r3, 8003e80 <__swsetup_r+0xa8>
 8003e6e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003e72:	d1c4      	bne.n	8003dfe <__swsetup_r+0x26>
 8003e74:	bd38      	pop	{r3, r4, r5, pc}
 8003e76:	0781      	lsls	r1, r0, #30
 8003e78:	bf58      	it	pl
 8003e7a:	6963      	ldrpl	r3, [r4, #20]
 8003e7c:	60a3      	str	r3, [r4, #8]
 8003e7e:	e7f4      	b.n	8003e6a <__swsetup_r+0x92>
 8003e80:	2000      	movs	r0, #0
 8003e82:	e7f7      	b.n	8003e74 <__swsetup_r+0x9c>
 8003e84:	2000006c 	.word	0x2000006c

08003e88 <memset>:
 8003e88:	4603      	mov	r3, r0
 8003e8a:	4402      	add	r2, r0
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d100      	bne.n	8003e92 <memset+0xa>
 8003e90:	4770      	bx	lr
 8003e92:	f803 1b01 	strb.w	r1, [r3], #1
 8003e96:	e7f9      	b.n	8003e8c <memset+0x4>

08003e98 <_close_r>:
 8003e98:	b538      	push	{r3, r4, r5, lr}
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	4d05      	ldr	r5, [pc, #20]	; (8003eb4 <_close_r+0x1c>)
 8003e9e:	4604      	mov	r4, r0
 8003ea0:	4608      	mov	r0, r1
 8003ea2:	602b      	str	r3, [r5, #0]
 8003ea4:	f7fd fc3c 	bl	8001720 <_close>
 8003ea8:	1c43      	adds	r3, r0, #1
 8003eaa:	d102      	bne.n	8003eb2 <_close_r+0x1a>
 8003eac:	682b      	ldr	r3, [r5, #0]
 8003eae:	b103      	cbz	r3, 8003eb2 <_close_r+0x1a>
 8003eb0:	6023      	str	r3, [r4, #0]
 8003eb2:	bd38      	pop	{r3, r4, r5, pc}
 8003eb4:	200002e8 	.word	0x200002e8

08003eb8 <_lseek_r>:
 8003eb8:	b538      	push	{r3, r4, r5, lr}
 8003eba:	4604      	mov	r4, r0
 8003ebc:	4608      	mov	r0, r1
 8003ebe:	4611      	mov	r1, r2
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	4d05      	ldr	r5, [pc, #20]	; (8003ed8 <_lseek_r+0x20>)
 8003ec4:	602a      	str	r2, [r5, #0]
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	f7fd fc4e 	bl	8001768 <_lseek>
 8003ecc:	1c43      	adds	r3, r0, #1
 8003ece:	d102      	bne.n	8003ed6 <_lseek_r+0x1e>
 8003ed0:	682b      	ldr	r3, [r5, #0]
 8003ed2:	b103      	cbz	r3, 8003ed6 <_lseek_r+0x1e>
 8003ed4:	6023      	str	r3, [r4, #0]
 8003ed6:	bd38      	pop	{r3, r4, r5, pc}
 8003ed8:	200002e8 	.word	0x200002e8

08003edc <_read_r>:
 8003edc:	b538      	push	{r3, r4, r5, lr}
 8003ede:	4604      	mov	r4, r0
 8003ee0:	4608      	mov	r0, r1
 8003ee2:	4611      	mov	r1, r2
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	4d05      	ldr	r5, [pc, #20]	; (8003efc <_read_r+0x20>)
 8003ee8:	602a      	str	r2, [r5, #0]
 8003eea:	461a      	mov	r2, r3
 8003eec:	f7fd fbdf 	bl	80016ae <_read>
 8003ef0:	1c43      	adds	r3, r0, #1
 8003ef2:	d102      	bne.n	8003efa <_read_r+0x1e>
 8003ef4:	682b      	ldr	r3, [r5, #0]
 8003ef6:	b103      	cbz	r3, 8003efa <_read_r+0x1e>
 8003ef8:	6023      	str	r3, [r4, #0]
 8003efa:	bd38      	pop	{r3, r4, r5, pc}
 8003efc:	200002e8 	.word	0x200002e8

08003f00 <_sbrk_r>:
 8003f00:	b538      	push	{r3, r4, r5, lr}
 8003f02:	2300      	movs	r3, #0
 8003f04:	4d05      	ldr	r5, [pc, #20]	; (8003f1c <_sbrk_r+0x1c>)
 8003f06:	4604      	mov	r4, r0
 8003f08:	4608      	mov	r0, r1
 8003f0a:	602b      	str	r3, [r5, #0]
 8003f0c:	f7fd fc38 	bl	8001780 <_sbrk>
 8003f10:	1c43      	adds	r3, r0, #1
 8003f12:	d102      	bne.n	8003f1a <_sbrk_r+0x1a>
 8003f14:	682b      	ldr	r3, [r5, #0]
 8003f16:	b103      	cbz	r3, 8003f1a <_sbrk_r+0x1a>
 8003f18:	6023      	str	r3, [r4, #0]
 8003f1a:	bd38      	pop	{r3, r4, r5, pc}
 8003f1c:	200002e8 	.word	0x200002e8

08003f20 <_write_r>:
 8003f20:	b538      	push	{r3, r4, r5, lr}
 8003f22:	4604      	mov	r4, r0
 8003f24:	4608      	mov	r0, r1
 8003f26:	4611      	mov	r1, r2
 8003f28:	2200      	movs	r2, #0
 8003f2a:	4d05      	ldr	r5, [pc, #20]	; (8003f40 <_write_r+0x20>)
 8003f2c:	602a      	str	r2, [r5, #0]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	f7fd fbda 	bl	80016e8 <_write>
 8003f34:	1c43      	adds	r3, r0, #1
 8003f36:	d102      	bne.n	8003f3e <_write_r+0x1e>
 8003f38:	682b      	ldr	r3, [r5, #0]
 8003f3a:	b103      	cbz	r3, 8003f3e <_write_r+0x1e>
 8003f3c:	6023      	str	r3, [r4, #0]
 8003f3e:	bd38      	pop	{r3, r4, r5, pc}
 8003f40:	200002e8 	.word	0x200002e8

08003f44 <__errno>:
 8003f44:	4b01      	ldr	r3, [pc, #4]	; (8003f4c <__errno+0x8>)
 8003f46:	6818      	ldr	r0, [r3, #0]
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	2000006c 	.word	0x2000006c

08003f50 <__libc_init_array>:
 8003f50:	b570      	push	{r4, r5, r6, lr}
 8003f52:	2600      	movs	r6, #0
 8003f54:	4d0c      	ldr	r5, [pc, #48]	; (8003f88 <__libc_init_array+0x38>)
 8003f56:	4c0d      	ldr	r4, [pc, #52]	; (8003f8c <__libc_init_array+0x3c>)
 8003f58:	1b64      	subs	r4, r4, r5
 8003f5a:	10a4      	asrs	r4, r4, #2
 8003f5c:	42a6      	cmp	r6, r4
 8003f5e:	d109      	bne.n	8003f74 <__libc_init_array+0x24>
 8003f60:	f000 fc78 	bl	8004854 <_init>
 8003f64:	2600      	movs	r6, #0
 8003f66:	4d0a      	ldr	r5, [pc, #40]	; (8003f90 <__libc_init_array+0x40>)
 8003f68:	4c0a      	ldr	r4, [pc, #40]	; (8003f94 <__libc_init_array+0x44>)
 8003f6a:	1b64      	subs	r4, r4, r5
 8003f6c:	10a4      	asrs	r4, r4, #2
 8003f6e:	42a6      	cmp	r6, r4
 8003f70:	d105      	bne.n	8003f7e <__libc_init_array+0x2e>
 8003f72:	bd70      	pop	{r4, r5, r6, pc}
 8003f74:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f78:	4798      	blx	r3
 8003f7a:	3601      	adds	r6, #1
 8003f7c:	e7ee      	b.n	8003f5c <__libc_init_array+0xc>
 8003f7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f82:	4798      	blx	r3
 8003f84:	3601      	adds	r6, #1
 8003f86:	e7f2      	b.n	8003f6e <__libc_init_array+0x1e>
 8003f88:	08007e88 	.word	0x08007e88
 8003f8c:	08007e88 	.word	0x08007e88
 8003f90:	08007e88 	.word	0x08007e88
 8003f94:	08007e8c 	.word	0x08007e8c

08003f98 <__retarget_lock_init_recursive>:
 8003f98:	4770      	bx	lr

08003f9a <__retarget_lock_acquire_recursive>:
 8003f9a:	4770      	bx	lr

08003f9c <__retarget_lock_release_recursive>:
 8003f9c:	4770      	bx	lr
	...

08003fa0 <_free_r>:
 8003fa0:	b538      	push	{r3, r4, r5, lr}
 8003fa2:	4605      	mov	r5, r0
 8003fa4:	2900      	cmp	r1, #0
 8003fa6:	d040      	beq.n	800402a <_free_r+0x8a>
 8003fa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fac:	1f0c      	subs	r4, r1, #4
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	bfb8      	it	lt
 8003fb2:	18e4      	addlt	r4, r4, r3
 8003fb4:	f7ff fd54 	bl	8003a60 <__malloc_lock>
 8003fb8:	4a1c      	ldr	r2, [pc, #112]	; (800402c <_free_r+0x8c>)
 8003fba:	6813      	ldr	r3, [r2, #0]
 8003fbc:	b933      	cbnz	r3, 8003fcc <_free_r+0x2c>
 8003fbe:	6063      	str	r3, [r4, #4]
 8003fc0:	6014      	str	r4, [r2, #0]
 8003fc2:	4628      	mov	r0, r5
 8003fc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003fc8:	f7ff bd50 	b.w	8003a6c <__malloc_unlock>
 8003fcc:	42a3      	cmp	r3, r4
 8003fce:	d908      	bls.n	8003fe2 <_free_r+0x42>
 8003fd0:	6820      	ldr	r0, [r4, #0]
 8003fd2:	1821      	adds	r1, r4, r0
 8003fd4:	428b      	cmp	r3, r1
 8003fd6:	bf01      	itttt	eq
 8003fd8:	6819      	ldreq	r1, [r3, #0]
 8003fda:	685b      	ldreq	r3, [r3, #4]
 8003fdc:	1809      	addeq	r1, r1, r0
 8003fde:	6021      	streq	r1, [r4, #0]
 8003fe0:	e7ed      	b.n	8003fbe <_free_r+0x1e>
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	b10b      	cbz	r3, 8003fec <_free_r+0x4c>
 8003fe8:	42a3      	cmp	r3, r4
 8003fea:	d9fa      	bls.n	8003fe2 <_free_r+0x42>
 8003fec:	6811      	ldr	r1, [r2, #0]
 8003fee:	1850      	adds	r0, r2, r1
 8003ff0:	42a0      	cmp	r0, r4
 8003ff2:	d10b      	bne.n	800400c <_free_r+0x6c>
 8003ff4:	6820      	ldr	r0, [r4, #0]
 8003ff6:	4401      	add	r1, r0
 8003ff8:	1850      	adds	r0, r2, r1
 8003ffa:	4283      	cmp	r3, r0
 8003ffc:	6011      	str	r1, [r2, #0]
 8003ffe:	d1e0      	bne.n	8003fc2 <_free_r+0x22>
 8004000:	6818      	ldr	r0, [r3, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	4408      	add	r0, r1
 8004006:	6010      	str	r0, [r2, #0]
 8004008:	6053      	str	r3, [r2, #4]
 800400a:	e7da      	b.n	8003fc2 <_free_r+0x22>
 800400c:	d902      	bls.n	8004014 <_free_r+0x74>
 800400e:	230c      	movs	r3, #12
 8004010:	602b      	str	r3, [r5, #0]
 8004012:	e7d6      	b.n	8003fc2 <_free_r+0x22>
 8004014:	6820      	ldr	r0, [r4, #0]
 8004016:	1821      	adds	r1, r4, r0
 8004018:	428b      	cmp	r3, r1
 800401a:	bf01      	itttt	eq
 800401c:	6819      	ldreq	r1, [r3, #0]
 800401e:	685b      	ldreq	r3, [r3, #4]
 8004020:	1809      	addeq	r1, r1, r0
 8004022:	6021      	streq	r1, [r4, #0]
 8004024:	6063      	str	r3, [r4, #4]
 8004026:	6054      	str	r4, [r2, #4]
 8004028:	e7cb      	b.n	8003fc2 <_free_r+0x22>
 800402a:	bd38      	pop	{r3, r4, r5, pc}
 800402c:	200001a4 	.word	0x200001a4

08004030 <__sfputc_r>:
 8004030:	6893      	ldr	r3, [r2, #8]
 8004032:	b410      	push	{r4}
 8004034:	3b01      	subs	r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	6093      	str	r3, [r2, #8]
 800403a:	da07      	bge.n	800404c <__sfputc_r+0x1c>
 800403c:	6994      	ldr	r4, [r2, #24]
 800403e:	42a3      	cmp	r3, r4
 8004040:	db01      	blt.n	8004046 <__sfputc_r+0x16>
 8004042:	290a      	cmp	r1, #10
 8004044:	d102      	bne.n	800404c <__sfputc_r+0x1c>
 8004046:	bc10      	pop	{r4}
 8004048:	f7ff be89 	b.w	8003d5e <__swbuf_r>
 800404c:	6813      	ldr	r3, [r2, #0]
 800404e:	1c58      	adds	r0, r3, #1
 8004050:	6010      	str	r0, [r2, #0]
 8004052:	7019      	strb	r1, [r3, #0]
 8004054:	4608      	mov	r0, r1
 8004056:	bc10      	pop	{r4}
 8004058:	4770      	bx	lr

0800405a <__sfputs_r>:
 800405a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800405c:	4606      	mov	r6, r0
 800405e:	460f      	mov	r7, r1
 8004060:	4614      	mov	r4, r2
 8004062:	18d5      	adds	r5, r2, r3
 8004064:	42ac      	cmp	r4, r5
 8004066:	d101      	bne.n	800406c <__sfputs_r+0x12>
 8004068:	2000      	movs	r0, #0
 800406a:	e007      	b.n	800407c <__sfputs_r+0x22>
 800406c:	463a      	mov	r2, r7
 800406e:	4630      	mov	r0, r6
 8004070:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004074:	f7ff ffdc 	bl	8004030 <__sfputc_r>
 8004078:	1c43      	adds	r3, r0, #1
 800407a:	d1f3      	bne.n	8004064 <__sfputs_r+0xa>
 800407c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004080 <_vfiprintf_r>:
 8004080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004084:	460d      	mov	r5, r1
 8004086:	4614      	mov	r4, r2
 8004088:	4698      	mov	r8, r3
 800408a:	4606      	mov	r6, r0
 800408c:	b09d      	sub	sp, #116	; 0x74
 800408e:	b118      	cbz	r0, 8004098 <_vfiprintf_r+0x18>
 8004090:	6a03      	ldr	r3, [r0, #32]
 8004092:	b90b      	cbnz	r3, 8004098 <_vfiprintf_r+0x18>
 8004094:	f7ff fd7c 	bl	8003b90 <__sinit>
 8004098:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800409a:	07d9      	lsls	r1, r3, #31
 800409c:	d405      	bmi.n	80040aa <_vfiprintf_r+0x2a>
 800409e:	89ab      	ldrh	r3, [r5, #12]
 80040a0:	059a      	lsls	r2, r3, #22
 80040a2:	d402      	bmi.n	80040aa <_vfiprintf_r+0x2a>
 80040a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80040a6:	f7ff ff78 	bl	8003f9a <__retarget_lock_acquire_recursive>
 80040aa:	89ab      	ldrh	r3, [r5, #12]
 80040ac:	071b      	lsls	r3, r3, #28
 80040ae:	d501      	bpl.n	80040b4 <_vfiprintf_r+0x34>
 80040b0:	692b      	ldr	r3, [r5, #16]
 80040b2:	b99b      	cbnz	r3, 80040dc <_vfiprintf_r+0x5c>
 80040b4:	4629      	mov	r1, r5
 80040b6:	4630      	mov	r0, r6
 80040b8:	f7ff fe8e 	bl	8003dd8 <__swsetup_r>
 80040bc:	b170      	cbz	r0, 80040dc <_vfiprintf_r+0x5c>
 80040be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80040c0:	07dc      	lsls	r4, r3, #31
 80040c2:	d504      	bpl.n	80040ce <_vfiprintf_r+0x4e>
 80040c4:	f04f 30ff 	mov.w	r0, #4294967295
 80040c8:	b01d      	add	sp, #116	; 0x74
 80040ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040ce:	89ab      	ldrh	r3, [r5, #12]
 80040d0:	0598      	lsls	r0, r3, #22
 80040d2:	d4f7      	bmi.n	80040c4 <_vfiprintf_r+0x44>
 80040d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80040d6:	f7ff ff61 	bl	8003f9c <__retarget_lock_release_recursive>
 80040da:	e7f3      	b.n	80040c4 <_vfiprintf_r+0x44>
 80040dc:	2300      	movs	r3, #0
 80040de:	9309      	str	r3, [sp, #36]	; 0x24
 80040e0:	2320      	movs	r3, #32
 80040e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80040e6:	2330      	movs	r3, #48	; 0x30
 80040e8:	f04f 0901 	mov.w	r9, #1
 80040ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80040f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80042a0 <_vfiprintf_r+0x220>
 80040f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80040f8:	4623      	mov	r3, r4
 80040fa:	469a      	mov	sl, r3
 80040fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004100:	b10a      	cbz	r2, 8004106 <_vfiprintf_r+0x86>
 8004102:	2a25      	cmp	r2, #37	; 0x25
 8004104:	d1f9      	bne.n	80040fa <_vfiprintf_r+0x7a>
 8004106:	ebba 0b04 	subs.w	fp, sl, r4
 800410a:	d00b      	beq.n	8004124 <_vfiprintf_r+0xa4>
 800410c:	465b      	mov	r3, fp
 800410e:	4622      	mov	r2, r4
 8004110:	4629      	mov	r1, r5
 8004112:	4630      	mov	r0, r6
 8004114:	f7ff ffa1 	bl	800405a <__sfputs_r>
 8004118:	3001      	adds	r0, #1
 800411a:	f000 80a9 	beq.w	8004270 <_vfiprintf_r+0x1f0>
 800411e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004120:	445a      	add	r2, fp
 8004122:	9209      	str	r2, [sp, #36]	; 0x24
 8004124:	f89a 3000 	ldrb.w	r3, [sl]
 8004128:	2b00      	cmp	r3, #0
 800412a:	f000 80a1 	beq.w	8004270 <_vfiprintf_r+0x1f0>
 800412e:	2300      	movs	r3, #0
 8004130:	f04f 32ff 	mov.w	r2, #4294967295
 8004134:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004138:	f10a 0a01 	add.w	sl, sl, #1
 800413c:	9304      	str	r3, [sp, #16]
 800413e:	9307      	str	r3, [sp, #28]
 8004140:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004144:	931a      	str	r3, [sp, #104]	; 0x68
 8004146:	4654      	mov	r4, sl
 8004148:	2205      	movs	r2, #5
 800414a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800414e:	4854      	ldr	r0, [pc, #336]	; (80042a0 <_vfiprintf_r+0x220>)
 8004150:	f000 fb72 	bl	8004838 <memchr>
 8004154:	9a04      	ldr	r2, [sp, #16]
 8004156:	b9d8      	cbnz	r0, 8004190 <_vfiprintf_r+0x110>
 8004158:	06d1      	lsls	r1, r2, #27
 800415a:	bf44      	itt	mi
 800415c:	2320      	movmi	r3, #32
 800415e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004162:	0713      	lsls	r3, r2, #28
 8004164:	bf44      	itt	mi
 8004166:	232b      	movmi	r3, #43	; 0x2b
 8004168:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800416c:	f89a 3000 	ldrb.w	r3, [sl]
 8004170:	2b2a      	cmp	r3, #42	; 0x2a
 8004172:	d015      	beq.n	80041a0 <_vfiprintf_r+0x120>
 8004174:	4654      	mov	r4, sl
 8004176:	2000      	movs	r0, #0
 8004178:	f04f 0c0a 	mov.w	ip, #10
 800417c:	9a07      	ldr	r2, [sp, #28]
 800417e:	4621      	mov	r1, r4
 8004180:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004184:	3b30      	subs	r3, #48	; 0x30
 8004186:	2b09      	cmp	r3, #9
 8004188:	d94d      	bls.n	8004226 <_vfiprintf_r+0x1a6>
 800418a:	b1b0      	cbz	r0, 80041ba <_vfiprintf_r+0x13a>
 800418c:	9207      	str	r2, [sp, #28]
 800418e:	e014      	b.n	80041ba <_vfiprintf_r+0x13a>
 8004190:	eba0 0308 	sub.w	r3, r0, r8
 8004194:	fa09 f303 	lsl.w	r3, r9, r3
 8004198:	4313      	orrs	r3, r2
 800419a:	46a2      	mov	sl, r4
 800419c:	9304      	str	r3, [sp, #16]
 800419e:	e7d2      	b.n	8004146 <_vfiprintf_r+0xc6>
 80041a0:	9b03      	ldr	r3, [sp, #12]
 80041a2:	1d19      	adds	r1, r3, #4
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	9103      	str	r1, [sp, #12]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	bfbb      	ittet	lt
 80041ac:	425b      	neglt	r3, r3
 80041ae:	f042 0202 	orrlt.w	r2, r2, #2
 80041b2:	9307      	strge	r3, [sp, #28]
 80041b4:	9307      	strlt	r3, [sp, #28]
 80041b6:	bfb8      	it	lt
 80041b8:	9204      	strlt	r2, [sp, #16]
 80041ba:	7823      	ldrb	r3, [r4, #0]
 80041bc:	2b2e      	cmp	r3, #46	; 0x2e
 80041be:	d10c      	bne.n	80041da <_vfiprintf_r+0x15a>
 80041c0:	7863      	ldrb	r3, [r4, #1]
 80041c2:	2b2a      	cmp	r3, #42	; 0x2a
 80041c4:	d134      	bne.n	8004230 <_vfiprintf_r+0x1b0>
 80041c6:	9b03      	ldr	r3, [sp, #12]
 80041c8:	3402      	adds	r4, #2
 80041ca:	1d1a      	adds	r2, r3, #4
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	9203      	str	r2, [sp, #12]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	bfb8      	it	lt
 80041d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80041d8:	9305      	str	r3, [sp, #20]
 80041da:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80042a4 <_vfiprintf_r+0x224>
 80041de:	2203      	movs	r2, #3
 80041e0:	4650      	mov	r0, sl
 80041e2:	7821      	ldrb	r1, [r4, #0]
 80041e4:	f000 fb28 	bl	8004838 <memchr>
 80041e8:	b138      	cbz	r0, 80041fa <_vfiprintf_r+0x17a>
 80041ea:	2240      	movs	r2, #64	; 0x40
 80041ec:	9b04      	ldr	r3, [sp, #16]
 80041ee:	eba0 000a 	sub.w	r0, r0, sl
 80041f2:	4082      	lsls	r2, r0
 80041f4:	4313      	orrs	r3, r2
 80041f6:	3401      	adds	r4, #1
 80041f8:	9304      	str	r3, [sp, #16]
 80041fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041fe:	2206      	movs	r2, #6
 8004200:	4829      	ldr	r0, [pc, #164]	; (80042a8 <_vfiprintf_r+0x228>)
 8004202:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004206:	f000 fb17 	bl	8004838 <memchr>
 800420a:	2800      	cmp	r0, #0
 800420c:	d03f      	beq.n	800428e <_vfiprintf_r+0x20e>
 800420e:	4b27      	ldr	r3, [pc, #156]	; (80042ac <_vfiprintf_r+0x22c>)
 8004210:	bb1b      	cbnz	r3, 800425a <_vfiprintf_r+0x1da>
 8004212:	9b03      	ldr	r3, [sp, #12]
 8004214:	3307      	adds	r3, #7
 8004216:	f023 0307 	bic.w	r3, r3, #7
 800421a:	3308      	adds	r3, #8
 800421c:	9303      	str	r3, [sp, #12]
 800421e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004220:	443b      	add	r3, r7
 8004222:	9309      	str	r3, [sp, #36]	; 0x24
 8004224:	e768      	b.n	80040f8 <_vfiprintf_r+0x78>
 8004226:	460c      	mov	r4, r1
 8004228:	2001      	movs	r0, #1
 800422a:	fb0c 3202 	mla	r2, ip, r2, r3
 800422e:	e7a6      	b.n	800417e <_vfiprintf_r+0xfe>
 8004230:	2300      	movs	r3, #0
 8004232:	f04f 0c0a 	mov.w	ip, #10
 8004236:	4619      	mov	r1, r3
 8004238:	3401      	adds	r4, #1
 800423a:	9305      	str	r3, [sp, #20]
 800423c:	4620      	mov	r0, r4
 800423e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004242:	3a30      	subs	r2, #48	; 0x30
 8004244:	2a09      	cmp	r2, #9
 8004246:	d903      	bls.n	8004250 <_vfiprintf_r+0x1d0>
 8004248:	2b00      	cmp	r3, #0
 800424a:	d0c6      	beq.n	80041da <_vfiprintf_r+0x15a>
 800424c:	9105      	str	r1, [sp, #20]
 800424e:	e7c4      	b.n	80041da <_vfiprintf_r+0x15a>
 8004250:	4604      	mov	r4, r0
 8004252:	2301      	movs	r3, #1
 8004254:	fb0c 2101 	mla	r1, ip, r1, r2
 8004258:	e7f0      	b.n	800423c <_vfiprintf_r+0x1bc>
 800425a:	ab03      	add	r3, sp, #12
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	462a      	mov	r2, r5
 8004260:	4630      	mov	r0, r6
 8004262:	4b13      	ldr	r3, [pc, #76]	; (80042b0 <_vfiprintf_r+0x230>)
 8004264:	a904      	add	r1, sp, #16
 8004266:	f3af 8000 	nop.w
 800426a:	4607      	mov	r7, r0
 800426c:	1c78      	adds	r0, r7, #1
 800426e:	d1d6      	bne.n	800421e <_vfiprintf_r+0x19e>
 8004270:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004272:	07d9      	lsls	r1, r3, #31
 8004274:	d405      	bmi.n	8004282 <_vfiprintf_r+0x202>
 8004276:	89ab      	ldrh	r3, [r5, #12]
 8004278:	059a      	lsls	r2, r3, #22
 800427a:	d402      	bmi.n	8004282 <_vfiprintf_r+0x202>
 800427c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800427e:	f7ff fe8d 	bl	8003f9c <__retarget_lock_release_recursive>
 8004282:	89ab      	ldrh	r3, [r5, #12]
 8004284:	065b      	lsls	r3, r3, #25
 8004286:	f53f af1d 	bmi.w	80040c4 <_vfiprintf_r+0x44>
 800428a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800428c:	e71c      	b.n	80040c8 <_vfiprintf_r+0x48>
 800428e:	ab03      	add	r3, sp, #12
 8004290:	9300      	str	r3, [sp, #0]
 8004292:	462a      	mov	r2, r5
 8004294:	4630      	mov	r0, r6
 8004296:	4b06      	ldr	r3, [pc, #24]	; (80042b0 <_vfiprintf_r+0x230>)
 8004298:	a904      	add	r1, sp, #16
 800429a:	f000 f87d 	bl	8004398 <_printf_i>
 800429e:	e7e4      	b.n	800426a <_vfiprintf_r+0x1ea>
 80042a0:	08007e52 	.word	0x08007e52
 80042a4:	08007e58 	.word	0x08007e58
 80042a8:	08007e5c 	.word	0x08007e5c
 80042ac:	00000000 	.word	0x00000000
 80042b0:	0800405b 	.word	0x0800405b

080042b4 <_printf_common>:
 80042b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042b8:	4616      	mov	r6, r2
 80042ba:	4699      	mov	r9, r3
 80042bc:	688a      	ldr	r2, [r1, #8]
 80042be:	690b      	ldr	r3, [r1, #16]
 80042c0:	4607      	mov	r7, r0
 80042c2:	4293      	cmp	r3, r2
 80042c4:	bfb8      	it	lt
 80042c6:	4613      	movlt	r3, r2
 80042c8:	6033      	str	r3, [r6, #0]
 80042ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80042ce:	460c      	mov	r4, r1
 80042d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042d4:	b10a      	cbz	r2, 80042da <_printf_common+0x26>
 80042d6:	3301      	adds	r3, #1
 80042d8:	6033      	str	r3, [r6, #0]
 80042da:	6823      	ldr	r3, [r4, #0]
 80042dc:	0699      	lsls	r1, r3, #26
 80042de:	bf42      	ittt	mi
 80042e0:	6833      	ldrmi	r3, [r6, #0]
 80042e2:	3302      	addmi	r3, #2
 80042e4:	6033      	strmi	r3, [r6, #0]
 80042e6:	6825      	ldr	r5, [r4, #0]
 80042e8:	f015 0506 	ands.w	r5, r5, #6
 80042ec:	d106      	bne.n	80042fc <_printf_common+0x48>
 80042ee:	f104 0a19 	add.w	sl, r4, #25
 80042f2:	68e3      	ldr	r3, [r4, #12]
 80042f4:	6832      	ldr	r2, [r6, #0]
 80042f6:	1a9b      	subs	r3, r3, r2
 80042f8:	42ab      	cmp	r3, r5
 80042fa:	dc2b      	bgt.n	8004354 <_printf_common+0xa0>
 80042fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004300:	1e13      	subs	r3, r2, #0
 8004302:	6822      	ldr	r2, [r4, #0]
 8004304:	bf18      	it	ne
 8004306:	2301      	movne	r3, #1
 8004308:	0692      	lsls	r2, r2, #26
 800430a:	d430      	bmi.n	800436e <_printf_common+0xba>
 800430c:	4649      	mov	r1, r9
 800430e:	4638      	mov	r0, r7
 8004310:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004314:	47c0      	blx	r8
 8004316:	3001      	adds	r0, #1
 8004318:	d023      	beq.n	8004362 <_printf_common+0xae>
 800431a:	6823      	ldr	r3, [r4, #0]
 800431c:	6922      	ldr	r2, [r4, #16]
 800431e:	f003 0306 	and.w	r3, r3, #6
 8004322:	2b04      	cmp	r3, #4
 8004324:	bf14      	ite	ne
 8004326:	2500      	movne	r5, #0
 8004328:	6833      	ldreq	r3, [r6, #0]
 800432a:	f04f 0600 	mov.w	r6, #0
 800432e:	bf08      	it	eq
 8004330:	68e5      	ldreq	r5, [r4, #12]
 8004332:	f104 041a 	add.w	r4, r4, #26
 8004336:	bf08      	it	eq
 8004338:	1aed      	subeq	r5, r5, r3
 800433a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800433e:	bf08      	it	eq
 8004340:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004344:	4293      	cmp	r3, r2
 8004346:	bfc4      	itt	gt
 8004348:	1a9b      	subgt	r3, r3, r2
 800434a:	18ed      	addgt	r5, r5, r3
 800434c:	42b5      	cmp	r5, r6
 800434e:	d11a      	bne.n	8004386 <_printf_common+0xd2>
 8004350:	2000      	movs	r0, #0
 8004352:	e008      	b.n	8004366 <_printf_common+0xb2>
 8004354:	2301      	movs	r3, #1
 8004356:	4652      	mov	r2, sl
 8004358:	4649      	mov	r1, r9
 800435a:	4638      	mov	r0, r7
 800435c:	47c0      	blx	r8
 800435e:	3001      	adds	r0, #1
 8004360:	d103      	bne.n	800436a <_printf_common+0xb6>
 8004362:	f04f 30ff 	mov.w	r0, #4294967295
 8004366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800436a:	3501      	adds	r5, #1
 800436c:	e7c1      	b.n	80042f2 <_printf_common+0x3e>
 800436e:	2030      	movs	r0, #48	; 0x30
 8004370:	18e1      	adds	r1, r4, r3
 8004372:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004376:	1c5a      	adds	r2, r3, #1
 8004378:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800437c:	4422      	add	r2, r4
 800437e:	3302      	adds	r3, #2
 8004380:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004384:	e7c2      	b.n	800430c <_printf_common+0x58>
 8004386:	2301      	movs	r3, #1
 8004388:	4622      	mov	r2, r4
 800438a:	4649      	mov	r1, r9
 800438c:	4638      	mov	r0, r7
 800438e:	47c0      	blx	r8
 8004390:	3001      	adds	r0, #1
 8004392:	d0e6      	beq.n	8004362 <_printf_common+0xae>
 8004394:	3601      	adds	r6, #1
 8004396:	e7d9      	b.n	800434c <_printf_common+0x98>

08004398 <_printf_i>:
 8004398:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800439c:	7e0f      	ldrb	r7, [r1, #24]
 800439e:	4691      	mov	r9, r2
 80043a0:	2f78      	cmp	r7, #120	; 0x78
 80043a2:	4680      	mov	r8, r0
 80043a4:	460c      	mov	r4, r1
 80043a6:	469a      	mov	sl, r3
 80043a8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80043aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80043ae:	d807      	bhi.n	80043c0 <_printf_i+0x28>
 80043b0:	2f62      	cmp	r7, #98	; 0x62
 80043b2:	d80a      	bhi.n	80043ca <_printf_i+0x32>
 80043b4:	2f00      	cmp	r7, #0
 80043b6:	f000 80d5 	beq.w	8004564 <_printf_i+0x1cc>
 80043ba:	2f58      	cmp	r7, #88	; 0x58
 80043bc:	f000 80c1 	beq.w	8004542 <_printf_i+0x1aa>
 80043c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80043c8:	e03a      	b.n	8004440 <_printf_i+0xa8>
 80043ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80043ce:	2b15      	cmp	r3, #21
 80043d0:	d8f6      	bhi.n	80043c0 <_printf_i+0x28>
 80043d2:	a101      	add	r1, pc, #4	; (adr r1, 80043d8 <_printf_i+0x40>)
 80043d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80043d8:	08004431 	.word	0x08004431
 80043dc:	08004445 	.word	0x08004445
 80043e0:	080043c1 	.word	0x080043c1
 80043e4:	080043c1 	.word	0x080043c1
 80043e8:	080043c1 	.word	0x080043c1
 80043ec:	080043c1 	.word	0x080043c1
 80043f0:	08004445 	.word	0x08004445
 80043f4:	080043c1 	.word	0x080043c1
 80043f8:	080043c1 	.word	0x080043c1
 80043fc:	080043c1 	.word	0x080043c1
 8004400:	080043c1 	.word	0x080043c1
 8004404:	0800454b 	.word	0x0800454b
 8004408:	08004471 	.word	0x08004471
 800440c:	08004505 	.word	0x08004505
 8004410:	080043c1 	.word	0x080043c1
 8004414:	080043c1 	.word	0x080043c1
 8004418:	0800456d 	.word	0x0800456d
 800441c:	080043c1 	.word	0x080043c1
 8004420:	08004471 	.word	0x08004471
 8004424:	080043c1 	.word	0x080043c1
 8004428:	080043c1 	.word	0x080043c1
 800442c:	0800450d 	.word	0x0800450d
 8004430:	682b      	ldr	r3, [r5, #0]
 8004432:	1d1a      	adds	r2, r3, #4
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	602a      	str	r2, [r5, #0]
 8004438:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800443c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004440:	2301      	movs	r3, #1
 8004442:	e0a0      	b.n	8004586 <_printf_i+0x1ee>
 8004444:	6820      	ldr	r0, [r4, #0]
 8004446:	682b      	ldr	r3, [r5, #0]
 8004448:	0607      	lsls	r7, r0, #24
 800444a:	f103 0104 	add.w	r1, r3, #4
 800444e:	6029      	str	r1, [r5, #0]
 8004450:	d501      	bpl.n	8004456 <_printf_i+0xbe>
 8004452:	681e      	ldr	r6, [r3, #0]
 8004454:	e003      	b.n	800445e <_printf_i+0xc6>
 8004456:	0646      	lsls	r6, r0, #25
 8004458:	d5fb      	bpl.n	8004452 <_printf_i+0xba>
 800445a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800445e:	2e00      	cmp	r6, #0
 8004460:	da03      	bge.n	800446a <_printf_i+0xd2>
 8004462:	232d      	movs	r3, #45	; 0x2d
 8004464:	4276      	negs	r6, r6
 8004466:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800446a:	230a      	movs	r3, #10
 800446c:	4859      	ldr	r0, [pc, #356]	; (80045d4 <_printf_i+0x23c>)
 800446e:	e012      	b.n	8004496 <_printf_i+0xfe>
 8004470:	682b      	ldr	r3, [r5, #0]
 8004472:	6820      	ldr	r0, [r4, #0]
 8004474:	1d19      	adds	r1, r3, #4
 8004476:	6029      	str	r1, [r5, #0]
 8004478:	0605      	lsls	r5, r0, #24
 800447a:	d501      	bpl.n	8004480 <_printf_i+0xe8>
 800447c:	681e      	ldr	r6, [r3, #0]
 800447e:	e002      	b.n	8004486 <_printf_i+0xee>
 8004480:	0641      	lsls	r1, r0, #25
 8004482:	d5fb      	bpl.n	800447c <_printf_i+0xe4>
 8004484:	881e      	ldrh	r6, [r3, #0]
 8004486:	2f6f      	cmp	r7, #111	; 0x6f
 8004488:	bf0c      	ite	eq
 800448a:	2308      	moveq	r3, #8
 800448c:	230a      	movne	r3, #10
 800448e:	4851      	ldr	r0, [pc, #324]	; (80045d4 <_printf_i+0x23c>)
 8004490:	2100      	movs	r1, #0
 8004492:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004496:	6865      	ldr	r5, [r4, #4]
 8004498:	2d00      	cmp	r5, #0
 800449a:	bfa8      	it	ge
 800449c:	6821      	ldrge	r1, [r4, #0]
 800449e:	60a5      	str	r5, [r4, #8]
 80044a0:	bfa4      	itt	ge
 80044a2:	f021 0104 	bicge.w	r1, r1, #4
 80044a6:	6021      	strge	r1, [r4, #0]
 80044a8:	b90e      	cbnz	r6, 80044ae <_printf_i+0x116>
 80044aa:	2d00      	cmp	r5, #0
 80044ac:	d04b      	beq.n	8004546 <_printf_i+0x1ae>
 80044ae:	4615      	mov	r5, r2
 80044b0:	fbb6 f1f3 	udiv	r1, r6, r3
 80044b4:	fb03 6711 	mls	r7, r3, r1, r6
 80044b8:	5dc7      	ldrb	r7, [r0, r7]
 80044ba:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80044be:	4637      	mov	r7, r6
 80044c0:	42bb      	cmp	r3, r7
 80044c2:	460e      	mov	r6, r1
 80044c4:	d9f4      	bls.n	80044b0 <_printf_i+0x118>
 80044c6:	2b08      	cmp	r3, #8
 80044c8:	d10b      	bne.n	80044e2 <_printf_i+0x14a>
 80044ca:	6823      	ldr	r3, [r4, #0]
 80044cc:	07de      	lsls	r6, r3, #31
 80044ce:	d508      	bpl.n	80044e2 <_printf_i+0x14a>
 80044d0:	6923      	ldr	r3, [r4, #16]
 80044d2:	6861      	ldr	r1, [r4, #4]
 80044d4:	4299      	cmp	r1, r3
 80044d6:	bfde      	ittt	le
 80044d8:	2330      	movle	r3, #48	; 0x30
 80044da:	f805 3c01 	strble.w	r3, [r5, #-1]
 80044de:	f105 35ff 	addle.w	r5, r5, #4294967295
 80044e2:	1b52      	subs	r2, r2, r5
 80044e4:	6122      	str	r2, [r4, #16]
 80044e6:	464b      	mov	r3, r9
 80044e8:	4621      	mov	r1, r4
 80044ea:	4640      	mov	r0, r8
 80044ec:	f8cd a000 	str.w	sl, [sp]
 80044f0:	aa03      	add	r2, sp, #12
 80044f2:	f7ff fedf 	bl	80042b4 <_printf_common>
 80044f6:	3001      	adds	r0, #1
 80044f8:	d14a      	bne.n	8004590 <_printf_i+0x1f8>
 80044fa:	f04f 30ff 	mov.w	r0, #4294967295
 80044fe:	b004      	add	sp, #16
 8004500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004504:	6823      	ldr	r3, [r4, #0]
 8004506:	f043 0320 	orr.w	r3, r3, #32
 800450a:	6023      	str	r3, [r4, #0]
 800450c:	2778      	movs	r7, #120	; 0x78
 800450e:	4832      	ldr	r0, [pc, #200]	; (80045d8 <_printf_i+0x240>)
 8004510:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004514:	6823      	ldr	r3, [r4, #0]
 8004516:	6829      	ldr	r1, [r5, #0]
 8004518:	061f      	lsls	r7, r3, #24
 800451a:	f851 6b04 	ldr.w	r6, [r1], #4
 800451e:	d402      	bmi.n	8004526 <_printf_i+0x18e>
 8004520:	065f      	lsls	r7, r3, #25
 8004522:	bf48      	it	mi
 8004524:	b2b6      	uxthmi	r6, r6
 8004526:	07df      	lsls	r7, r3, #31
 8004528:	bf48      	it	mi
 800452a:	f043 0320 	orrmi.w	r3, r3, #32
 800452e:	6029      	str	r1, [r5, #0]
 8004530:	bf48      	it	mi
 8004532:	6023      	strmi	r3, [r4, #0]
 8004534:	b91e      	cbnz	r6, 800453e <_printf_i+0x1a6>
 8004536:	6823      	ldr	r3, [r4, #0]
 8004538:	f023 0320 	bic.w	r3, r3, #32
 800453c:	6023      	str	r3, [r4, #0]
 800453e:	2310      	movs	r3, #16
 8004540:	e7a6      	b.n	8004490 <_printf_i+0xf8>
 8004542:	4824      	ldr	r0, [pc, #144]	; (80045d4 <_printf_i+0x23c>)
 8004544:	e7e4      	b.n	8004510 <_printf_i+0x178>
 8004546:	4615      	mov	r5, r2
 8004548:	e7bd      	b.n	80044c6 <_printf_i+0x12e>
 800454a:	682b      	ldr	r3, [r5, #0]
 800454c:	6826      	ldr	r6, [r4, #0]
 800454e:	1d18      	adds	r0, r3, #4
 8004550:	6961      	ldr	r1, [r4, #20]
 8004552:	6028      	str	r0, [r5, #0]
 8004554:	0635      	lsls	r5, r6, #24
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	d501      	bpl.n	800455e <_printf_i+0x1c6>
 800455a:	6019      	str	r1, [r3, #0]
 800455c:	e002      	b.n	8004564 <_printf_i+0x1cc>
 800455e:	0670      	lsls	r0, r6, #25
 8004560:	d5fb      	bpl.n	800455a <_printf_i+0x1c2>
 8004562:	8019      	strh	r1, [r3, #0]
 8004564:	2300      	movs	r3, #0
 8004566:	4615      	mov	r5, r2
 8004568:	6123      	str	r3, [r4, #16]
 800456a:	e7bc      	b.n	80044e6 <_printf_i+0x14e>
 800456c:	682b      	ldr	r3, [r5, #0]
 800456e:	2100      	movs	r1, #0
 8004570:	1d1a      	adds	r2, r3, #4
 8004572:	602a      	str	r2, [r5, #0]
 8004574:	681d      	ldr	r5, [r3, #0]
 8004576:	6862      	ldr	r2, [r4, #4]
 8004578:	4628      	mov	r0, r5
 800457a:	f000 f95d 	bl	8004838 <memchr>
 800457e:	b108      	cbz	r0, 8004584 <_printf_i+0x1ec>
 8004580:	1b40      	subs	r0, r0, r5
 8004582:	6060      	str	r0, [r4, #4]
 8004584:	6863      	ldr	r3, [r4, #4]
 8004586:	6123      	str	r3, [r4, #16]
 8004588:	2300      	movs	r3, #0
 800458a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800458e:	e7aa      	b.n	80044e6 <_printf_i+0x14e>
 8004590:	462a      	mov	r2, r5
 8004592:	4649      	mov	r1, r9
 8004594:	4640      	mov	r0, r8
 8004596:	6923      	ldr	r3, [r4, #16]
 8004598:	47d0      	blx	sl
 800459a:	3001      	adds	r0, #1
 800459c:	d0ad      	beq.n	80044fa <_printf_i+0x162>
 800459e:	6823      	ldr	r3, [r4, #0]
 80045a0:	079b      	lsls	r3, r3, #30
 80045a2:	d413      	bmi.n	80045cc <_printf_i+0x234>
 80045a4:	68e0      	ldr	r0, [r4, #12]
 80045a6:	9b03      	ldr	r3, [sp, #12]
 80045a8:	4298      	cmp	r0, r3
 80045aa:	bfb8      	it	lt
 80045ac:	4618      	movlt	r0, r3
 80045ae:	e7a6      	b.n	80044fe <_printf_i+0x166>
 80045b0:	2301      	movs	r3, #1
 80045b2:	4632      	mov	r2, r6
 80045b4:	4649      	mov	r1, r9
 80045b6:	4640      	mov	r0, r8
 80045b8:	47d0      	blx	sl
 80045ba:	3001      	adds	r0, #1
 80045bc:	d09d      	beq.n	80044fa <_printf_i+0x162>
 80045be:	3501      	adds	r5, #1
 80045c0:	68e3      	ldr	r3, [r4, #12]
 80045c2:	9903      	ldr	r1, [sp, #12]
 80045c4:	1a5b      	subs	r3, r3, r1
 80045c6:	42ab      	cmp	r3, r5
 80045c8:	dcf2      	bgt.n	80045b0 <_printf_i+0x218>
 80045ca:	e7eb      	b.n	80045a4 <_printf_i+0x20c>
 80045cc:	2500      	movs	r5, #0
 80045ce:	f104 0619 	add.w	r6, r4, #25
 80045d2:	e7f5      	b.n	80045c0 <_printf_i+0x228>
 80045d4:	08007e63 	.word	0x08007e63
 80045d8:	08007e74 	.word	0x08007e74

080045dc <__sflush_r>:
 80045dc:	898a      	ldrh	r2, [r1, #12]
 80045de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045e0:	4605      	mov	r5, r0
 80045e2:	0710      	lsls	r0, r2, #28
 80045e4:	460c      	mov	r4, r1
 80045e6:	d457      	bmi.n	8004698 <__sflush_r+0xbc>
 80045e8:	684b      	ldr	r3, [r1, #4]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	dc04      	bgt.n	80045f8 <__sflush_r+0x1c>
 80045ee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	dc01      	bgt.n	80045f8 <__sflush_r+0x1c>
 80045f4:	2000      	movs	r0, #0
 80045f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045fa:	2e00      	cmp	r6, #0
 80045fc:	d0fa      	beq.n	80045f4 <__sflush_r+0x18>
 80045fe:	2300      	movs	r3, #0
 8004600:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004604:	682f      	ldr	r7, [r5, #0]
 8004606:	6a21      	ldr	r1, [r4, #32]
 8004608:	602b      	str	r3, [r5, #0]
 800460a:	d032      	beq.n	8004672 <__sflush_r+0x96>
 800460c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800460e:	89a3      	ldrh	r3, [r4, #12]
 8004610:	075a      	lsls	r2, r3, #29
 8004612:	d505      	bpl.n	8004620 <__sflush_r+0x44>
 8004614:	6863      	ldr	r3, [r4, #4]
 8004616:	1ac0      	subs	r0, r0, r3
 8004618:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800461a:	b10b      	cbz	r3, 8004620 <__sflush_r+0x44>
 800461c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800461e:	1ac0      	subs	r0, r0, r3
 8004620:	2300      	movs	r3, #0
 8004622:	4602      	mov	r2, r0
 8004624:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004626:	4628      	mov	r0, r5
 8004628:	6a21      	ldr	r1, [r4, #32]
 800462a:	47b0      	blx	r6
 800462c:	1c43      	adds	r3, r0, #1
 800462e:	89a3      	ldrh	r3, [r4, #12]
 8004630:	d106      	bne.n	8004640 <__sflush_r+0x64>
 8004632:	6829      	ldr	r1, [r5, #0]
 8004634:	291d      	cmp	r1, #29
 8004636:	d82b      	bhi.n	8004690 <__sflush_r+0xb4>
 8004638:	4a28      	ldr	r2, [pc, #160]	; (80046dc <__sflush_r+0x100>)
 800463a:	410a      	asrs	r2, r1
 800463c:	07d6      	lsls	r6, r2, #31
 800463e:	d427      	bmi.n	8004690 <__sflush_r+0xb4>
 8004640:	2200      	movs	r2, #0
 8004642:	6062      	str	r2, [r4, #4]
 8004644:	6922      	ldr	r2, [r4, #16]
 8004646:	04d9      	lsls	r1, r3, #19
 8004648:	6022      	str	r2, [r4, #0]
 800464a:	d504      	bpl.n	8004656 <__sflush_r+0x7a>
 800464c:	1c42      	adds	r2, r0, #1
 800464e:	d101      	bne.n	8004654 <__sflush_r+0x78>
 8004650:	682b      	ldr	r3, [r5, #0]
 8004652:	b903      	cbnz	r3, 8004656 <__sflush_r+0x7a>
 8004654:	6560      	str	r0, [r4, #84]	; 0x54
 8004656:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004658:	602f      	str	r7, [r5, #0]
 800465a:	2900      	cmp	r1, #0
 800465c:	d0ca      	beq.n	80045f4 <__sflush_r+0x18>
 800465e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004662:	4299      	cmp	r1, r3
 8004664:	d002      	beq.n	800466c <__sflush_r+0x90>
 8004666:	4628      	mov	r0, r5
 8004668:	f7ff fc9a 	bl	8003fa0 <_free_r>
 800466c:	2000      	movs	r0, #0
 800466e:	6360      	str	r0, [r4, #52]	; 0x34
 8004670:	e7c1      	b.n	80045f6 <__sflush_r+0x1a>
 8004672:	2301      	movs	r3, #1
 8004674:	4628      	mov	r0, r5
 8004676:	47b0      	blx	r6
 8004678:	1c41      	adds	r1, r0, #1
 800467a:	d1c8      	bne.n	800460e <__sflush_r+0x32>
 800467c:	682b      	ldr	r3, [r5, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d0c5      	beq.n	800460e <__sflush_r+0x32>
 8004682:	2b1d      	cmp	r3, #29
 8004684:	d001      	beq.n	800468a <__sflush_r+0xae>
 8004686:	2b16      	cmp	r3, #22
 8004688:	d101      	bne.n	800468e <__sflush_r+0xb2>
 800468a:	602f      	str	r7, [r5, #0]
 800468c:	e7b2      	b.n	80045f4 <__sflush_r+0x18>
 800468e:	89a3      	ldrh	r3, [r4, #12]
 8004690:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004694:	81a3      	strh	r3, [r4, #12]
 8004696:	e7ae      	b.n	80045f6 <__sflush_r+0x1a>
 8004698:	690f      	ldr	r7, [r1, #16]
 800469a:	2f00      	cmp	r7, #0
 800469c:	d0aa      	beq.n	80045f4 <__sflush_r+0x18>
 800469e:	0793      	lsls	r3, r2, #30
 80046a0:	bf18      	it	ne
 80046a2:	2300      	movne	r3, #0
 80046a4:	680e      	ldr	r6, [r1, #0]
 80046a6:	bf08      	it	eq
 80046a8:	694b      	ldreq	r3, [r1, #20]
 80046aa:	1bf6      	subs	r6, r6, r7
 80046ac:	600f      	str	r7, [r1, #0]
 80046ae:	608b      	str	r3, [r1, #8]
 80046b0:	2e00      	cmp	r6, #0
 80046b2:	dd9f      	ble.n	80045f4 <__sflush_r+0x18>
 80046b4:	4633      	mov	r3, r6
 80046b6:	463a      	mov	r2, r7
 80046b8:	4628      	mov	r0, r5
 80046ba:	6a21      	ldr	r1, [r4, #32]
 80046bc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80046c0:	47e0      	blx	ip
 80046c2:	2800      	cmp	r0, #0
 80046c4:	dc06      	bgt.n	80046d4 <__sflush_r+0xf8>
 80046c6:	89a3      	ldrh	r3, [r4, #12]
 80046c8:	f04f 30ff 	mov.w	r0, #4294967295
 80046cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046d0:	81a3      	strh	r3, [r4, #12]
 80046d2:	e790      	b.n	80045f6 <__sflush_r+0x1a>
 80046d4:	4407      	add	r7, r0
 80046d6:	1a36      	subs	r6, r6, r0
 80046d8:	e7ea      	b.n	80046b0 <__sflush_r+0xd4>
 80046da:	bf00      	nop
 80046dc:	dfbffffe 	.word	0xdfbffffe

080046e0 <_fflush_r>:
 80046e0:	b538      	push	{r3, r4, r5, lr}
 80046e2:	690b      	ldr	r3, [r1, #16]
 80046e4:	4605      	mov	r5, r0
 80046e6:	460c      	mov	r4, r1
 80046e8:	b913      	cbnz	r3, 80046f0 <_fflush_r+0x10>
 80046ea:	2500      	movs	r5, #0
 80046ec:	4628      	mov	r0, r5
 80046ee:	bd38      	pop	{r3, r4, r5, pc}
 80046f0:	b118      	cbz	r0, 80046fa <_fflush_r+0x1a>
 80046f2:	6a03      	ldr	r3, [r0, #32]
 80046f4:	b90b      	cbnz	r3, 80046fa <_fflush_r+0x1a>
 80046f6:	f7ff fa4b 	bl	8003b90 <__sinit>
 80046fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d0f3      	beq.n	80046ea <_fflush_r+0xa>
 8004702:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004704:	07d0      	lsls	r0, r2, #31
 8004706:	d404      	bmi.n	8004712 <_fflush_r+0x32>
 8004708:	0599      	lsls	r1, r3, #22
 800470a:	d402      	bmi.n	8004712 <_fflush_r+0x32>
 800470c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800470e:	f7ff fc44 	bl	8003f9a <__retarget_lock_acquire_recursive>
 8004712:	4628      	mov	r0, r5
 8004714:	4621      	mov	r1, r4
 8004716:	f7ff ff61 	bl	80045dc <__sflush_r>
 800471a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800471c:	4605      	mov	r5, r0
 800471e:	07da      	lsls	r2, r3, #31
 8004720:	d4e4      	bmi.n	80046ec <_fflush_r+0xc>
 8004722:	89a3      	ldrh	r3, [r4, #12]
 8004724:	059b      	lsls	r3, r3, #22
 8004726:	d4e1      	bmi.n	80046ec <_fflush_r+0xc>
 8004728:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800472a:	f7ff fc37 	bl	8003f9c <__retarget_lock_release_recursive>
 800472e:	e7dd      	b.n	80046ec <_fflush_r+0xc>

08004730 <__swhatbuf_r>:
 8004730:	b570      	push	{r4, r5, r6, lr}
 8004732:	460c      	mov	r4, r1
 8004734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004738:	4615      	mov	r5, r2
 800473a:	2900      	cmp	r1, #0
 800473c:	461e      	mov	r6, r3
 800473e:	b096      	sub	sp, #88	; 0x58
 8004740:	da0c      	bge.n	800475c <__swhatbuf_r+0x2c>
 8004742:	89a3      	ldrh	r3, [r4, #12]
 8004744:	2100      	movs	r1, #0
 8004746:	f013 0f80 	tst.w	r3, #128	; 0x80
 800474a:	bf0c      	ite	eq
 800474c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004750:	2340      	movne	r3, #64	; 0x40
 8004752:	2000      	movs	r0, #0
 8004754:	6031      	str	r1, [r6, #0]
 8004756:	602b      	str	r3, [r5, #0]
 8004758:	b016      	add	sp, #88	; 0x58
 800475a:	bd70      	pop	{r4, r5, r6, pc}
 800475c:	466a      	mov	r2, sp
 800475e:	f000 f849 	bl	80047f4 <_fstat_r>
 8004762:	2800      	cmp	r0, #0
 8004764:	dbed      	blt.n	8004742 <__swhatbuf_r+0x12>
 8004766:	9901      	ldr	r1, [sp, #4]
 8004768:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800476c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004770:	4259      	negs	r1, r3
 8004772:	4159      	adcs	r1, r3
 8004774:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004778:	e7eb      	b.n	8004752 <__swhatbuf_r+0x22>

0800477a <__smakebuf_r>:
 800477a:	898b      	ldrh	r3, [r1, #12]
 800477c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800477e:	079d      	lsls	r5, r3, #30
 8004780:	4606      	mov	r6, r0
 8004782:	460c      	mov	r4, r1
 8004784:	d507      	bpl.n	8004796 <__smakebuf_r+0x1c>
 8004786:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800478a:	6023      	str	r3, [r4, #0]
 800478c:	6123      	str	r3, [r4, #16]
 800478e:	2301      	movs	r3, #1
 8004790:	6163      	str	r3, [r4, #20]
 8004792:	b002      	add	sp, #8
 8004794:	bd70      	pop	{r4, r5, r6, pc}
 8004796:	466a      	mov	r2, sp
 8004798:	ab01      	add	r3, sp, #4
 800479a:	f7ff ffc9 	bl	8004730 <__swhatbuf_r>
 800479e:	9900      	ldr	r1, [sp, #0]
 80047a0:	4605      	mov	r5, r0
 80047a2:	4630      	mov	r0, r6
 80047a4:	f7ff f8dc 	bl	8003960 <_malloc_r>
 80047a8:	b948      	cbnz	r0, 80047be <__smakebuf_r+0x44>
 80047aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047ae:	059a      	lsls	r2, r3, #22
 80047b0:	d4ef      	bmi.n	8004792 <__smakebuf_r+0x18>
 80047b2:	f023 0303 	bic.w	r3, r3, #3
 80047b6:	f043 0302 	orr.w	r3, r3, #2
 80047ba:	81a3      	strh	r3, [r4, #12]
 80047bc:	e7e3      	b.n	8004786 <__smakebuf_r+0xc>
 80047be:	89a3      	ldrh	r3, [r4, #12]
 80047c0:	6020      	str	r0, [r4, #0]
 80047c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047c6:	81a3      	strh	r3, [r4, #12]
 80047c8:	9b00      	ldr	r3, [sp, #0]
 80047ca:	6120      	str	r0, [r4, #16]
 80047cc:	6163      	str	r3, [r4, #20]
 80047ce:	9b01      	ldr	r3, [sp, #4]
 80047d0:	b15b      	cbz	r3, 80047ea <__smakebuf_r+0x70>
 80047d2:	4630      	mov	r0, r6
 80047d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047d8:	f000 f81e 	bl	8004818 <_isatty_r>
 80047dc:	b128      	cbz	r0, 80047ea <__smakebuf_r+0x70>
 80047de:	89a3      	ldrh	r3, [r4, #12]
 80047e0:	f023 0303 	bic.w	r3, r3, #3
 80047e4:	f043 0301 	orr.w	r3, r3, #1
 80047e8:	81a3      	strh	r3, [r4, #12]
 80047ea:	89a3      	ldrh	r3, [r4, #12]
 80047ec:	431d      	orrs	r5, r3
 80047ee:	81a5      	strh	r5, [r4, #12]
 80047f0:	e7cf      	b.n	8004792 <__smakebuf_r+0x18>
	...

080047f4 <_fstat_r>:
 80047f4:	b538      	push	{r3, r4, r5, lr}
 80047f6:	2300      	movs	r3, #0
 80047f8:	4d06      	ldr	r5, [pc, #24]	; (8004814 <_fstat_r+0x20>)
 80047fa:	4604      	mov	r4, r0
 80047fc:	4608      	mov	r0, r1
 80047fe:	4611      	mov	r1, r2
 8004800:	602b      	str	r3, [r5, #0]
 8004802:	f7fc ff98 	bl	8001736 <_fstat>
 8004806:	1c43      	adds	r3, r0, #1
 8004808:	d102      	bne.n	8004810 <_fstat_r+0x1c>
 800480a:	682b      	ldr	r3, [r5, #0]
 800480c:	b103      	cbz	r3, 8004810 <_fstat_r+0x1c>
 800480e:	6023      	str	r3, [r4, #0]
 8004810:	bd38      	pop	{r3, r4, r5, pc}
 8004812:	bf00      	nop
 8004814:	200002e8 	.word	0x200002e8

08004818 <_isatty_r>:
 8004818:	b538      	push	{r3, r4, r5, lr}
 800481a:	2300      	movs	r3, #0
 800481c:	4d05      	ldr	r5, [pc, #20]	; (8004834 <_isatty_r+0x1c>)
 800481e:	4604      	mov	r4, r0
 8004820:	4608      	mov	r0, r1
 8004822:	602b      	str	r3, [r5, #0]
 8004824:	f7fc ff96 	bl	8001754 <_isatty>
 8004828:	1c43      	adds	r3, r0, #1
 800482a:	d102      	bne.n	8004832 <_isatty_r+0x1a>
 800482c:	682b      	ldr	r3, [r5, #0]
 800482e:	b103      	cbz	r3, 8004832 <_isatty_r+0x1a>
 8004830:	6023      	str	r3, [r4, #0]
 8004832:	bd38      	pop	{r3, r4, r5, pc}
 8004834:	200002e8 	.word	0x200002e8

08004838 <memchr>:
 8004838:	4603      	mov	r3, r0
 800483a:	b510      	push	{r4, lr}
 800483c:	b2c9      	uxtb	r1, r1
 800483e:	4402      	add	r2, r0
 8004840:	4293      	cmp	r3, r2
 8004842:	4618      	mov	r0, r3
 8004844:	d101      	bne.n	800484a <memchr+0x12>
 8004846:	2000      	movs	r0, #0
 8004848:	e003      	b.n	8004852 <memchr+0x1a>
 800484a:	7804      	ldrb	r4, [r0, #0]
 800484c:	3301      	adds	r3, #1
 800484e:	428c      	cmp	r4, r1
 8004850:	d1f6      	bne.n	8004840 <memchr+0x8>
 8004852:	bd10      	pop	{r4, pc}

08004854 <_init>:
 8004854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004856:	bf00      	nop
 8004858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800485a:	bc08      	pop	{r3}
 800485c:	469e      	mov	lr, r3
 800485e:	4770      	bx	lr

08004860 <_fini>:
 8004860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004862:	bf00      	nop
 8004864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004866:	bc08      	pop	{r3}
 8004868:	469e      	mov	lr, r3
 800486a:	4770      	bx	lr

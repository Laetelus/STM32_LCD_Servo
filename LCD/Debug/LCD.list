
LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005160  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  0800526c  0800526c  0001526c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800565c  0800565c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800565c  0800565c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800565c  0800565c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800565c  0800565c  0001565c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005660  08005660  00015660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005664  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  20000078  080056dc  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  080056dc  000202f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ee6c  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000291c  00000000  00000000  0002ef50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fe8  00000000  00000000  00031870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c4a  00000000  00000000  00032858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019fe7  00000000  00000000  000334a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001415a  00000000  00000000  0004d489  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008eea5  00000000  00000000  000615e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004bb0  00000000  00000000  000f0488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000f5038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08005254 	.word	0x08005254

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08005254 	.word	0x08005254

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__gedf2>:
 80008e8:	f04f 3cff 	mov.w	ip, #4294967295
 80008ec:	e006      	b.n	80008fc <__cmpdf2+0x4>
 80008ee:	bf00      	nop

080008f0 <__ledf2>:
 80008f0:	f04f 0c01 	mov.w	ip, #1
 80008f4:	e002      	b.n	80008fc <__cmpdf2+0x4>
 80008f6:	bf00      	nop

080008f8 <__cmpdf2>:
 80008f8:	f04f 0c01 	mov.w	ip, #1
 80008fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000900:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000908:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800090c:	bf18      	it	ne
 800090e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000912:	d01b      	beq.n	800094c <__cmpdf2+0x54>
 8000914:	b001      	add	sp, #4
 8000916:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091a:	bf0c      	ite	eq
 800091c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000920:	ea91 0f03 	teqne	r1, r3
 8000924:	bf02      	ittt	eq
 8000926:	ea90 0f02 	teqeq	r0, r2
 800092a:	2000      	moveq	r0, #0
 800092c:	4770      	bxeq	lr
 800092e:	f110 0f00 	cmn.w	r0, #0
 8000932:	ea91 0f03 	teq	r1, r3
 8000936:	bf58      	it	pl
 8000938:	4299      	cmppl	r1, r3
 800093a:	bf08      	it	eq
 800093c:	4290      	cmpeq	r0, r2
 800093e:	bf2c      	ite	cs
 8000940:	17d8      	asrcs	r0, r3, #31
 8000942:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000946:	f040 0001 	orr.w	r0, r0, #1
 800094a:	4770      	bx	lr
 800094c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000950:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000954:	d102      	bne.n	800095c <__cmpdf2+0x64>
 8000956:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095a:	d107      	bne.n	800096c <__cmpdf2+0x74>
 800095c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000960:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000964:	d1d6      	bne.n	8000914 <__cmpdf2+0x1c>
 8000966:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096a:	d0d3      	beq.n	8000914 <__cmpdf2+0x1c>
 800096c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop

08000974 <__aeabi_cdrcmple>:
 8000974:	4684      	mov	ip, r0
 8000976:	4610      	mov	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	468c      	mov	ip, r1
 800097c:	4619      	mov	r1, r3
 800097e:	4663      	mov	r3, ip
 8000980:	e000      	b.n	8000984 <__aeabi_cdcmpeq>
 8000982:	bf00      	nop

08000984 <__aeabi_cdcmpeq>:
 8000984:	b501      	push	{r0, lr}
 8000986:	f7ff ffb7 	bl	80008f8 <__cmpdf2>
 800098a:	2800      	cmp	r0, #0
 800098c:	bf48      	it	mi
 800098e:	f110 0f00 	cmnmi.w	r0, #0
 8000992:	bd01      	pop	{r0, pc}

08000994 <__aeabi_dcmpeq>:
 8000994:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000998:	f7ff fff4 	bl	8000984 <__aeabi_cdcmpeq>
 800099c:	bf0c      	ite	eq
 800099e:	2001      	moveq	r0, #1
 80009a0:	2000      	movne	r0, #0
 80009a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a6:	bf00      	nop

080009a8 <__aeabi_dcmplt>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff ffea 	bl	8000984 <__aeabi_cdcmpeq>
 80009b0:	bf34      	ite	cc
 80009b2:	2001      	movcc	r0, #1
 80009b4:	2000      	movcs	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmple>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffe0 	bl	8000984 <__aeabi_cdcmpeq>
 80009c4:	bf94      	ite	ls
 80009c6:	2001      	movls	r0, #1
 80009c8:	2000      	movhi	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmpge>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffce 	bl	8000974 <__aeabi_cdrcmple>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpgt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffc4 	bl	8000974 <__aeabi_cdrcmple>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpun>:
 80009f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d102      	bne.n	8000a08 <__aeabi_dcmpun+0x10>
 8000a02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a06:	d10a      	bne.n	8000a1e <__aeabi_dcmpun+0x26>
 8000a08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__aeabi_dcmpun+0x20>
 8000a12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a16:	d102      	bne.n	8000a1e <__aeabi_dcmpun+0x26>
 8000a18:	f04f 0000 	mov.w	r0, #0
 8000a1c:	4770      	bx	lr
 8000a1e:	f04f 0001 	mov.w	r0, #1
 8000a22:	4770      	bx	lr

08000a24 <__aeabi_d2iz>:
 8000a24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a2c:	d215      	bcs.n	8000a5a <__aeabi_d2iz+0x36>
 8000a2e:	d511      	bpl.n	8000a54 <__aeabi_d2iz+0x30>
 8000a30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a38:	d912      	bls.n	8000a60 <__aeabi_d2iz+0x3c>
 8000a3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	bf18      	it	ne
 8000a50:	4240      	negne	r0, r0
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d105      	bne.n	8000a6c <__aeabi_d2iz+0x48>
 8000a60:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a64:	bf08      	it	eq
 8000a66:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6a:	4770      	bx	lr
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <__aeabi_frsub>:
 8000a74:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a78:	e002      	b.n	8000a80 <__addsf3>
 8000a7a:	bf00      	nop

08000a7c <__aeabi_fsub>:
 8000a7c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a80 <__addsf3>:
 8000a80:	0042      	lsls	r2, r0, #1
 8000a82:	bf1f      	itttt	ne
 8000a84:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a88:	ea92 0f03 	teqne	r2, r3
 8000a8c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a90:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a94:	d06a      	beq.n	8000b6c <__addsf3+0xec>
 8000a96:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a9a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a9e:	bfc1      	itttt	gt
 8000aa0:	18d2      	addgt	r2, r2, r3
 8000aa2:	4041      	eorgt	r1, r0
 8000aa4:	4048      	eorgt	r0, r1
 8000aa6:	4041      	eorgt	r1, r0
 8000aa8:	bfb8      	it	lt
 8000aaa:	425b      	neglt	r3, r3
 8000aac:	2b19      	cmp	r3, #25
 8000aae:	bf88      	it	hi
 8000ab0:	4770      	bxhi	lr
 8000ab2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ab6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000abe:	bf18      	it	ne
 8000ac0:	4240      	negne	r0, r0
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000aca:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ace:	bf18      	it	ne
 8000ad0:	4249      	negne	r1, r1
 8000ad2:	ea92 0f03 	teq	r2, r3
 8000ad6:	d03f      	beq.n	8000b58 <__addsf3+0xd8>
 8000ad8:	f1a2 0201 	sub.w	r2, r2, #1
 8000adc:	fa41 fc03 	asr.w	ip, r1, r3
 8000ae0:	eb10 000c 	adds.w	r0, r0, ip
 8000ae4:	f1c3 0320 	rsb	r3, r3, #32
 8000ae8:	fa01 f103 	lsl.w	r1, r1, r3
 8000aec:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000af0:	d502      	bpl.n	8000af8 <__addsf3+0x78>
 8000af2:	4249      	negs	r1, r1
 8000af4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000af8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000afc:	d313      	bcc.n	8000b26 <__addsf3+0xa6>
 8000afe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b02:	d306      	bcc.n	8000b12 <__addsf3+0x92>
 8000b04:	0840      	lsrs	r0, r0, #1
 8000b06:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b0a:	f102 0201 	add.w	r2, r2, #1
 8000b0e:	2afe      	cmp	r2, #254	; 0xfe
 8000b10:	d251      	bcs.n	8000bb6 <__addsf3+0x136>
 8000b12:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b1a:	bf08      	it	eq
 8000b1c:	f020 0001 	biceq.w	r0, r0, #1
 8000b20:	ea40 0003 	orr.w	r0, r0, r3
 8000b24:	4770      	bx	lr
 8000b26:	0049      	lsls	r1, r1, #1
 8000b28:	eb40 0000 	adc.w	r0, r0, r0
 8000b2c:	3a01      	subs	r2, #1
 8000b2e:	bf28      	it	cs
 8000b30:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b34:	d2ed      	bcs.n	8000b12 <__addsf3+0x92>
 8000b36:	fab0 fc80 	clz	ip, r0
 8000b3a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b3e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b42:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b46:	bfaa      	itet	ge
 8000b48:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b4c:	4252      	neglt	r2, r2
 8000b4e:	4318      	orrge	r0, r3
 8000b50:	bfbc      	itt	lt
 8000b52:	40d0      	lsrlt	r0, r2
 8000b54:	4318      	orrlt	r0, r3
 8000b56:	4770      	bx	lr
 8000b58:	f092 0f00 	teq	r2, #0
 8000b5c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b60:	bf06      	itte	eq
 8000b62:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b66:	3201      	addeq	r2, #1
 8000b68:	3b01      	subne	r3, #1
 8000b6a:	e7b5      	b.n	8000ad8 <__addsf3+0x58>
 8000b6c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b70:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b74:	bf18      	it	ne
 8000b76:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b7a:	d021      	beq.n	8000bc0 <__addsf3+0x140>
 8000b7c:	ea92 0f03 	teq	r2, r3
 8000b80:	d004      	beq.n	8000b8c <__addsf3+0x10c>
 8000b82:	f092 0f00 	teq	r2, #0
 8000b86:	bf08      	it	eq
 8000b88:	4608      	moveq	r0, r1
 8000b8a:	4770      	bx	lr
 8000b8c:	ea90 0f01 	teq	r0, r1
 8000b90:	bf1c      	itt	ne
 8000b92:	2000      	movne	r0, #0
 8000b94:	4770      	bxne	lr
 8000b96:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b9a:	d104      	bne.n	8000ba6 <__addsf3+0x126>
 8000b9c:	0040      	lsls	r0, r0, #1
 8000b9e:	bf28      	it	cs
 8000ba0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ba4:	4770      	bx	lr
 8000ba6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000baa:	bf3c      	itt	cc
 8000bac:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bb0:	4770      	bxcc	lr
 8000bb2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bb6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bbe:	4770      	bx	lr
 8000bc0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bc4:	bf16      	itet	ne
 8000bc6:	4608      	movne	r0, r1
 8000bc8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bcc:	4601      	movne	r1, r0
 8000bce:	0242      	lsls	r2, r0, #9
 8000bd0:	bf06      	itte	eq
 8000bd2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bd6:	ea90 0f01 	teqeq	r0, r1
 8000bda:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bde:	4770      	bx	lr

08000be0 <__aeabi_ui2f>:
 8000be0:	f04f 0300 	mov.w	r3, #0
 8000be4:	e004      	b.n	8000bf0 <__aeabi_i2f+0x8>
 8000be6:	bf00      	nop

08000be8 <__aeabi_i2f>:
 8000be8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bec:	bf48      	it	mi
 8000bee:	4240      	negmi	r0, r0
 8000bf0:	ea5f 0c00 	movs.w	ip, r0
 8000bf4:	bf08      	it	eq
 8000bf6:	4770      	bxeq	lr
 8000bf8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bfc:	4601      	mov	r1, r0
 8000bfe:	f04f 0000 	mov.w	r0, #0
 8000c02:	e01c      	b.n	8000c3e <__aeabi_l2f+0x2a>

08000c04 <__aeabi_ul2f>:
 8000c04:	ea50 0201 	orrs.w	r2, r0, r1
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f04f 0300 	mov.w	r3, #0
 8000c10:	e00a      	b.n	8000c28 <__aeabi_l2f+0x14>
 8000c12:	bf00      	nop

08000c14 <__aeabi_l2f>:
 8000c14:	ea50 0201 	orrs.w	r2, r0, r1
 8000c18:	bf08      	it	eq
 8000c1a:	4770      	bxeq	lr
 8000c1c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c20:	d502      	bpl.n	8000c28 <__aeabi_l2f+0x14>
 8000c22:	4240      	negs	r0, r0
 8000c24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c28:	ea5f 0c01 	movs.w	ip, r1
 8000c2c:	bf02      	ittt	eq
 8000c2e:	4684      	moveq	ip, r0
 8000c30:	4601      	moveq	r1, r0
 8000c32:	2000      	moveq	r0, #0
 8000c34:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c38:	bf08      	it	eq
 8000c3a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c3e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c42:	fabc f28c 	clz	r2, ip
 8000c46:	3a08      	subs	r2, #8
 8000c48:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c4c:	db10      	blt.n	8000c70 <__aeabi_l2f+0x5c>
 8000c4e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c52:	4463      	add	r3, ip
 8000c54:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c58:	f1c2 0220 	rsb	r2, r2, #32
 8000c5c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c60:	fa20 f202 	lsr.w	r2, r0, r2
 8000c64:	eb43 0002 	adc.w	r0, r3, r2
 8000c68:	bf08      	it	eq
 8000c6a:	f020 0001 	biceq.w	r0, r0, #1
 8000c6e:	4770      	bx	lr
 8000c70:	f102 0220 	add.w	r2, r2, #32
 8000c74:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c78:	f1c2 0220 	rsb	r2, r2, #32
 8000c7c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c80:	fa21 f202 	lsr.w	r2, r1, r2
 8000c84:	eb43 0002 	adc.w	r0, r3, r2
 8000c88:	bf08      	it	eq
 8000c8a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c8e:	4770      	bx	lr

08000c90 <__aeabi_fmul>:
 8000c90:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c94:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c98:	bf1e      	ittt	ne
 8000c9a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c9e:	ea92 0f0c 	teqne	r2, ip
 8000ca2:	ea93 0f0c 	teqne	r3, ip
 8000ca6:	d06f      	beq.n	8000d88 <__aeabi_fmul+0xf8>
 8000ca8:	441a      	add	r2, r3
 8000caa:	ea80 0c01 	eor.w	ip, r0, r1
 8000cae:	0240      	lsls	r0, r0, #9
 8000cb0:	bf18      	it	ne
 8000cb2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cb6:	d01e      	beq.n	8000cf6 <__aeabi_fmul+0x66>
 8000cb8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cbc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cc0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cc4:	fba0 3101 	umull	r3, r1, r0, r1
 8000cc8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ccc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cd0:	bf3e      	ittt	cc
 8000cd2:	0049      	lslcc	r1, r1, #1
 8000cd4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cd8:	005b      	lslcc	r3, r3, #1
 8000cda:	ea40 0001 	orr.w	r0, r0, r1
 8000cde:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000ce2:	2afd      	cmp	r2, #253	; 0xfd
 8000ce4:	d81d      	bhi.n	8000d22 <__aeabi_fmul+0x92>
 8000ce6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cee:	bf08      	it	eq
 8000cf0:	f020 0001 	biceq.w	r0, r0, #1
 8000cf4:	4770      	bx	lr
 8000cf6:	f090 0f00 	teq	r0, #0
 8000cfa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000cfe:	bf08      	it	eq
 8000d00:	0249      	lsleq	r1, r1, #9
 8000d02:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d06:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d0a:	3a7f      	subs	r2, #127	; 0x7f
 8000d0c:	bfc2      	ittt	gt
 8000d0e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d12:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d16:	4770      	bxgt	lr
 8000d18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d1c:	f04f 0300 	mov.w	r3, #0
 8000d20:	3a01      	subs	r2, #1
 8000d22:	dc5d      	bgt.n	8000de0 <__aeabi_fmul+0x150>
 8000d24:	f112 0f19 	cmn.w	r2, #25
 8000d28:	bfdc      	itt	le
 8000d2a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d2e:	4770      	bxle	lr
 8000d30:	f1c2 0200 	rsb	r2, r2, #0
 8000d34:	0041      	lsls	r1, r0, #1
 8000d36:	fa21 f102 	lsr.w	r1, r1, r2
 8000d3a:	f1c2 0220 	rsb	r2, r2, #32
 8000d3e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d42:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d46:	f140 0000 	adc.w	r0, r0, #0
 8000d4a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d4e:	bf08      	it	eq
 8000d50:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d54:	4770      	bx	lr
 8000d56:	f092 0f00 	teq	r2, #0
 8000d5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d5e:	bf02      	ittt	eq
 8000d60:	0040      	lsleq	r0, r0, #1
 8000d62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d66:	3a01      	subeq	r2, #1
 8000d68:	d0f9      	beq.n	8000d5e <__aeabi_fmul+0xce>
 8000d6a:	ea40 000c 	orr.w	r0, r0, ip
 8000d6e:	f093 0f00 	teq	r3, #0
 8000d72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d76:	bf02      	ittt	eq
 8000d78:	0049      	lsleq	r1, r1, #1
 8000d7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d7e:	3b01      	subeq	r3, #1
 8000d80:	d0f9      	beq.n	8000d76 <__aeabi_fmul+0xe6>
 8000d82:	ea41 010c 	orr.w	r1, r1, ip
 8000d86:	e78f      	b.n	8000ca8 <__aeabi_fmul+0x18>
 8000d88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d8c:	ea92 0f0c 	teq	r2, ip
 8000d90:	bf18      	it	ne
 8000d92:	ea93 0f0c 	teqne	r3, ip
 8000d96:	d00a      	beq.n	8000dae <__aeabi_fmul+0x11e>
 8000d98:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d9c:	bf18      	it	ne
 8000d9e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000da2:	d1d8      	bne.n	8000d56 <__aeabi_fmul+0xc6>
 8000da4:	ea80 0001 	eor.w	r0, r0, r1
 8000da8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dac:	4770      	bx	lr
 8000dae:	f090 0f00 	teq	r0, #0
 8000db2:	bf17      	itett	ne
 8000db4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000db8:	4608      	moveq	r0, r1
 8000dba:	f091 0f00 	teqne	r1, #0
 8000dbe:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dc2:	d014      	beq.n	8000dee <__aeabi_fmul+0x15e>
 8000dc4:	ea92 0f0c 	teq	r2, ip
 8000dc8:	d101      	bne.n	8000dce <__aeabi_fmul+0x13e>
 8000dca:	0242      	lsls	r2, r0, #9
 8000dcc:	d10f      	bne.n	8000dee <__aeabi_fmul+0x15e>
 8000dce:	ea93 0f0c 	teq	r3, ip
 8000dd2:	d103      	bne.n	8000ddc <__aeabi_fmul+0x14c>
 8000dd4:	024b      	lsls	r3, r1, #9
 8000dd6:	bf18      	it	ne
 8000dd8:	4608      	movne	r0, r1
 8000dda:	d108      	bne.n	8000dee <__aeabi_fmul+0x15e>
 8000ddc:	ea80 0001 	eor.w	r0, r0, r1
 8000de0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000de4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000de8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dec:	4770      	bx	lr
 8000dee:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000df2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000df6:	4770      	bx	lr

08000df8 <__aeabi_fdiv>:
 8000df8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dfc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e00:	bf1e      	ittt	ne
 8000e02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e06:	ea92 0f0c 	teqne	r2, ip
 8000e0a:	ea93 0f0c 	teqne	r3, ip
 8000e0e:	d069      	beq.n	8000ee4 <__aeabi_fdiv+0xec>
 8000e10:	eba2 0203 	sub.w	r2, r2, r3
 8000e14:	ea80 0c01 	eor.w	ip, r0, r1
 8000e18:	0249      	lsls	r1, r1, #9
 8000e1a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e1e:	d037      	beq.n	8000e90 <__aeabi_fdiv+0x98>
 8000e20:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e24:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e28:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e2c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e30:	428b      	cmp	r3, r1
 8000e32:	bf38      	it	cc
 8000e34:	005b      	lslcc	r3, r3, #1
 8000e36:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e3a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	bf24      	itt	cs
 8000e42:	1a5b      	subcs	r3, r3, r1
 8000e44:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e48:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e4c:	bf24      	itt	cs
 8000e4e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e52:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e56:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e5a:	bf24      	itt	cs
 8000e5c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e60:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e64:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e68:	bf24      	itt	cs
 8000e6a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e6e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e72:	011b      	lsls	r3, r3, #4
 8000e74:	bf18      	it	ne
 8000e76:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e7a:	d1e0      	bne.n	8000e3e <__aeabi_fdiv+0x46>
 8000e7c:	2afd      	cmp	r2, #253	; 0xfd
 8000e7e:	f63f af50 	bhi.w	8000d22 <__aeabi_fmul+0x92>
 8000e82:	428b      	cmp	r3, r1
 8000e84:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e88:	bf08      	it	eq
 8000e8a:	f020 0001 	biceq.w	r0, r0, #1
 8000e8e:	4770      	bx	lr
 8000e90:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e94:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e98:	327f      	adds	r2, #127	; 0x7f
 8000e9a:	bfc2      	ittt	gt
 8000e9c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ea0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ea4:	4770      	bxgt	lr
 8000ea6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eaa:	f04f 0300 	mov.w	r3, #0
 8000eae:	3a01      	subs	r2, #1
 8000eb0:	e737      	b.n	8000d22 <__aeabi_fmul+0x92>
 8000eb2:	f092 0f00 	teq	r2, #0
 8000eb6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eba:	bf02      	ittt	eq
 8000ebc:	0040      	lsleq	r0, r0, #1
 8000ebe:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ec2:	3a01      	subeq	r2, #1
 8000ec4:	d0f9      	beq.n	8000eba <__aeabi_fdiv+0xc2>
 8000ec6:	ea40 000c 	orr.w	r0, r0, ip
 8000eca:	f093 0f00 	teq	r3, #0
 8000ece:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ed2:	bf02      	ittt	eq
 8000ed4:	0049      	lsleq	r1, r1, #1
 8000ed6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eda:	3b01      	subeq	r3, #1
 8000edc:	d0f9      	beq.n	8000ed2 <__aeabi_fdiv+0xda>
 8000ede:	ea41 010c 	orr.w	r1, r1, ip
 8000ee2:	e795      	b.n	8000e10 <__aeabi_fdiv+0x18>
 8000ee4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ee8:	ea92 0f0c 	teq	r2, ip
 8000eec:	d108      	bne.n	8000f00 <__aeabi_fdiv+0x108>
 8000eee:	0242      	lsls	r2, r0, #9
 8000ef0:	f47f af7d 	bne.w	8000dee <__aeabi_fmul+0x15e>
 8000ef4:	ea93 0f0c 	teq	r3, ip
 8000ef8:	f47f af70 	bne.w	8000ddc <__aeabi_fmul+0x14c>
 8000efc:	4608      	mov	r0, r1
 8000efe:	e776      	b.n	8000dee <__aeabi_fmul+0x15e>
 8000f00:	ea93 0f0c 	teq	r3, ip
 8000f04:	d104      	bne.n	8000f10 <__aeabi_fdiv+0x118>
 8000f06:	024b      	lsls	r3, r1, #9
 8000f08:	f43f af4c 	beq.w	8000da4 <__aeabi_fmul+0x114>
 8000f0c:	4608      	mov	r0, r1
 8000f0e:	e76e      	b.n	8000dee <__aeabi_fmul+0x15e>
 8000f10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f14:	bf18      	it	ne
 8000f16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f1a:	d1ca      	bne.n	8000eb2 <__aeabi_fdiv+0xba>
 8000f1c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f20:	f47f af5c 	bne.w	8000ddc <__aeabi_fmul+0x14c>
 8000f24:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f28:	f47f af3c 	bne.w	8000da4 <__aeabi_fmul+0x114>
 8000f2c:	e75f      	b.n	8000dee <__aeabi_fmul+0x15e>
 8000f2e:	bf00      	nop

08000f30 <DEV_SPI_WRite>:
	HAL_Delay(xms);
}


void DEV_SPI_WRite(UBYTE _dat)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&_dat, 1, 500);
 8000f3a:	1df9      	adds	r1, r7, #7
 8000f3c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f40:	2201      	movs	r2, #1
 8000f42:	4803      	ldr	r0, [pc, #12]	; (8000f50 <DEV_SPI_WRite+0x20>)
 8000f44:	f002 fa08 	bl	8003358 <HAL_SPI_Transmit>
}
 8000f48:	bf00      	nop
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	200000bc 	.word	0x200000bc

08000f54 <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
    DEV_Digital_Write(DEV_DC_PIN, 1);
 8000f58:	2201      	movs	r2, #1
 8000f5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f5e:	480a      	ldr	r0, [pc, #40]	; (8000f88 <DEV_Module_Init+0x34>)
 8000f60:	f001 fd4e 	bl	8002a00 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_CS_PIN, 1);
 8000f64:	2201      	movs	r2, #1
 8000f66:	2140      	movs	r1, #64	; 0x40
 8000f68:	4808      	ldr	r0, [pc, #32]	; (8000f8c <DEV_Module_Init+0x38>)
 8000f6a:	f001 fd49 	bl	8002a00 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_RST_PIN, 1);
 8000f6e:	2201      	movs	r2, #1
 8000f70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f74:	4804      	ldr	r0, [pc, #16]	; (8000f88 <DEV_Module_Init+0x34>)
 8000f76:	f001 fd43 	bl	8002a00 <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4804      	ldr	r0, [pc, #16]	; (8000f90 <DEV_Module_Init+0x3c>)
 8000f7e:	f002 fc25 	bl	80037cc <HAL_TIM_PWM_Start>
		return 0;
 8000f82:	2300      	movs	r3, #0
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40010800 	.word	0x40010800
 8000f8c:	40010c00 	.word	0x40010c00
 8000f90:	20000118 	.word	0x20000118

08000f94 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 8000f94:	b590      	push	{r4, r7, lr}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4604      	mov	r4, r0
 8000f9c:	4608      	mov	r0, r1
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	4623      	mov	r3, r4
 8000fa4:	80fb      	strh	r3, [r7, #6]
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	80bb      	strh	r3, [r7, #4]
 8000faa:	460b      	mov	r3, r1
 8000fac:	807b      	strh	r3, [r7, #2]
 8000fae:	4613      	mov	r3, r2
 8000fb0:	803b      	strh	r3, [r7, #0]
    Paint.WidthMemory = Width;
 8000fb2:	4a1c      	ldr	r2, [pc, #112]	; (8001024 <Paint_NewImage+0x90>)
 8000fb4:	88fb      	ldrh	r3, [r7, #6]
 8000fb6:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8000fb8:	4a1a      	ldr	r2, [pc, #104]	; (8001024 <Paint_NewImage+0x90>)
 8000fba:	88bb      	ldrh	r3, [r7, #4]
 8000fbc:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 8000fbe:	4a19      	ldr	r2, [pc, #100]	; (8001024 <Paint_NewImage+0x90>)
 8000fc0:	883b      	ldrh	r3, [r7, #0]
 8000fc2:	8193      	strh	r3, [r2, #12]
    Paint.WidthByte = Width;
 8000fc4:	4a17      	ldr	r2, [pc, #92]	; (8001024 <Paint_NewImage+0x90>)
 8000fc6:	88fb      	ldrh	r3, [r7, #6]
 8000fc8:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 8000fca:	4a16      	ldr	r2, [pc, #88]	; (8001024 <Paint_NewImage+0x90>)
 8000fcc:	88bb      	ldrh	r3, [r7, #4]
 8000fce:	8293      	strh	r3, [r2, #20]
    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
 8000fd0:	4b14      	ldr	r3, [pc, #80]	; (8001024 <Paint_NewImage+0x90>)
 8000fd2:	8a5b      	ldrh	r3, [r3, #18]
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <Paint_NewImage+0x90>)
 8000fda:	8a9b      	ldrh	r3, [r3, #20]
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	461a      	mov	r2, r3
 8000fe0:	4811      	ldr	r0, [pc, #68]	; (8001028 <Paint_NewImage+0x94>)
 8000fe2:	f003 fa0f 	bl	8004404 <iprintf>
   
    Paint.Rotate = Rotate;
 8000fe6:	4a0f      	ldr	r2, [pc, #60]	; (8001024 <Paint_NewImage+0x90>)
 8000fe8:	887b      	ldrh	r3, [r7, #2]
 8000fea:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8000fec:	4b0d      	ldr	r3, [pc, #52]	; (8001024 <Paint_NewImage+0x90>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8000ff2:	887b      	ldrh	r3, [r7, #2]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d002      	beq.n	8000ffe <Paint_NewImage+0x6a>
 8000ff8:	887b      	ldrh	r3, [r7, #2]
 8000ffa:	2bb4      	cmp	r3, #180	; 0xb4
 8000ffc:	d106      	bne.n	800100c <Paint_NewImage+0x78>
        Paint.Width = Width;
 8000ffe:	4a09      	ldr	r2, [pc, #36]	; (8001024 <Paint_NewImage+0x90>)
 8001000:	88fb      	ldrh	r3, [r7, #6]
 8001002:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8001004:	4a07      	ldr	r2, [pc, #28]	; (8001024 <Paint_NewImage+0x90>)
 8001006:	88bb      	ldrh	r3, [r7, #4]
 8001008:	80d3      	strh	r3, [r2, #6]
 800100a:	e006      	b.n	800101a <Paint_NewImage+0x86>
    } else {
        Paint.Width = Height;
 800100c:	4a05      	ldr	r2, [pc, #20]	; (8001024 <Paint_NewImage+0x90>)
 800100e:	88bb      	ldrh	r3, [r7, #4]
 8001010:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 8001012:	4a04      	ldr	r2, [pc, #16]	; (8001024 <Paint_NewImage+0x90>)
 8001014:	88fb      	ldrh	r3, [r7, #6]
 8001016:	80d3      	strh	r3, [r2, #6]
    }
}
 8001018:	bf00      	nop
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	bd90      	pop	{r4, r7, pc}
 8001022:	bf00      	nop
 8001024:	20000094 	.word	0x20000094
 8001028:	0800526c 	.word	0x0800526c

0800102c <Paint_SetClearFuntion>:
function:	Select Clear Funtion
parameter:
      Clear :   Pointer to Clear funtion 
******************************************************************************/
void Paint_SetClearFuntion(void (*Clear)(UWORD))
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  CLEAR=Clear;
 8001034:	4a03      	ldr	r2, [pc, #12]	; (8001044 <Paint_SetClearFuntion+0x18>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6013      	str	r3, [r2, #0]
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr
 8001044:	200000b0 	.word	0x200000b0

08001048 <Paint_SetDisplayFuntion>:
function:	Select DisplayF untion
parameter:
      Display :   Pointer to display funtion 
******************************************************************************/
void Paint_SetDisplayFuntion(void (*Display)(UWORD,UWORD,UWORD))
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  DISPLAY=Display;
 8001050:	4a03      	ldr	r2, [pc, #12]	; (8001060 <Paint_SetDisplayFuntion+0x18>)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6013      	str	r3, [r2, #0]
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr
 8001060:	200000ac 	.word	0x200000ac

08001064 <Paint_SetPixel>:
    Xpoint  :   At point X
    Ypoint  :   At point Y
    Color   :   Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	80fb      	strh	r3, [r7, #6]
 800106e:	460b      	mov	r3, r1
 8001070:	80bb      	strh	r3, [r7, #4]
 8001072:	4613      	mov	r3, r2
 8001074:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8001076:	4b50      	ldr	r3, [pc, #320]	; (80011b8 <Paint_SetPixel+0x154>)
 8001078:	889b      	ldrh	r3, [r3, #4]
 800107a:	b29b      	uxth	r3, r3
 800107c:	88fa      	ldrh	r2, [r7, #6]
 800107e:	429a      	cmp	r2, r3
 8001080:	d805      	bhi.n	800108e <Paint_SetPixel+0x2a>
 8001082:	4b4d      	ldr	r3, [pc, #308]	; (80011b8 <Paint_SetPixel+0x154>)
 8001084:	88db      	ldrh	r3, [r3, #6]
 8001086:	b29b      	uxth	r3, r3
 8001088:	88ba      	ldrh	r2, [r7, #4]
 800108a:	429a      	cmp	r2, r3
 800108c:	d903      	bls.n	8001096 <Paint_SetPixel+0x32>
        Debug("Exceeding display boundaries\r\n");
 800108e:	484b      	ldr	r0, [pc, #300]	; (80011bc <Paint_SetPixel+0x158>)
 8001090:	f003 fa1e 	bl	80044d0 <puts>
        return;
 8001094:	e08c      	b.n	80011b0 <Paint_SetPixel+0x14c>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 8001096:	4b48      	ldr	r3, [pc, #288]	; (80011b8 <Paint_SetPixel+0x154>)
 8001098:	89db      	ldrh	r3, [r3, #14]
 800109a:	b29b      	uxth	r3, r3
 800109c:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80010a0:	d02d      	beq.n	80010fe <Paint_SetPixel+0x9a>
 80010a2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80010a6:	f300 8080 	bgt.w	80011aa <Paint_SetPixel+0x146>
 80010aa:	2bb4      	cmp	r3, #180	; 0xb4
 80010ac:	d016      	beq.n	80010dc <Paint_SetPixel+0x78>
 80010ae:	2bb4      	cmp	r3, #180	; 0xb4
 80010b0:	dc7b      	bgt.n	80011aa <Paint_SetPixel+0x146>
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d002      	beq.n	80010bc <Paint_SetPixel+0x58>
 80010b6:	2b5a      	cmp	r3, #90	; 0x5a
 80010b8:	d005      	beq.n	80010c6 <Paint_SetPixel+0x62>
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;

    default:
        return;
 80010ba:	e076      	b.n	80011aa <Paint_SetPixel+0x146>
        X = Xpoint;
 80010bc:	88fb      	ldrh	r3, [r7, #6]
 80010be:	81fb      	strh	r3, [r7, #14]
        Y = Ypoint;  
 80010c0:	88bb      	ldrh	r3, [r7, #4]
 80010c2:	81bb      	strh	r3, [r7, #12]
        break;
 80010c4:	e026      	b.n	8001114 <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Ypoint - 1;
 80010c6:	4b3c      	ldr	r3, [pc, #240]	; (80011b8 <Paint_SetPixel+0x154>)
 80010c8:	891b      	ldrh	r3, [r3, #8]
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	88bb      	ldrh	r3, [r7, #4]
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	3b01      	subs	r3, #1
 80010d4:	81fb      	strh	r3, [r7, #14]
        Y = Xpoint;
 80010d6:	88fb      	ldrh	r3, [r7, #6]
 80010d8:	81bb      	strh	r3, [r7, #12]
        break;
 80010da:	e01b      	b.n	8001114 <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Xpoint - 1;
 80010dc:	4b36      	ldr	r3, [pc, #216]	; (80011b8 <Paint_SetPixel+0x154>)
 80010de:	891b      	ldrh	r3, [r3, #8]
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	88fb      	ldrh	r3, [r7, #6]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	3b01      	subs	r3, #1
 80010ea:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Ypoint - 1;
 80010ec:	4b32      	ldr	r3, [pc, #200]	; (80011b8 <Paint_SetPixel+0x154>)
 80010ee:	895b      	ldrh	r3, [r3, #10]
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	88bb      	ldrh	r3, [r7, #4]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	3b01      	subs	r3, #1
 80010fa:	81bb      	strh	r3, [r7, #12]
        break;
 80010fc:	e00a      	b.n	8001114 <Paint_SetPixel+0xb0>
        X = Ypoint;
 80010fe:	88bb      	ldrh	r3, [r7, #4]
 8001100:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Xpoint - 1;
 8001102:	4b2d      	ldr	r3, [pc, #180]	; (80011b8 <Paint_SetPixel+0x154>)
 8001104:	895b      	ldrh	r3, [r3, #10]
 8001106:	b29a      	uxth	r2, r3
 8001108:	88fb      	ldrh	r3, [r7, #6]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	b29b      	uxth	r3, r3
 800110e:	3b01      	subs	r3, #1
 8001110:	81bb      	strh	r3, [r7, #12]
        break;
 8001112:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 8001114:	4b28      	ldr	r3, [pc, #160]	; (80011b8 <Paint_SetPixel+0x154>)
 8001116:	8a1b      	ldrh	r3, [r3, #16]
 8001118:	b29b      	uxth	r3, r3
 800111a:	2b03      	cmp	r3, #3
 800111c:	d847      	bhi.n	80011ae <Paint_SetPixel+0x14a>
 800111e:	a201      	add	r2, pc, #4	; (adr r2, 8001124 <Paint_SetPixel+0xc0>)
 8001120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001124:	0800117b 	.word	0x0800117b
 8001128:	08001135 	.word	0x08001135
 800112c:	08001147 	.word	0x08001147
 8001130:	08001159 	.word	0x08001159
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 8001134:	4b20      	ldr	r3, [pc, #128]	; (80011b8 <Paint_SetPixel+0x154>)
 8001136:	891b      	ldrh	r3, [r3, #8]
 8001138:	b29a      	uxth	r2, r3
 800113a:	89fb      	ldrh	r3, [r7, #14]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	b29b      	uxth	r3, r3
 8001140:	3b01      	subs	r3, #1
 8001142:	81fb      	strh	r3, [r7, #14]
        break;
 8001144:	e01a      	b.n	800117c <Paint_SetPixel+0x118>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 8001146:	4b1c      	ldr	r3, [pc, #112]	; (80011b8 <Paint_SetPixel+0x154>)
 8001148:	895b      	ldrh	r3, [r3, #10]
 800114a:	b29a      	uxth	r2, r3
 800114c:	89bb      	ldrh	r3, [r7, #12]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	b29b      	uxth	r3, r3
 8001152:	3b01      	subs	r3, #1
 8001154:	81bb      	strh	r3, [r7, #12]
        break;
 8001156:	e011      	b.n	800117c <Paint_SetPixel+0x118>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 8001158:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <Paint_SetPixel+0x154>)
 800115a:	891b      	ldrh	r3, [r3, #8]
 800115c:	b29a      	uxth	r2, r3
 800115e:	89fb      	ldrh	r3, [r7, #14]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	b29b      	uxth	r3, r3
 8001164:	3b01      	subs	r3, #1
 8001166:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Y - 1;
 8001168:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <Paint_SetPixel+0x154>)
 800116a:	895b      	ldrh	r3, [r3, #10]
 800116c:	b29a      	uxth	r2, r3
 800116e:	89bb      	ldrh	r3, [r7, #12]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	b29b      	uxth	r3, r3
 8001174:	3b01      	subs	r3, #1
 8001176:	81bb      	strh	r3, [r7, #12]
        break;
 8001178:	e000      	b.n	800117c <Paint_SetPixel+0x118>
        break;
 800117a:	bf00      	nop
    default:
        return;
    }

    // printf("x = %d, y = %d\r\n", X, Y);
    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 800117c:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <Paint_SetPixel+0x154>)
 800117e:	891b      	ldrh	r3, [r3, #8]
 8001180:	b29b      	uxth	r3, r3
 8001182:	89fa      	ldrh	r2, [r7, #14]
 8001184:	429a      	cmp	r2, r3
 8001186:	d805      	bhi.n	8001194 <Paint_SetPixel+0x130>
 8001188:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <Paint_SetPixel+0x154>)
 800118a:	895b      	ldrh	r3, [r3, #10]
 800118c:	b29b      	uxth	r3, r3
 800118e:	89ba      	ldrh	r2, [r7, #12]
 8001190:	429a      	cmp	r2, r3
 8001192:	d903      	bls.n	800119c <Paint_SetPixel+0x138>
        Debug("Exceeding display boundaries\r\n");
 8001194:	4809      	ldr	r0, [pc, #36]	; (80011bc <Paint_SetPixel+0x158>)
 8001196:	f003 f99b 	bl	80044d0 <puts>
        return;
 800119a:	e009      	b.n	80011b0 <Paint_SetPixel+0x14c>
    }
    
   // UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
		DISPLAY(X,Y, Color);
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <Paint_SetPixel+0x15c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	887a      	ldrh	r2, [r7, #2]
 80011a2:	89b9      	ldrh	r1, [r7, #12]
 80011a4:	89f8      	ldrh	r0, [r7, #14]
 80011a6:	4798      	blx	r3
 80011a8:	e002      	b.n	80011b0 <Paint_SetPixel+0x14c>
        return;
 80011aa:	bf00      	nop
 80011ac:	e000      	b.n	80011b0 <Paint_SetPixel+0x14c>
        return;
 80011ae:	bf00      	nop
}
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000094 	.word	0x20000094
 80011bc:	0800536c 	.word	0x0800536c
 80011c0:	200000ac 	.word	0x200000ac

080011c4 <Paint_Clear>:
function:	Clear the color of the picture
parameter:
    Color   :   Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{	
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	80fb      	strh	r3, [r7, #6]
	CLEAR(Color);
 80011ce:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <Paint_Clear+0x1c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	88fa      	ldrh	r2, [r7, #6]
 80011d4:	4610      	mov	r0, r2
 80011d6:	4798      	blx	r3
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	200000b0 	.word	0x200000b0

080011e4 <Paint_DrawPoint>:
    Color		:   Set color
    Dot_Pixel	:	point size
******************************************************************************/
void Paint_DrawPoint( UWORD Xpoint,       UWORD Ypoint, UWORD Color,
                      DOT_PIXEL Dot_Pixel,DOT_STYLE Dot_FillWay)
{
 80011e4:	b590      	push	{r4, r7, lr}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4604      	mov	r4, r0
 80011ec:	4608      	mov	r0, r1
 80011ee:	4611      	mov	r1, r2
 80011f0:	461a      	mov	r2, r3
 80011f2:	4623      	mov	r3, r4
 80011f4:	80fb      	strh	r3, [r7, #6]
 80011f6:	4603      	mov	r3, r0
 80011f8:	80bb      	strh	r3, [r7, #4]
 80011fa:	460b      	mov	r3, r1
 80011fc:	807b      	strh	r3, [r7, #2]
 80011fe:	4613      	mov	r3, r2
 8001200:	707b      	strb	r3, [r7, #1]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8001202:	4b44      	ldr	r3, [pc, #272]	; (8001314 <Paint_DrawPoint+0x130>)
 8001204:	889b      	ldrh	r3, [r3, #4]
 8001206:	b29b      	uxth	r3, r3
 8001208:	88fa      	ldrh	r2, [r7, #6]
 800120a:	429a      	cmp	r2, r3
 800120c:	d805      	bhi.n	800121a <Paint_DrawPoint+0x36>
 800120e:	4b41      	ldr	r3, [pc, #260]	; (8001314 <Paint_DrawPoint+0x130>)
 8001210:	88db      	ldrh	r3, [r3, #6]
 8001212:	b29b      	uxth	r3, r3
 8001214:	88ba      	ldrh	r2, [r7, #4]
 8001216:	429a      	cmp	r2, r3
 8001218:	d903      	bls.n	8001222 <Paint_DrawPoint+0x3e>
        Debug("Paint_DrawPoint Input exceeds the normal display range\r\n");
 800121a:	483f      	ldr	r0, [pc, #252]	; (8001318 <Paint_DrawPoint+0x134>)
 800121c:	f003 f958 	bl	80044d0 <puts>
        return;
 8001220:	e074      	b.n	800130c <Paint_DrawPoint+0x128>
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_FillWay == DOT_FILL_AROUND) {
 8001222:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d144      	bne.n	80012b4 <Paint_DrawPoint+0xd0>
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++) {
 800122a:	2300      	movs	r3, #0
 800122c:	81fb      	strh	r3, [r7, #14]
 800122e:	e039      	b.n	80012a4 <Paint_DrawPoint+0xc0>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8001230:	2300      	movs	r3, #0
 8001232:	81bb      	strh	r3, [r7, #12]
 8001234:	e029      	b.n	800128a <Paint_DrawPoint+0xa6>
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 8001236:	88fa      	ldrh	r2, [r7, #6]
 8001238:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800123c:	441a      	add	r2, r3
 800123e:	787b      	ldrb	r3, [r7, #1]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b00      	cmp	r3, #0
 8001244:	db28      	blt.n	8001298 <Paint_DrawPoint+0xb4>
 8001246:	88ba      	ldrh	r2, [r7, #4]
 8001248:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800124c:	441a      	add	r2, r3
 800124e:	787b      	ldrb	r3, [r7, #1]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	2b00      	cmp	r3, #0
 8001254:	db20      	blt.n	8001298 <Paint_DrawPoint+0xb4>
                    break;
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 8001256:	89fa      	ldrh	r2, [r7, #14]
 8001258:	88fb      	ldrh	r3, [r7, #6]
 800125a:	4413      	add	r3, r2
 800125c:	b29a      	uxth	r2, r3
 800125e:	787b      	ldrb	r3, [r7, #1]
 8001260:	b29b      	uxth	r3, r3
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	b298      	uxth	r0, r3
 8001266:	89ba      	ldrh	r2, [r7, #12]
 8001268:	88bb      	ldrh	r3, [r7, #4]
 800126a:	4413      	add	r3, r2
 800126c:	b29a      	uxth	r2, r3
 800126e:	787b      	ldrb	r3, [r7, #1]
 8001270:	b29b      	uxth	r3, r3
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	b29b      	uxth	r3, r3
 8001276:	887a      	ldrh	r2, [r7, #2]
 8001278:	4619      	mov	r1, r3
 800127a:	f7ff fef3 	bl	8001064 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 800127e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001282:	b29b      	uxth	r3, r3
 8001284:	3301      	adds	r3, #1
 8001286:	b29b      	uxth	r3, r3
 8001288:	81bb      	strh	r3, [r7, #12]
 800128a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800128e:	787b      	ldrb	r3, [r7, #1]
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	3b01      	subs	r3, #1
 8001294:	429a      	cmp	r2, r3
 8001296:	dbce      	blt.n	8001236 <Paint_DrawPoint+0x52>
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++) {
 8001298:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800129c:	b29b      	uxth	r3, r3
 800129e:	3301      	adds	r3, #1
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	81fb      	strh	r3, [r7, #14]
 80012a4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80012a8:	787b      	ldrb	r3, [r7, #1]
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	3b01      	subs	r3, #1
 80012ae:	429a      	cmp	r2, r3
 80012b0:	dbbe      	blt.n	8001230 <Paint_DrawPoint+0x4c>
 80012b2:	e02b      	b.n	800130c <Paint_DrawPoint+0x128>
            }
        }
    } else {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 80012b4:	2300      	movs	r3, #0
 80012b6:	81fb      	strh	r3, [r7, #14]
 80012b8:	e023      	b.n	8001302 <Paint_DrawPoint+0x11e>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 80012ba:	2300      	movs	r3, #0
 80012bc:	81bb      	strh	r3, [r7, #12]
 80012be:	e015      	b.n	80012ec <Paint_DrawPoint+0x108>
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 80012c0:	89fa      	ldrh	r2, [r7, #14]
 80012c2:	88fb      	ldrh	r3, [r7, #6]
 80012c4:	4413      	add	r3, r2
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	3b01      	subs	r3, #1
 80012ca:	b298      	uxth	r0, r3
 80012cc:	89ba      	ldrh	r2, [r7, #12]
 80012ce:	88bb      	ldrh	r3, [r7, #4]
 80012d0:	4413      	add	r3, r2
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	3b01      	subs	r3, #1
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	887a      	ldrh	r2, [r7, #2]
 80012da:	4619      	mov	r1, r3
 80012dc:	f7ff fec2 	bl	8001064 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 80012e0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	3301      	adds	r3, #1
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	81bb      	strh	r3, [r7, #12]
 80012ec:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80012f0:	787b      	ldrb	r3, [r7, #1]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	dbe4      	blt.n	80012c0 <Paint_DrawPoint+0xdc>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 80012f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	3301      	adds	r3, #1
 80012fe:	b29b      	uxth	r3, r3
 8001300:	81fb      	strh	r3, [r7, #14]
 8001302:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001306:	787b      	ldrb	r3, [r7, #1]
 8001308:	429a      	cmp	r2, r3
 800130a:	dbd6      	blt.n	80012ba <Paint_DrawPoint+0xd6>
            }
        }
    }
}
 800130c:	3714      	adds	r7, #20
 800130e:	46bd      	mov	sp, r7
 8001310:	bd90      	pop	{r4, r7, pc}
 8001312:	bf00      	nop
 8001314:	20000094 	.word	0x20000094
 8001318:	08005394 	.word	0x08005394

0800131c <Paint_DrawLine>:
    Yend   ：End point Ypoint coordinate
    Color  ：The color of the line segment
******************************************************************************/
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, 
                    UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
 800131c:	b590      	push	{r4, r7, lr}
 800131e:	b08d      	sub	sp, #52	; 0x34
 8001320:	af02      	add	r7, sp, #8
 8001322:	4604      	mov	r4, r0
 8001324:	4608      	mov	r0, r1
 8001326:	4611      	mov	r1, r2
 8001328:	461a      	mov	r2, r3
 800132a:	4623      	mov	r3, r4
 800132c:	80fb      	strh	r3, [r7, #6]
 800132e:	4603      	mov	r3, r0
 8001330:	80bb      	strh	r3, [r7, #4]
 8001332:	460b      	mov	r3, r1
 8001334:	807b      	strh	r3, [r7, #2]
 8001336:	4613      	mov	r3, r2
 8001338:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800133a:	4b4d      	ldr	r3, [pc, #308]	; (8001470 <Paint_DrawLine+0x154>)
 800133c:	889b      	ldrh	r3, [r3, #4]
 800133e:	b29b      	uxth	r3, r3
 8001340:	88fa      	ldrh	r2, [r7, #6]
 8001342:	429a      	cmp	r2, r3
 8001344:	d811      	bhi.n	800136a <Paint_DrawLine+0x4e>
 8001346:	4b4a      	ldr	r3, [pc, #296]	; (8001470 <Paint_DrawLine+0x154>)
 8001348:	88db      	ldrh	r3, [r3, #6]
 800134a:	b29b      	uxth	r3, r3
 800134c:	88ba      	ldrh	r2, [r7, #4]
 800134e:	429a      	cmp	r2, r3
 8001350:	d80b      	bhi.n	800136a <Paint_DrawLine+0x4e>
        Xend > Paint.Width || Yend > Paint.Height) {
 8001352:	4b47      	ldr	r3, [pc, #284]	; (8001470 <Paint_DrawLine+0x154>)
 8001354:	889b      	ldrh	r3, [r3, #4]
 8001356:	b29b      	uxth	r3, r3
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8001358:	887a      	ldrh	r2, [r7, #2]
 800135a:	429a      	cmp	r2, r3
 800135c:	d805      	bhi.n	800136a <Paint_DrawLine+0x4e>
        Xend > Paint.Width || Yend > Paint.Height) {
 800135e:	4b44      	ldr	r3, [pc, #272]	; (8001470 <Paint_DrawLine+0x154>)
 8001360:	88db      	ldrh	r3, [r3, #6]
 8001362:	b29b      	uxth	r3, r3
 8001364:	883a      	ldrh	r2, [r7, #0]
 8001366:	429a      	cmp	r2, r3
 8001368:	d903      	bls.n	8001372 <Paint_DrawLine+0x56>
        Debug("Paint_DrawLine Input exceeds the normal display range\r\n");
 800136a:	4842      	ldr	r0, [pc, #264]	; (8001474 <Paint_DrawLine+0x158>)
 800136c:	f003 f8b0 	bl	80044d0 <puts>
        return;
 8001370:	e07b      	b.n	800146a <Paint_DrawLine+0x14e>
    }

    UWORD Xpoint = Xstart;
 8001372:	88fb      	ldrh	r3, [r7, #6]
 8001374:	84fb      	strh	r3, [r7, #38]	; 0x26
    UWORD Ypoint = Ystart;
 8001376:	88bb      	ldrh	r3, [r7, #4]
 8001378:	84bb      	strh	r3, [r7, #36]	; 0x24
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 800137a:	887a      	ldrh	r2, [r7, #2]
 800137c:	88fb      	ldrh	r3, [r7, #6]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b00      	cmp	r3, #0
 8001382:	bfb8      	it	lt
 8001384:	425b      	neglt	r3, r3
 8001386:	61bb      	str	r3, [r7, #24]
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 8001388:	883a      	ldrh	r2, [r7, #0]
 800138a:	88bb      	ldrh	r3, [r7, #4]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b00      	cmp	r3, #0
 8001390:	bfb8      	it	lt
 8001392:	425b      	neglt	r3, r3
 8001394:	425b      	negs	r3, r3
 8001396:	617b      	str	r3, [r7, #20]

    // Increment direction, 1 is positive, -1 is counter;
    int XAddway = Xstart < Xend ? 1 : -1;
 8001398:	88fa      	ldrh	r2, [r7, #6]
 800139a:	887b      	ldrh	r3, [r7, #2]
 800139c:	429a      	cmp	r2, r3
 800139e:	d201      	bcs.n	80013a4 <Paint_DrawLine+0x88>
 80013a0:	2301      	movs	r3, #1
 80013a2:	e001      	b.n	80013a8 <Paint_DrawLine+0x8c>
 80013a4:	f04f 33ff 	mov.w	r3, #4294967295
 80013a8:	613b      	str	r3, [r7, #16]
    int YAddway = Ystart < Yend ? 1 : -1;
 80013aa:	88ba      	ldrh	r2, [r7, #4]
 80013ac:	883b      	ldrh	r3, [r7, #0]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d201      	bcs.n	80013b6 <Paint_DrawLine+0x9a>
 80013b2:	2301      	movs	r3, #1
 80013b4:	e001      	b.n	80013ba <Paint_DrawLine+0x9e>
 80013b6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ba:	60fb      	str	r3, [r7, #12]

    //Cumulative error
    int Esp = dx + dy;
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	4413      	add	r3, r2
 80013c2:	623b      	str	r3, [r7, #32]
    char Dotted_Len = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	77fb      	strb	r3, [r7, #31]

    for (;;) {
        Dotted_Len++;
 80013c8:	7ffb      	ldrb	r3, [r7, #31]
 80013ca:	3301      	adds	r3, #1
 80013cc:	77fb      	strb	r3, [r7, #31]
        //Painted dotted line, 2 point is really virtual
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0) {
 80013ce:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d118      	bne.n	8001408 <Paint_DrawLine+0xec>
 80013d6:	7ffa      	ldrb	r2, [r7, #31]
 80013d8:	4b27      	ldr	r3, [pc, #156]	; (8001478 <Paint_DrawLine+0x15c>)
 80013da:	fba3 1302 	umull	r1, r3, r3, r2
 80013de:	0859      	lsrs	r1, r3, #1
 80013e0:	460b      	mov	r3, r1
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	440b      	add	r3, r1
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d10c      	bne.n	8001408 <Paint_DrawLine+0xec>
            //Debug("LINE_DOTTED\r\n");
            Paint_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width, DOT_STYLE_DFT);
 80013ee:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80013f2:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80013f4:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80013f6:	2201      	movs	r2, #1
 80013f8:	9200      	str	r2, [sp, #0]
 80013fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013fe:	f7ff fef1 	bl	80011e4 <Paint_DrawPoint>
            Dotted_Len = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	77fb      	strb	r3, [r7, #31]
 8001406:	e008      	b.n	800141a <Paint_DrawLine+0xfe>
        } else {
            Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 8001408:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800140c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800140e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001410:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8001412:	2401      	movs	r4, #1
 8001414:	9400      	str	r4, [sp, #0]
 8001416:	f7ff fee5 	bl	80011e4 <Paint_DrawPoint>
        }
        if (2 * Esp >= dy) {
 800141a:	6a3b      	ldr	r3, [r7, #32]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	697a      	ldr	r2, [r7, #20]
 8001420:	429a      	cmp	r2, r3
 8001422:	dc0c      	bgt.n	800143e <Paint_DrawLine+0x122>
            if (Xpoint == Xend)
 8001424:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001426:	887b      	ldrh	r3, [r7, #2]
 8001428:	429a      	cmp	r2, r3
 800142a:	d01b      	beq.n	8001464 <Paint_DrawLine+0x148>
                break;
            Esp += dy;
 800142c:	6a3a      	ldr	r2, [r7, #32]
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	4413      	add	r3, r2
 8001432:	623b      	str	r3, [r7, #32]
            Xpoint += XAddway;
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	b29a      	uxth	r2, r3
 8001438:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800143a:	4413      	add	r3, r2
 800143c:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        if (2 * Esp <= dx) {
 800143e:	6a3b      	ldr	r3, [r7, #32]
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	429a      	cmp	r2, r3
 8001446:	dbbf      	blt.n	80013c8 <Paint_DrawLine+0xac>
            if (Ypoint == Yend)
 8001448:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800144a:	883b      	ldrh	r3, [r7, #0]
 800144c:	429a      	cmp	r2, r3
 800144e:	d00b      	beq.n	8001468 <Paint_DrawLine+0x14c>
                break;
            Esp += dx;
 8001450:	6a3a      	ldr	r2, [r7, #32]
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	4413      	add	r3, r2
 8001456:	623b      	str	r3, [r7, #32]
            Ypoint += YAddway;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	b29a      	uxth	r2, r3
 800145c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800145e:	4413      	add	r3, r2
 8001460:	84bb      	strh	r3, [r7, #36]	; 0x24
        Dotted_Len++;
 8001462:	e7b1      	b.n	80013c8 <Paint_DrawLine+0xac>
                break;
 8001464:	bf00      	nop
 8001466:	e000      	b.n	800146a <Paint_DrawLine+0x14e>
                break;
 8001468:	bf00      	nop
        }
    }
}
 800146a:	372c      	adds	r7, #44	; 0x2c
 800146c:	46bd      	mov	sp, r7
 800146e:	bd90      	pop	{r4, r7, pc}
 8001470:	20000094 	.word	0x20000094
 8001474:	080053d4 	.word	0x080053d4
 8001478:	aaaaaaab 	.word	0xaaaaaaab

0800147c <LCD_1IN28_Reset>:
/******************************************************************************
function :	Hardware reset
parameter:
******************************************************************************/
static void LCD_1IN28_Reset(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
    LCD_1IN28_RST_1;
 8001480:	2201      	movs	r2, #1
 8001482:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001486:	480d      	ldr	r0, [pc, #52]	; (80014bc <LCD_1IN28_Reset+0x40>)
 8001488:	f001 faba 	bl	8002a00 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 800148c:	2064      	movs	r0, #100	; 0x64
 800148e:	f001 f82b 	bl	80024e8 <HAL_Delay>
    LCD_1IN28_RST_0;
 8001492:	2200      	movs	r2, #0
 8001494:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001498:	4808      	ldr	r0, [pc, #32]	; (80014bc <LCD_1IN28_Reset+0x40>)
 800149a:	f001 fab1 	bl	8002a00 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 800149e:	2064      	movs	r0, #100	; 0x64
 80014a0:	f001 f822 	bl	80024e8 <HAL_Delay>
    LCD_1IN28_RST_1;
 80014a4:	2201      	movs	r2, #1
 80014a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014aa:	4804      	ldr	r0, [pc, #16]	; (80014bc <LCD_1IN28_Reset+0x40>)
 80014ac:	f001 faa8 	bl	8002a00 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 80014b0:	2064      	movs	r0, #100	; 0x64
 80014b2:	f001 f819 	bl	80024e8 <HAL_Delay>
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40010800 	.word	0x40010800

080014c0 <LCD_1IN28_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void LCD_1IN28_SendCommand(UBYTE Reg)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
    LCD_1IN28_DC_0;
 80014ca:	2200      	movs	r2, #0
 80014cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014d0:	4807      	ldr	r0, [pc, #28]	; (80014f0 <LCD_1IN28_SendCommand+0x30>)
 80014d2:	f001 fa95 	bl	8002a00 <HAL_GPIO_WritePin>
    LCD_1IN28_CS_0;
 80014d6:	2200      	movs	r2, #0
 80014d8:	2140      	movs	r1, #64	; 0x40
 80014da:	4806      	ldr	r0, [pc, #24]	; (80014f4 <LCD_1IN28_SendCommand+0x34>)
 80014dc:	f001 fa90 	bl	8002a00 <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Reg);
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff fd24 	bl	8000f30 <DEV_SPI_WRite>
    // LCD_1IN28_CS_1;
}
 80014e8:	bf00      	nop
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40010800 	.word	0x40010800
 80014f4:	40010c00 	.word	0x40010c00

080014f8 <LCD_1IN28_SendData_8Bit>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void LCD_1IN28_SendData_8Bit(UBYTE Data)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
    LCD_1IN28_DC_1;
 8001502:	2201      	movs	r2, #1
 8001504:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001508:	480a      	ldr	r0, [pc, #40]	; (8001534 <LCD_1IN28_SendData_8Bit+0x3c>)
 800150a:	f001 fa79 	bl	8002a00 <HAL_GPIO_WritePin>
    LCD_1IN28_CS_0;
 800150e:	2200      	movs	r2, #0
 8001510:	2140      	movs	r1, #64	; 0x40
 8001512:	4809      	ldr	r0, [pc, #36]	; (8001538 <LCD_1IN28_SendData_8Bit+0x40>)
 8001514:	f001 fa74 	bl	8002a00 <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Data);
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff fd08 	bl	8000f30 <DEV_SPI_WRite>
    LCD_1IN28_CS_1;
 8001520:	2201      	movs	r2, #1
 8001522:	2140      	movs	r1, #64	; 0x40
 8001524:	4804      	ldr	r0, [pc, #16]	; (8001538 <LCD_1IN28_SendData_8Bit+0x40>)
 8001526:	f001 fa6b 	bl	8002a00 <HAL_GPIO_WritePin>
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40010800 	.word	0x40010800
 8001538:	40010c00 	.word	0x40010c00

0800153c <LCD_1IN28_SendData_16Bit>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void LCD_1IN28_SendData_16Bit(UWORD Data)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	80fb      	strh	r3, [r7, #6]
    LCD_1IN28_DC_1;
 8001546:	2201      	movs	r2, #1
 8001548:	f44f 7180 	mov.w	r1, #256	; 0x100
 800154c:	480e      	ldr	r0, [pc, #56]	; (8001588 <LCD_1IN28_SendData_16Bit+0x4c>)
 800154e:	f001 fa57 	bl	8002a00 <HAL_GPIO_WritePin>
    LCD_1IN28_CS_0;
 8001552:	2200      	movs	r2, #0
 8001554:	2140      	movs	r1, #64	; 0x40
 8001556:	480d      	ldr	r0, [pc, #52]	; (800158c <LCD_1IN28_SendData_16Bit+0x50>)
 8001558:	f001 fa52 	bl	8002a00 <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Data >> 8);
 800155c:	88fb      	ldrh	r3, [r7, #6]
 800155e:	0a1b      	lsrs	r3, r3, #8
 8001560:	b29b      	uxth	r3, r3
 8001562:	b2db      	uxtb	r3, r3
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fce3 	bl	8000f30 <DEV_SPI_WRite>
    DEV_SPI_WRITE(Data);
 800156a:	88fb      	ldrh	r3, [r7, #6]
 800156c:	b2db      	uxtb	r3, r3
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff fcde 	bl	8000f30 <DEV_SPI_WRite>
    LCD_1IN28_CS_1;
 8001574:	2201      	movs	r2, #1
 8001576:	2140      	movs	r1, #64	; 0x40
 8001578:	4804      	ldr	r0, [pc, #16]	; (800158c <LCD_1IN28_SendData_16Bit+0x50>)
 800157a:	f001 fa41 	bl	8002a00 <HAL_GPIO_WritePin>
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40010800 	.word	0x40010800
 800158c:	40010c00 	.word	0x40010c00

08001590 <LCD_1IN28_InitReg>:
/******************************************************************************
function :	Initialize the lcd register
parameter:
******************************************************************************/
static void LCD_1IN28_InitReg(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  LCD_1IN28_SendCommand(0xEF);
 8001594:	20ef      	movs	r0, #239	; 0xef
 8001596:	f7ff ff93 	bl	80014c0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0xEB);
 800159a:	20eb      	movs	r0, #235	; 0xeb
 800159c:	f7ff ff90 	bl	80014c0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x14); 
 80015a0:	2014      	movs	r0, #20
 80015a2:	f7ff ffa9 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	
  LCD_1IN28_SendCommand(0xFE);			 
 80015a6:	20fe      	movs	r0, #254	; 0xfe
 80015a8:	f7ff ff8a 	bl	80014c0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0xEF); 
 80015ac:	20ef      	movs	r0, #239	; 0xef
 80015ae:	f7ff ff87 	bl	80014c0 <LCD_1IN28_SendCommand>

	LCD_1IN28_SendCommand(0xEB);	
 80015b2:	20eb      	movs	r0, #235	; 0xeb
 80015b4:	f7ff ff84 	bl	80014c0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x14); 
 80015b8:	2014      	movs	r0, #20
 80015ba:	f7ff ff9d 	bl	80014f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x84);			
 80015be:	2084      	movs	r0, #132	; 0x84
 80015c0:	f7ff ff7e 	bl	80014c0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x40); 
 80015c4:	2040      	movs	r0, #64	; 0x40
 80015c6:	f7ff ff97 	bl	80014f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x85);			
 80015ca:	2085      	movs	r0, #133	; 0x85
 80015cc:	f7ff ff78 	bl	80014c0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 80015d0:	20ff      	movs	r0, #255	; 0xff
 80015d2:	f7ff ff91 	bl	80014f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x86);			
 80015d6:	2086      	movs	r0, #134	; 0x86
 80015d8:	f7ff ff72 	bl	80014c0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 80015dc:	20ff      	movs	r0, #255	; 0xff
 80015de:	f7ff ff8b 	bl	80014f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x87);			
 80015e2:	2087      	movs	r0, #135	; 0x87
 80015e4:	f7ff ff6c 	bl	80014c0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF);
 80015e8:	20ff      	movs	r0, #255	; 0xff
 80015ea:	f7ff ff85 	bl	80014f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x88);			
 80015ee:	2088      	movs	r0, #136	; 0x88
 80015f0:	f7ff ff66 	bl	80014c0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x0A);
 80015f4:	200a      	movs	r0, #10
 80015f6:	f7ff ff7f 	bl	80014f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x89);			
 80015fa:	2089      	movs	r0, #137	; 0x89
 80015fc:	f7ff ff60 	bl	80014c0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x21); 
 8001600:	2021      	movs	r0, #33	; 0x21
 8001602:	f7ff ff79 	bl	80014f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8A);			
 8001606:	208a      	movs	r0, #138	; 0x8a
 8001608:	f7ff ff5a 	bl	80014c0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00); 
 800160c:	2000      	movs	r0, #0
 800160e:	f7ff ff73 	bl	80014f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8B);			
 8001612:	208b      	movs	r0, #139	; 0x8b
 8001614:	f7ff ff54 	bl	80014c0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x80); 
 8001618:	2080      	movs	r0, #128	; 0x80
 800161a:	f7ff ff6d 	bl	80014f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8C);			
 800161e:	208c      	movs	r0, #140	; 0x8c
 8001620:	f7ff ff4e 	bl	80014c0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x01); 
 8001624:	2001      	movs	r0, #1
 8001626:	f7ff ff67 	bl	80014f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8D);			
 800162a:	208d      	movs	r0, #141	; 0x8d
 800162c:	f7ff ff48 	bl	80014c0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x01); 
 8001630:	2001      	movs	r0, #1
 8001632:	f7ff ff61 	bl	80014f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8E);			
 8001636:	208e      	movs	r0, #142	; 0x8e
 8001638:	f7ff ff42 	bl	80014c0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 800163c:	20ff      	movs	r0, #255	; 0xff
 800163e:	f7ff ff5b 	bl	80014f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8F);			
 8001642:	208f      	movs	r0, #143	; 0x8f
 8001644:	f7ff ff3c 	bl	80014c0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 8001648:	20ff      	movs	r0, #255	; 0xff
 800164a:	f7ff ff55 	bl	80014f8 <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0xB6);
 800164e:	20b6      	movs	r0, #182	; 0xb6
 8001650:	f7ff ff36 	bl	80014c0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 8001654:	2000      	movs	r0, #0
 8001656:	f7ff ff4f 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x20);
 800165a:	2020      	movs	r0, #32
 800165c:	f7ff ff4c 	bl	80014f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x36);
 8001660:	2036      	movs	r0, #54	; 0x36
 8001662:	f7ff ff2d 	bl	80014c0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x08);//Set as vertical screen
 8001666:	2008      	movs	r0, #8
 8001668:	f7ff ff46 	bl	80014f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x3A);			
 800166c:	203a      	movs	r0, #58	; 0x3a
 800166e:	f7ff ff27 	bl	80014c0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x05); 
 8001672:	2005      	movs	r0, #5
 8001674:	f7ff ff40 	bl	80014f8 <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0x90);			
 8001678:	2090      	movs	r0, #144	; 0x90
 800167a:	f7ff ff21 	bl	80014c0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x08);
 800167e:	2008      	movs	r0, #8
 8001680:	f7ff ff3a 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8001684:	2008      	movs	r0, #8
 8001686:	f7ff ff37 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 800168a:	2008      	movs	r0, #8
 800168c:	f7ff ff34 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08); 
 8001690:	2008      	movs	r0, #8
 8001692:	f7ff ff31 	bl	80014f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xBD);			
 8001696:	20bd      	movs	r0, #189	; 0xbd
 8001698:	f7ff ff12 	bl	80014c0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x06);
 800169c:	2006      	movs	r0, #6
 800169e:	f7ff ff2b 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	
	LCD_1IN28_SendCommand(0xBC);			
 80016a2:	20bc      	movs	r0, #188	; 0xbc
 80016a4:	f7ff ff0c 	bl	80014c0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);	
 80016a8:	2000      	movs	r0, #0
 80016aa:	f7ff ff25 	bl	80014f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xFF);			
 80016ae:	20ff      	movs	r0, #255	; 0xff
 80016b0:	f7ff ff06 	bl	80014c0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x60);
 80016b4:	2060      	movs	r0, #96	; 0x60
 80016b6:	f7ff ff1f 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 80016ba:	2001      	movs	r0, #1
 80016bc:	f7ff ff1c 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x04);
 80016c0:	2004      	movs	r0, #4
 80016c2:	f7ff ff19 	bl	80014f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xC3);			
 80016c6:	20c3      	movs	r0, #195	; 0xc3
 80016c8:	f7ff fefa 	bl	80014c0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x13);
 80016cc:	2013      	movs	r0, #19
 80016ce:	f7ff ff13 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendCommand(0xC4);			
 80016d2:	20c4      	movs	r0, #196	; 0xc4
 80016d4:	f7ff fef4 	bl	80014c0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x13);
 80016d8:	2013      	movs	r0, #19
 80016da:	f7ff ff0d 	bl	80014f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xC9);			
 80016de:	20c9      	movs	r0, #201	; 0xc9
 80016e0:	f7ff feee 	bl	80014c0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x22);
 80016e4:	2022      	movs	r0, #34	; 0x22
 80016e6:	f7ff ff07 	bl	80014f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xBE);			
 80016ea:	20be      	movs	r0, #190	; 0xbe
 80016ec:	f7ff fee8 	bl	80014c0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x11); 
 80016f0:	2011      	movs	r0, #17
 80016f2:	f7ff ff01 	bl	80014f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xE1);			
 80016f6:	20e1      	movs	r0, #225	; 0xe1
 80016f8:	f7ff fee2 	bl	80014c0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x10);
 80016fc:	2010      	movs	r0, #16
 80016fe:	f7ff fefb 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0E);
 8001702:	200e      	movs	r0, #14
 8001704:	f7ff fef8 	bl	80014f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xDF);			
 8001708:	20df      	movs	r0, #223	; 0xdf
 800170a:	f7ff fed9 	bl	80014c0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x21);
 800170e:	2021      	movs	r0, #33	; 0x21
 8001710:	f7ff fef2 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0c);
 8001714:	200c      	movs	r0, #12
 8001716:	f7ff feef 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x02);
 800171a:	2002      	movs	r0, #2
 800171c:	f7ff feec 	bl	80014f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xF0);   
 8001720:	20f0      	movs	r0, #240	; 0xf0
 8001722:	f7ff fecd 	bl	80014c0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x45);
 8001726:	2045      	movs	r0, #69	; 0x45
 8001728:	f7ff fee6 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x09);
 800172c:	2009      	movs	r0, #9
 800172e:	f7ff fee3 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8001732:	2008      	movs	r0, #8
 8001734:	f7ff fee0 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8001738:	2008      	movs	r0, #8
 800173a:	f7ff fedd 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x26);
 800173e:	2026      	movs	r0, #38	; 0x26
 8001740:	f7ff feda 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x2A);
 8001744:	202a      	movs	r0, #42	; 0x2a
 8001746:	f7ff fed7 	bl	80014f8 <LCD_1IN28_SendData_8Bit>

 	LCD_1IN28_SendCommand(0xF1);    
 800174a:	20f1      	movs	r0, #241	; 0xf1
 800174c:	f7ff feb8 	bl	80014c0 <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x43);
 8001750:	2043      	movs	r0, #67	; 0x43
 8001752:	f7ff fed1 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x70);
 8001756:	2070      	movs	r0, #112	; 0x70
 8001758:	f7ff fece 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x72);
 800175c:	2072      	movs	r0, #114	; 0x72
 800175e:	f7ff fecb 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x36);
 8001762:	2036      	movs	r0, #54	; 0x36
 8001764:	f7ff fec8 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x37);  
 8001768:	2037      	movs	r0, #55	; 0x37
 800176a:	f7ff fec5 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x6F);
 800176e:	206f      	movs	r0, #111	; 0x6f
 8001770:	f7ff fec2 	bl	80014f8 <LCD_1IN28_SendData_8Bit>


 	LCD_1IN28_SendCommand(0xF2);   
 8001774:	20f2      	movs	r0, #242	; 0xf2
 8001776:	f7ff fea3 	bl	80014c0 <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x45);
 800177a:	2045      	movs	r0, #69	; 0x45
 800177c:	f7ff febc 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x09);
 8001780:	2009      	movs	r0, #9
 8001782:	f7ff feb9 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x08);
 8001786:	2008      	movs	r0, #8
 8001788:	f7ff feb6 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x08);
 800178c:	2008      	movs	r0, #8
 800178e:	f7ff feb3 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x26);
 8001792:	2026      	movs	r0, #38	; 0x26
 8001794:	f7ff feb0 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x2A);
 8001798:	202a      	movs	r0, #42	; 0x2a
 800179a:	f7ff fead 	bl	80014f8 <LCD_1IN28_SendData_8Bit>

 	LCD_1IN28_SendCommand(0xF3);   
 800179e:	20f3      	movs	r0, #243	; 0xf3
 80017a0:	f7ff fe8e 	bl	80014c0 <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x43);
 80017a4:	2043      	movs	r0, #67	; 0x43
 80017a6:	f7ff fea7 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x70);
 80017aa:	2070      	movs	r0, #112	; 0x70
 80017ac:	f7ff fea4 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x72);
 80017b0:	2072      	movs	r0, #114	; 0x72
 80017b2:	f7ff fea1 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x36);
 80017b6:	2036      	movs	r0, #54	; 0x36
 80017b8:	f7ff fe9e 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x37); 
 80017bc:	2037      	movs	r0, #55	; 0x37
 80017be:	f7ff fe9b 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x6F);
 80017c2:	206f      	movs	r0, #111	; 0x6f
 80017c4:	f7ff fe98 	bl	80014f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xED);	
 80017c8:	20ed      	movs	r0, #237	; 0xed
 80017ca:	f7ff fe79 	bl	80014c0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x1B); 
 80017ce:	201b      	movs	r0, #27
 80017d0:	f7ff fe92 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0B); 
 80017d4:	200b      	movs	r0, #11
 80017d6:	f7ff fe8f 	bl	80014f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xAE);			
 80017da:	20ae      	movs	r0, #174	; 0xae
 80017dc:	f7ff fe70 	bl	80014c0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x77);
 80017e0:	2077      	movs	r0, #119	; 0x77
 80017e2:	f7ff fe89 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	
	LCD_1IN28_SendCommand(0xCD);			
 80017e6:	20cd      	movs	r0, #205	; 0xcd
 80017e8:	f7ff fe6a 	bl	80014c0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x63);		
 80017ec:	2063      	movs	r0, #99	; 0x63
 80017ee:	f7ff fe83 	bl	80014f8 <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0x70);			
 80017f2:	2070      	movs	r0, #112	; 0x70
 80017f4:	f7ff fe64 	bl	80014c0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x07);
 80017f8:	2007      	movs	r0, #7
 80017fa:	f7ff fe7d 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 80017fe:	2007      	movs	r0, #7
 8001800:	f7ff fe7a 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x04);
 8001804:	2004      	movs	r0, #4
 8001806:	f7ff fe77 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0E); 
 800180a:	200e      	movs	r0, #14
 800180c:	f7ff fe74 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0F); 
 8001810:	200f      	movs	r0, #15
 8001812:	f7ff fe71 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x09);
 8001816:	2009      	movs	r0, #9
 8001818:	f7ff fe6e 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 800181c:	2007      	movs	r0, #7
 800181e:	f7ff fe6b 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8001822:	2008      	movs	r0, #8
 8001824:	f7ff fe68 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x03);
 8001828:	2003      	movs	r0, #3
 800182a:	f7ff fe65 	bl	80014f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xE8);			
 800182e:	20e8      	movs	r0, #232	; 0xe8
 8001830:	f7ff fe46 	bl	80014c0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x34);
 8001834:	2034      	movs	r0, #52	; 0x34
 8001836:	f7ff fe5f 	bl	80014f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x62);			
 800183a:	2062      	movs	r0, #98	; 0x62
 800183c:	f7ff fe40 	bl	80014c0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x18);
 8001840:	2018      	movs	r0, #24
 8001842:	f7ff fe59 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0D);
 8001846:	200d      	movs	r0, #13
 8001848:	f7ff fe56 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 800184c:	2071      	movs	r0, #113	; 0x71
 800184e:	f7ff fe53 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xED);
 8001852:	20ed      	movs	r0, #237	; 0xed
 8001854:	f7ff fe50 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 8001858:	2070      	movs	r0, #112	; 0x70
 800185a:	f7ff fe4d 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 800185e:	2070      	movs	r0, #112	; 0x70
 8001860:	f7ff fe4a 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x18);
 8001864:	2018      	movs	r0, #24
 8001866:	f7ff fe47 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0F);
 800186a:	200f      	movs	r0, #15
 800186c:	f7ff fe44 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 8001870:	2071      	movs	r0, #113	; 0x71
 8001872:	f7ff fe41 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xEF);
 8001876:	20ef      	movs	r0, #239	; 0xef
 8001878:	f7ff fe3e 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 800187c:	2070      	movs	r0, #112	; 0x70
 800187e:	f7ff fe3b 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8001882:	2070      	movs	r0, #112	; 0x70
 8001884:	f7ff fe38 	bl	80014f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x63);			
 8001888:	2063      	movs	r0, #99	; 0x63
 800188a:	f7ff fe19 	bl	80014c0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x18);
 800188e:	2018      	movs	r0, #24
 8001890:	f7ff fe32 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x11);
 8001894:	2011      	movs	r0, #17
 8001896:	f7ff fe2f 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 800189a:	2071      	movs	r0, #113	; 0x71
 800189c:	f7ff fe2c 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 80018a0:	20f1      	movs	r0, #241	; 0xf1
 80018a2:	f7ff fe29 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 80018a6:	2070      	movs	r0, #112	; 0x70
 80018a8:	f7ff fe26 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 80018ac:	2070      	movs	r0, #112	; 0x70
 80018ae:	f7ff fe23 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x18);
 80018b2:	2018      	movs	r0, #24
 80018b4:	f7ff fe20 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x13);
 80018b8:	2013      	movs	r0, #19
 80018ba:	f7ff fe1d 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 80018be:	2071      	movs	r0, #113	; 0x71
 80018c0:	f7ff fe1a 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF3);
 80018c4:	20f3      	movs	r0, #243	; 0xf3
 80018c6:	f7ff fe17 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 80018ca:	2070      	movs	r0, #112	; 0x70
 80018cc:	f7ff fe14 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 80018d0:	2070      	movs	r0, #112	; 0x70
 80018d2:	f7ff fe11 	bl	80014f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x64);			
 80018d6:	2064      	movs	r0, #100	; 0x64
 80018d8:	f7ff fdf2 	bl	80014c0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x28);
 80018dc:	2028      	movs	r0, #40	; 0x28
 80018de:	f7ff fe0b 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x29);
 80018e2:	2029      	movs	r0, #41	; 0x29
 80018e4:	f7ff fe08 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 80018e8:	20f1      	movs	r0, #241	; 0xf1
 80018ea:	f7ff fe05 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 80018ee:	2001      	movs	r0, #1
 80018f0:	f7ff fe02 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 80018f4:	20f1      	movs	r0, #241	; 0xf1
 80018f6:	f7ff fdff 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80018fa:	2000      	movs	r0, #0
 80018fc:	f7ff fdfc 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8001900:	2007      	movs	r0, #7
 8001902:	f7ff fdf9 	bl	80014f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x66);			
 8001906:	2066      	movs	r0, #102	; 0x66
 8001908:	f7ff fdda 	bl	80014c0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x3C);
 800190c:	203c      	movs	r0, #60	; 0x3c
 800190e:	f7ff fdf3 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001912:	2000      	movs	r0, #0
 8001914:	f7ff fdf0 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xCD);
 8001918:	20cd      	movs	r0, #205	; 0xcd
 800191a:	f7ff fded 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x67);
 800191e:	2067      	movs	r0, #103	; 0x67
 8001920:	f7ff fdea 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x45);
 8001924:	2045      	movs	r0, #69	; 0x45
 8001926:	f7ff fde7 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x45);
 800192a:	2045      	movs	r0, #69	; 0x45
 800192c:	f7ff fde4 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x10);
 8001930:	2010      	movs	r0, #16
 8001932:	f7ff fde1 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001936:	2000      	movs	r0, #0
 8001938:	f7ff fdde 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 800193c:	2000      	movs	r0, #0
 800193e:	f7ff fddb 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001942:	2000      	movs	r0, #0
 8001944:	f7ff fdd8 	bl	80014f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x67);			
 8001948:	2067      	movs	r0, #103	; 0x67
 800194a:	f7ff fdb9 	bl	80014c0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 800194e:	2000      	movs	r0, #0
 8001950:	f7ff fdd2 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x3C);
 8001954:	203c      	movs	r0, #60	; 0x3c
 8001956:	f7ff fdcf 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 800195a:	2000      	movs	r0, #0
 800195c:	f7ff fdcc 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001960:	2000      	movs	r0, #0
 8001962:	f7ff fdc9 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001966:	2000      	movs	r0, #0
 8001968:	f7ff fdc6 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 800196c:	2001      	movs	r0, #1
 800196e:	f7ff fdc3 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x54);
 8001972:	2054      	movs	r0, #84	; 0x54
 8001974:	f7ff fdc0 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x10);
 8001978:	2010      	movs	r0, #16
 800197a:	f7ff fdbd 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x32);
 800197e:	2032      	movs	r0, #50	; 0x32
 8001980:	f7ff fdba 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x98);
 8001984:	2098      	movs	r0, #152	; 0x98
 8001986:	f7ff fdb7 	bl	80014f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x74);			
 800198a:	2074      	movs	r0, #116	; 0x74
 800198c:	f7ff fd98 	bl	80014c0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x10);	
 8001990:	2010      	movs	r0, #16
 8001992:	f7ff fdb1 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x85);	
 8001996:	2085      	movs	r0, #133	; 0x85
 8001998:	f7ff fdae 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x80);
 800199c:	2080      	movs	r0, #128	; 0x80
 800199e:	f7ff fdab 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00); 
 80019a2:	2000      	movs	r0, #0
 80019a4:	f7ff fda8 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00); 
 80019a8:	2000      	movs	r0, #0
 80019aa:	f7ff fda5 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x4E);
 80019ae:	204e      	movs	r0, #78	; 0x4e
 80019b0:	f7ff fda2 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);					
 80019b4:	2000      	movs	r0, #0
 80019b6:	f7ff fd9f 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	
  LCD_1IN28_SendCommand(0x98);			
 80019ba:	2098      	movs	r0, #152	; 0x98
 80019bc:	f7ff fd80 	bl	80014c0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x3e);
 80019c0:	203e      	movs	r0, #62	; 0x3e
 80019c2:	f7ff fd99 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 80019c6:	2007      	movs	r0, #7
 80019c8:	f7ff fd96 	bl	80014f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x35);	
 80019cc:	2035      	movs	r0, #53	; 0x35
 80019ce:	f7ff fd77 	bl	80014c0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0x21);
 80019d2:	2021      	movs	r0, #33	; 0x21
 80019d4:	f7ff fd74 	bl	80014c0 <LCD_1IN28_SendCommand>

	LCD_1IN28_SendCommand(0x11);
 80019d8:	2011      	movs	r0, #17
 80019da:	f7ff fd71 	bl	80014c0 <LCD_1IN28_SendCommand>
	DEV_Delay_ms(120);
 80019de:	2078      	movs	r0, #120	; 0x78
 80019e0:	f000 fd82 	bl	80024e8 <HAL_Delay>
	LCD_1IN28_SendCommand(0x29);
 80019e4:	2029      	movs	r0, #41	; 0x29
 80019e6:	f7ff fd6b 	bl	80014c0 <LCD_1IN28_SendCommand>
	DEV_Delay_ms(20);
 80019ea:	2014      	movs	r0, #20
 80019ec:	f000 fd7c 	bl	80024e8 <HAL_Delay>
}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <LCD_1IN28_SetAttributes>:
function:	Set the resolution and scanning method of the screen
parameter:
		Scan_dir:   Scan direction
********************************************************************************/
static void LCD_1IN28_SetAttributes(UBYTE Scan_dir)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	71fb      	strb	r3, [r7, #7]
    //Get the screen scan direction
    LCD_1IN28.SCAN_DIR = Scan_dir;
 80019fe:	4a12      	ldr	r2, [pc, #72]	; (8001a48 <LCD_1IN28_SetAttributes+0x54>)
 8001a00:	79fb      	ldrb	r3, [r7, #7]
 8001a02:	7113      	strb	r3, [r2, #4]
    UBYTE MemoryAccessReg = 0x08;
 8001a04:	2308      	movs	r3, #8
 8001a06:	73fb      	strb	r3, [r7, #15]

    //Get GRAM and LCD width and height
    if(Scan_dir == HORIZONTAL) {
 8001a08:	79fb      	ldrb	r3, [r7, #7]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d108      	bne.n	8001a20 <LCD_1IN28_SetAttributes+0x2c>
        LCD_1IN28.HEIGHT	= LCD_1IN28_HEIGHT;
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <LCD_1IN28_SetAttributes+0x54>)
 8001a10:	22f0      	movs	r2, #240	; 0xf0
 8001a12:	805a      	strh	r2, [r3, #2]
        LCD_1IN28.WIDTH   = LCD_1IN28_WIDTH;
 8001a14:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <LCD_1IN28_SetAttributes+0x54>)
 8001a16:	22f0      	movs	r2, #240	; 0xf0
 8001a18:	801a      	strh	r2, [r3, #0]
        MemoryAccessReg = 0XC8;
 8001a1a:	23c8      	movs	r3, #200	; 0xc8
 8001a1c:	73fb      	strb	r3, [r7, #15]
 8001a1e:	e007      	b.n	8001a30 <LCD_1IN28_SetAttributes+0x3c>
    } else {
        LCD_1IN28.HEIGHT	= LCD_1IN28_WIDTH;
 8001a20:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <LCD_1IN28_SetAttributes+0x54>)
 8001a22:	22f0      	movs	r2, #240	; 0xf0
 8001a24:	805a      	strh	r2, [r3, #2]
        LCD_1IN28.WIDTH   = LCD_1IN28_HEIGHT;
 8001a26:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <LCD_1IN28_SetAttributes+0x54>)
 8001a28:	22f0      	movs	r2, #240	; 0xf0
 8001a2a:	801a      	strh	r2, [r3, #0]
        MemoryAccessReg = 0X68;
 8001a2c:	2368      	movs	r3, #104	; 0x68
 8001a2e:	73fb      	strb	r3, [r7, #15]
    }

    // Set the read / write scan direction of the frame memory
    LCD_1IN28_SendCommand(0x36); //MX, MY, RGB mode
 8001a30:	2036      	movs	r0, #54	; 0x36
 8001a32:	f7ff fd45 	bl	80014c0 <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(MemoryAccessReg);	//0x08 set RGB
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff fd5d 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
}
 8001a3e:	bf00      	nop
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	200000b4 	.word	0x200000b4

08001a4c <LCD_1IN28_Init>:
/********************************************************************************
function :	Initialize the lcd
parameter:
********************************************************************************/
void LCD_1IN28_Init(UBYTE Scan_dir)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	71fb      	strb	r3, [r7, #7]

    //Hardware reset
    LCD_1IN28_Reset();
 8001a56:	f7ff fd11 	bl	800147c <LCD_1IN28_Reset>

    //Set the resolution and scanning method of the screen
    LCD_1IN28_SetAttributes(Scan_dir);
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff ffc9 	bl	80019f4 <LCD_1IN28_SetAttributes>
    
    //Set the initialization register
    LCD_1IN28_InitReg();
 8001a62:	f7ff fd95 	bl	8001590 <LCD_1IN28_InitReg>
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <LCD_1IN28_SetWindows>:
		Ystart  :   Y direction Start coordinates
		Xend    :   X direction end coordinates
		Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_1IN28_SetWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend)
{
 8001a6e:	b590      	push	{r4, r7, lr}
 8001a70:	b083      	sub	sp, #12
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	4604      	mov	r4, r0
 8001a76:	4608      	mov	r0, r1
 8001a78:	4611      	mov	r1, r2
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	4623      	mov	r3, r4
 8001a7e:	80fb      	strh	r3, [r7, #6]
 8001a80:	4603      	mov	r3, r0
 8001a82:	80bb      	strh	r3, [r7, #4]
 8001a84:	460b      	mov	r3, r1
 8001a86:	807b      	strh	r3, [r7, #2]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	803b      	strh	r3, [r7, #0]
    //set the X coordinates
    LCD_1IN28_SendCommand(0x2A);
 8001a8c:	202a      	movs	r0, #42	; 0x2a
 8001a8e:	f7ff fd17 	bl	80014c0 <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(0x00);
 8001a92:	2000      	movs	r0, #0
 8001a94:	f7ff fd30 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Xstart);
 8001a98:	88fb      	ldrh	r3, [r7, #6]
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff fd2b 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	  LCD_1IN28_SendData_8Bit(0x00);
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	f7ff fd28 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Xend);
 8001aa8:	887b      	ldrh	r3, [r7, #2]
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff fd23 	bl	80014f8 <LCD_1IN28_SendData_8Bit>

    //set the Y coordinates
    LCD_1IN28_SendCommand(0x2B);
 8001ab2:	202b      	movs	r0, #43	; 0x2b
 8001ab4:	f7ff fd04 	bl	80014c0 <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(0x00);
 8001ab8:	2000      	movs	r0, #0
 8001aba:	f7ff fd1d 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	  LCD_1IN28_SendData_8Bit(Ystart);
 8001abe:	88bb      	ldrh	r3, [r7, #4]
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff fd18 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
	  LCD_1IN28_SendData_8Bit(0x00);
 8001ac8:	2000      	movs	r0, #0
 8001aca:	f7ff fd15 	bl	80014f8 <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Yend);
 8001ace:	883b      	ldrh	r3, [r7, #0]
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff fd10 	bl	80014f8 <LCD_1IN28_SendData_8Bit>

    LCD_1IN28_SendCommand(0X2C);
 8001ad8:	202c      	movs	r0, #44	; 0x2c
 8001ada:	f7ff fcf1 	bl	80014c0 <LCD_1IN28_SendCommand>
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd90      	pop	{r4, r7, pc}
	...

08001ae8 <LCD_1IN28_Clear>:
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void LCD_1IN28_Clear(UWORD Color)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	80fb      	strh	r3, [r7, #6]
    UWORD i,j;
    LCD_1IN28_SetWindows(0, 0, LCD_1IN28_WIDTH-1, LCD_1IN28_HEIGHT-1);
 8001af2:	23ef      	movs	r3, #239	; 0xef
 8001af4:	22ef      	movs	r2, #239	; 0xef
 8001af6:	2100      	movs	r1, #0
 8001af8:	2000      	movs	r0, #0
 8001afa:	f7ff ffb8 	bl	8001a6e <LCD_1IN28_SetWindows>

	DEV_Digital_Write(DEV_DC_PIN, 1);
 8001afe:	2201      	movs	r2, #1
 8001b00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b04:	4812      	ldr	r0, [pc, #72]	; (8001b50 <LCD_1IN28_Clear+0x68>)
 8001b06:	f000 ff7b 	bl	8002a00 <HAL_GPIO_WritePin>
	for(i = 0; i < LCD_1IN28_WIDTH; i++){
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	81fb      	strh	r3, [r7, #14]
 8001b0e:	e017      	b.n	8001b40 <LCD_1IN28_Clear+0x58>
		for(j = 0; j < LCD_1IN28_HEIGHT; j++){
 8001b10:	2300      	movs	r3, #0
 8001b12:	81bb      	strh	r3, [r7, #12]
 8001b14:	e00e      	b.n	8001b34 <LCD_1IN28_Clear+0x4c>
			DEV_SPI_WRITE(Color>>8);
 8001b16:	88fb      	ldrh	r3, [r7, #6]
 8001b18:	0a1b      	lsrs	r3, r3, #8
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff fa06 	bl	8000f30 <DEV_SPI_WRite>
			DEV_SPI_WRITE(Color);
 8001b24:	88fb      	ldrh	r3, [r7, #6]
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff fa01 	bl	8000f30 <DEV_SPI_WRite>
		for(j = 0; j < LCD_1IN28_HEIGHT; j++){
 8001b2e:	89bb      	ldrh	r3, [r7, #12]
 8001b30:	3301      	adds	r3, #1
 8001b32:	81bb      	strh	r3, [r7, #12]
 8001b34:	89bb      	ldrh	r3, [r7, #12]
 8001b36:	2bef      	cmp	r3, #239	; 0xef
 8001b38:	d9ed      	bls.n	8001b16 <LCD_1IN28_Clear+0x2e>
	for(i = 0; i < LCD_1IN28_WIDTH; i++){
 8001b3a:	89fb      	ldrh	r3, [r7, #14]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	81fb      	strh	r3, [r7, #14]
 8001b40:	89fb      	ldrh	r3, [r7, #14]
 8001b42:	2bef      	cmp	r3, #239	; 0xef
 8001b44:	d9e4      	bls.n	8001b10 <LCD_1IN28_Clear+0x28>
		}
	 }
}
 8001b46:	bf00      	nop
 8001b48:	bf00      	nop
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40010800 	.word	0x40010800

08001b54 <LCD_1IN28_DrawPaint>:
	    X	: 	Set the X coordinate
	    Y	:	Set the Y coordinate
	  Color :	Set the color
******************************************************************************/
void LCD_1IN28_DrawPaint(UWORD x, UWORD y, UWORD Color)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	80fb      	strh	r3, [r7, #6]
 8001b5e:	460b      	mov	r3, r1
 8001b60:	80bb      	strh	r3, [r7, #4]
 8001b62:	4613      	mov	r3, r2
 8001b64:	807b      	strh	r3, [r7, #2]
	LCD_1IN28_SetWindows(x,y,x,y);
 8001b66:	88bb      	ldrh	r3, [r7, #4]
 8001b68:	88fa      	ldrh	r2, [r7, #6]
 8001b6a:	88b9      	ldrh	r1, [r7, #4]
 8001b6c:	88f8      	ldrh	r0, [r7, #6]
 8001b6e:	f7ff ff7e 	bl	8001a6e <LCD_1IN28_SetWindows>
	LCD_1IN28_SendData_16Bit(Color); 	    
 8001b72:	887b      	ldrh	r3, [r7, #2]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff fce1 	bl	800153c <LCD_1IN28_SendData_16Bit>
}
 8001b7a:	bf00      	nop
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <LCD_1IN28_SetBackLight>:
	Setting backlight
parameter	:
	  value : Range 0~1000   Duty cycle is value/1000	
*******************************************************************************/
void LCD_1IN28_SetBackLight(UWORD Value)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	80fb      	strh	r3, [r7, #6]
	DEV_Set_PWM(Value);
 8001b8e:	4a04      	ldr	r2, [pc, #16]	; (8001ba0 <LCD_1IN28_SetBackLight+0x1c>)
 8001b90:	88fb      	ldrh	r3, [r7, #6]
 8001b92:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	40012c00 	.word	0x40012c00

08001ba4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001baa:	f107 0308 	add.w	r3, r7, #8
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	605a      	str	r2, [r3, #4]
 8001bb4:	609a      	str	r2, [r3, #8]
 8001bb6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb8:	4b21      	ldr	r3, [pc, #132]	; (8001c40 <MX_GPIO_Init+0x9c>)
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	4a20      	ldr	r2, [pc, #128]	; (8001c40 <MX_GPIO_Init+0x9c>)
 8001bbe:	f043 0304 	orr.w	r3, r3, #4
 8001bc2:	6193      	str	r3, [r2, #24]
 8001bc4:	4b1e      	ldr	r3, [pc, #120]	; (8001c40 <MX_GPIO_Init+0x9c>)
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	607b      	str	r3, [r7, #4]
 8001bce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd0:	4b1b      	ldr	r3, [pc, #108]	; (8001c40 <MX_GPIO_Init+0x9c>)
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	4a1a      	ldr	r2, [pc, #104]	; (8001c40 <MX_GPIO_Init+0x9c>)
 8001bd6:	f043 0308 	orr.w	r3, r3, #8
 8001bda:	6193      	str	r3, [r2, #24]
 8001bdc:	4b18      	ldr	r3, [pc, #96]	; (8001c40 <MX_GPIO_Init+0x9c>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	f003 0308 	and.w	r3, r3, #8
 8001be4:	603b      	str	r3, [r7, #0]
 8001be6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001be8:	2200      	movs	r2, #0
 8001bea:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001bee:	4815      	ldr	r0, [pc, #84]	; (8001c44 <MX_GPIO_Init+0xa0>)
 8001bf0:	f000 ff06 	bl	8002a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2140      	movs	r1, #64	; 0x40
 8001bf8:	4813      	ldr	r0, [pc, #76]	; (8001c48 <MX_GPIO_Init+0xa4>)
 8001bfa:	f000 ff01 	bl	8002a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bfe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c04:	2301      	movs	r3, #1
 8001c06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c10:	f107 0308 	add.w	r3, r7, #8
 8001c14:	4619      	mov	r1, r3
 8001c16:	480b      	ldr	r0, [pc, #44]	; (8001c44 <MX_GPIO_Init+0xa0>)
 8001c18:	f000 fd6e 	bl	80026f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c1c:	2340      	movs	r3, #64	; 0x40
 8001c1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c20:	2301      	movs	r3, #1
 8001c22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2c:	f107 0308 	add.w	r3, r7, #8
 8001c30:	4619      	mov	r1, r3
 8001c32:	4805      	ldr	r0, [pc, #20]	; (8001c48 <MX_GPIO_Init+0xa4>)
 8001c34:	f000 fd60 	bl	80026f8 <HAL_GPIO_Init>

}
 8001c38:	bf00      	nop
 8001c3a:	3718      	adds	r7, #24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40010800 	.word	0x40010800
 8001c48:	40010c00 	.word	0x40010c00

08001c4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c50:	f000 fbe8 	bl	8002424 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c54:	f000 f80b 	bl	8001c6e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c58:	f7ff ffa4 	bl	8001ba4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001c5c:	f000 fa6c 	bl	8002138 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001c60:	f000 f9c4 	bl	8001fec <MX_TIM2_Init>
  MX_SPI1_Init();
 8001c64:	f000 f844 	bl	8001cf0 <MX_SPI1_Init>
  Robot_eyes(); 
 8001c68:	f000 fb6e 	bl	8002348 <Robot_eyes>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c6c:	e7fe      	b.n	8001c6c <main+0x20>

08001c6e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b090      	sub	sp, #64	; 0x40
 8001c72:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c74:	f107 0318 	add.w	r3, r7, #24
 8001c78:	2228      	movs	r2, #40	; 0x28
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f002 fd07 	bl	8004690 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c82:	1d3b      	adds	r3, r7, #4
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c90:	2302      	movs	r3, #2
 8001c92:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c94:	2301      	movs	r3, #1
 8001c96:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c98:	2310      	movs	r3, #16
 8001c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ca0:	f107 0318 	add.w	r3, r7, #24
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f000 fec3 	bl	8002a30 <HAL_RCC_OscConfig>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001cb0:	f000 f818 	bl	8001ce4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cb4:	230f      	movs	r3, #15
 8001cb6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001cc8:	1d3b      	adds	r3, r7, #4
 8001cca:	2100      	movs	r1, #0
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f001 f931 	bl	8002f34 <HAL_RCC_ClockConfig>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001cd8:	f000 f804 	bl	8001ce4 <Error_Handler>
  }
}
 8001cdc:	bf00      	nop
 8001cde:	3740      	adds	r7, #64	; 0x40
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ce8:	b672      	cpsid	i
}
 8001cea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cec:	e7fe      	b.n	8001cec <Error_Handler+0x8>
	...

08001cf0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001cf4:	4b17      	ldr	r3, [pc, #92]	; (8001d54 <MX_SPI1_Init+0x64>)
 8001cf6:	4a18      	ldr	r2, [pc, #96]	; (8001d58 <MX_SPI1_Init+0x68>)
 8001cf8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cfa:	4b16      	ldr	r3, [pc, #88]	; (8001d54 <MX_SPI1_Init+0x64>)
 8001cfc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d02:	4b14      	ldr	r3, [pc, #80]	; (8001d54 <MX_SPI1_Init+0x64>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d08:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <MX_SPI1_Init+0x64>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d0e:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <MX_SPI1_Init+0x64>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d14:	4b0f      	ldr	r3, [pc, #60]	; (8001d54 <MX_SPI1_Init+0x64>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d1a:	4b0e      	ldr	r3, [pc, #56]	; (8001d54 <MX_SPI1_Init+0x64>)
 8001d1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d20:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d22:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <MX_SPI1_Init+0x64>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d28:	4b0a      	ldr	r3, [pc, #40]	; (8001d54 <MX_SPI1_Init+0x64>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d2e:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <MX_SPI1_Init+0x64>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d34:	4b07      	ldr	r3, [pc, #28]	; (8001d54 <MX_SPI1_Init+0x64>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d3a:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <MX_SPI1_Init+0x64>)
 8001d3c:	220a      	movs	r2, #10
 8001d3e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d40:	4804      	ldr	r0, [pc, #16]	; (8001d54 <MX_SPI1_Init+0x64>)
 8001d42:	f001 fa85 	bl	8003250 <HAL_SPI_Init>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d4c:	f7ff ffca 	bl	8001ce4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d50:	bf00      	nop
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	200000bc 	.word	0x200000bc
 8001d58:	40013000 	.word	0x40013000

08001d5c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b088      	sub	sp, #32
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d64:	f107 0310 	add.w	r3, r7, #16
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a1b      	ldr	r2, [pc, #108]	; (8001de4 <HAL_SPI_MspInit+0x88>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d12f      	bne.n	8001ddc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d7c:	4b1a      	ldr	r3, [pc, #104]	; (8001de8 <HAL_SPI_MspInit+0x8c>)
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	4a19      	ldr	r2, [pc, #100]	; (8001de8 <HAL_SPI_MspInit+0x8c>)
 8001d82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d86:	6193      	str	r3, [r2, #24]
 8001d88:	4b17      	ldr	r3, [pc, #92]	; (8001de8 <HAL_SPI_MspInit+0x8c>)
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d94:	4b14      	ldr	r3, [pc, #80]	; (8001de8 <HAL_SPI_MspInit+0x8c>)
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	4a13      	ldr	r2, [pc, #76]	; (8001de8 <HAL_SPI_MspInit+0x8c>)
 8001d9a:	f043 0304 	orr.w	r3, r3, #4
 8001d9e:	6193      	str	r3, [r2, #24]
 8001da0:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <HAL_SPI_MspInit+0x8c>)
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	60bb      	str	r3, [r7, #8]
 8001daa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001dac:	23a0      	movs	r3, #160	; 0xa0
 8001dae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db0:	2302      	movs	r3, #2
 8001db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001db4:	2303      	movs	r3, #3
 8001db6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db8:	f107 0310 	add.w	r3, r7, #16
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	480b      	ldr	r0, [pc, #44]	; (8001dec <HAL_SPI_MspInit+0x90>)
 8001dc0:	f000 fc9a 	bl	80026f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001dc4:	2340      	movs	r3, #64	; 0x40
 8001dc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd0:	f107 0310 	add.w	r3, r7, #16
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4805      	ldr	r0, [pc, #20]	; (8001dec <HAL_SPI_MspInit+0x90>)
 8001dd8:	f000 fc8e 	bl	80026f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001ddc:	bf00      	nop
 8001dde:	3720      	adds	r7, #32
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40013000 	.word	0x40013000
 8001de8:	40021000 	.word	0x40021000
 8001dec:	40010800 	.word	0x40010800

08001df0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001df6:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <HAL_MspInit+0x5c>)
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	4a14      	ldr	r2, [pc, #80]	; (8001e4c <HAL_MspInit+0x5c>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	6193      	str	r3, [r2, #24]
 8001e02:	4b12      	ldr	r3, [pc, #72]	; (8001e4c <HAL_MspInit+0x5c>)
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	60bb      	str	r3, [r7, #8]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e0e:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <HAL_MspInit+0x5c>)
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	4a0e      	ldr	r2, [pc, #56]	; (8001e4c <HAL_MspInit+0x5c>)
 8001e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e18:	61d3      	str	r3, [r2, #28]
 8001e1a:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <HAL_MspInit+0x5c>)
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e22:	607b      	str	r3, [r7, #4]
 8001e24:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e26:	4b0a      	ldr	r3, [pc, #40]	; (8001e50 <HAL_MspInit+0x60>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	4a04      	ldr	r2, [pc, #16]	; (8001e50 <HAL_MspInit+0x60>)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e42:	bf00      	nop
 8001e44:	3714      	adds	r7, #20
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc80      	pop	{r7}
 8001e4a:	4770      	bx	lr
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	40010000 	.word	0x40010000

08001e54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e58:	e7fe      	b.n	8001e58 <NMI_Handler+0x4>

08001e5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e5e:	e7fe      	b.n	8001e5e <HardFault_Handler+0x4>

08001e60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e64:	e7fe      	b.n	8001e64 <MemManage_Handler+0x4>

08001e66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e66:	b480      	push	{r7}
 8001e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e6a:	e7fe      	b.n	8001e6a <BusFault_Handler+0x4>

08001e6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e70:	e7fe      	b.n	8001e70 <UsageFault_Handler+0x4>

08001e72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e72:	b480      	push	{r7}
 8001e74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr

08001e7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc80      	pop	{r7}
 8001e88:	4770      	bx	lr

08001e8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc80      	pop	{r7}
 8001e94:	4770      	bx	lr

08001e96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e9a:	f000 fb09 	bl	80024b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b086      	sub	sp, #24
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60f8      	str	r0, [r7, #12]
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eae:	2300      	movs	r3, #0
 8001eb0:	617b      	str	r3, [r7, #20]
 8001eb2:	e00a      	b.n	8001eca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001eb4:	f3af 8000 	nop.w
 8001eb8:	4601      	mov	r1, r0
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	1c5a      	adds	r2, r3, #1
 8001ebe:	60ba      	str	r2, [r7, #8]
 8001ec0:	b2ca      	uxtb	r2, r1
 8001ec2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	617b      	str	r3, [r7, #20]
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	dbf0      	blt.n	8001eb4 <_read+0x12>
  }

  return len;
 8001ed2:	687b      	ldr	r3, [r7, #4]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3718      	adds	r7, #24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]
 8001eec:	e009      	b.n	8001f02 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	1c5a      	adds	r2, r3, #1
 8001ef2:	60ba      	str	r2, [r7, #8]
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	3301      	adds	r3, #1
 8001f00:	617b      	str	r3, [r7, #20]
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	dbf1      	blt.n	8001eee <_write+0x12>
  }
  return len;
 8001f0a:	687b      	ldr	r3, [r7, #4]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <_close>:

int _close(int file)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bc80      	pop	{r7}
 8001f28:	4770      	bx	lr

08001f2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
 8001f32:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f3a:	605a      	str	r2, [r3, #4]
  return 0;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bc80      	pop	{r7}
 8001f46:	4770      	bx	lr

08001f48 <_isatty>:

int _isatty(int file)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f50:	2301      	movs	r3, #1
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr

08001f5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3714      	adds	r7, #20
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr

08001f74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f7c:	4a14      	ldr	r2, [pc, #80]	; (8001fd0 <_sbrk+0x5c>)
 8001f7e:	4b15      	ldr	r3, [pc, #84]	; (8001fd4 <_sbrk+0x60>)
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f88:	4b13      	ldr	r3, [pc, #76]	; (8001fd8 <_sbrk+0x64>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d102      	bne.n	8001f96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f90:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <_sbrk+0x64>)
 8001f92:	4a12      	ldr	r2, [pc, #72]	; (8001fdc <_sbrk+0x68>)
 8001f94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f96:	4b10      	ldr	r3, [pc, #64]	; (8001fd8 <_sbrk+0x64>)
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d207      	bcs.n	8001fb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fa4:	f002 fbd2 	bl	800474c <__errno>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	220c      	movs	r2, #12
 8001fac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fae:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb2:	e009      	b.n	8001fc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fb4:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <_sbrk+0x64>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fba:	4b07      	ldr	r3, [pc, #28]	; (8001fd8 <_sbrk+0x64>)
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	4a05      	ldr	r2, [pc, #20]	; (8001fd8 <_sbrk+0x64>)
 8001fc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20005000 	.word	0x20005000
 8001fd4:	00000400 	.word	0x00000400
 8001fd8:	20000114 	.word	0x20000114
 8001fdc:	200002f8 	.word	0x200002f8

08001fe0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fe4:	bf00      	nop
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bc80      	pop	{r7}
 8001fea:	4770      	bx	lr

08001fec <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08a      	sub	sp, #40	; 0x28
 8001ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ff2:	f107 0320 	add.w	r3, r7, #32
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ffc:	1d3b      	adds	r3, r7, #4
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	605a      	str	r2, [r3, #4]
 8002004:	609a      	str	r2, [r3, #8]
 8002006:	60da      	str	r2, [r3, #12]
 8002008:	611a      	str	r2, [r3, #16]
 800200a:	615a      	str	r2, [r3, #20]
 800200c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800200e:	4b23      	ldr	r3, [pc, #140]	; (800209c <MX_TIM2_Init+0xb0>)
 8002010:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002014:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8002016:	4b21      	ldr	r3, [pc, #132]	; (800209c <MX_TIM2_Init+0xb0>)
 8002018:	2247      	movs	r2, #71	; 0x47
 800201a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800201c:	4b1f      	ldr	r3, [pc, #124]	; (800209c <MX_TIM2_Init+0xb0>)
 800201e:	2200      	movs	r2, #0
 8002020:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002022:	4b1e      	ldr	r3, [pc, #120]	; (800209c <MX_TIM2_Init+0xb0>)
 8002024:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002028:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800202a:	4b1c      	ldr	r3, [pc, #112]	; (800209c <MX_TIM2_Init+0xb0>)
 800202c:	2200      	movs	r2, #0
 800202e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002030:	4b1a      	ldr	r3, [pc, #104]	; (800209c <MX_TIM2_Init+0xb0>)
 8002032:	2200      	movs	r2, #0
 8002034:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002036:	4819      	ldr	r0, [pc, #100]	; (800209c <MX_TIM2_Init+0xb0>)
 8002038:	f001 fb78 	bl	800372c <HAL_TIM_PWM_Init>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002042:	f7ff fe4f 	bl	8001ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002046:	2300      	movs	r3, #0
 8002048:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800204a:	2300      	movs	r3, #0
 800204c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800204e:	f107 0320 	add.w	r3, r7, #32
 8002052:	4619      	mov	r1, r3
 8002054:	4811      	ldr	r0, [pc, #68]	; (800209c <MX_TIM2_Init+0xb0>)
 8002056:	f001 ff2b 	bl	8003eb0 <HAL_TIMEx_MasterConfigSynchronization>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002060:	f7ff fe40 	bl	8001ce4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002064:	2360      	movs	r3, #96	; 0x60
 8002066:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8002068:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800206c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800206e:	2300      	movs	r3, #0
 8002070:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002072:	2300      	movs	r3, #0
 8002074:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002076:	1d3b      	adds	r3, r7, #4
 8002078:	2200      	movs	r2, #0
 800207a:	4619      	mov	r1, r3
 800207c:	4807      	ldr	r0, [pc, #28]	; (800209c <MX_TIM2_Init+0xb0>)
 800207e:	f001 fc47 	bl	8003910 <HAL_TIM_PWM_ConfigChannel>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8002088:	f7ff fe2c 	bl	8001ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800208c:	4803      	ldr	r0, [pc, #12]	; (800209c <MX_TIM2_Init+0xb0>)
 800208e:	f000 f823 	bl	80020d8 <HAL_TIM_MspPostInit>

}
 8002092:	bf00      	nop
 8002094:	3728      	adds	r7, #40	; 0x28
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20000118 	.word	0x20000118

080020a0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020b0:	d10b      	bne.n	80020ca <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020b2:	4b08      	ldr	r3, [pc, #32]	; (80020d4 <HAL_TIM_PWM_MspInit+0x34>)
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	4a07      	ldr	r2, [pc, #28]	; (80020d4 <HAL_TIM_PWM_MspInit+0x34>)
 80020b8:	f043 0301 	orr.w	r3, r3, #1
 80020bc:	61d3      	str	r3, [r2, #28]
 80020be:	4b05      	ldr	r3, [pc, #20]	; (80020d4 <HAL_TIM_PWM_MspInit+0x34>)
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80020ca:	bf00      	nop
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr
 80020d4:	40021000 	.word	0x40021000

080020d8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b088      	sub	sp, #32
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e0:	f107 0310 	add.w	r3, r7, #16
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	605a      	str	r2, [r3, #4]
 80020ea:	609a      	str	r2, [r3, #8]
 80020ec:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020f6:	d117      	bne.n	8002128 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f8:	4b0d      	ldr	r3, [pc, #52]	; (8002130 <HAL_TIM_MspPostInit+0x58>)
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	4a0c      	ldr	r2, [pc, #48]	; (8002130 <HAL_TIM_MspPostInit+0x58>)
 80020fe:	f043 0304 	orr.w	r3, r3, #4
 8002102:	6193      	str	r3, [r2, #24]
 8002104:	4b0a      	ldr	r3, [pc, #40]	; (8002130 <HAL_TIM_MspPostInit+0x58>)
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002110:	2301      	movs	r3, #1
 8002112:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002114:	2302      	movs	r3, #2
 8002116:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002118:	2302      	movs	r3, #2
 800211a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800211c:	f107 0310 	add.w	r3, r7, #16
 8002120:	4619      	mov	r1, r3
 8002122:	4804      	ldr	r0, [pc, #16]	; (8002134 <HAL_TIM_MspPostInit+0x5c>)
 8002124:	f000 fae8 	bl	80026f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002128:	bf00      	nop
 800212a:	3720      	adds	r7, #32
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40021000 	.word	0x40021000
 8002134:	40010800 	.word	0x40010800

08002138 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800213c:	4b11      	ldr	r3, [pc, #68]	; (8002184 <MX_USART2_UART_Init+0x4c>)
 800213e:	4a12      	ldr	r2, [pc, #72]	; (8002188 <MX_USART2_UART_Init+0x50>)
 8002140:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002142:	4b10      	ldr	r3, [pc, #64]	; (8002184 <MX_USART2_UART_Init+0x4c>)
 8002144:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002148:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800214a:	4b0e      	ldr	r3, [pc, #56]	; (8002184 <MX_USART2_UART_Init+0x4c>)
 800214c:	2200      	movs	r2, #0
 800214e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002150:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <MX_USART2_UART_Init+0x4c>)
 8002152:	2200      	movs	r2, #0
 8002154:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002156:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <MX_USART2_UART_Init+0x4c>)
 8002158:	2200      	movs	r2, #0
 800215a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800215c:	4b09      	ldr	r3, [pc, #36]	; (8002184 <MX_USART2_UART_Init+0x4c>)
 800215e:	220c      	movs	r2, #12
 8002160:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002162:	4b08      	ldr	r3, [pc, #32]	; (8002184 <MX_USART2_UART_Init+0x4c>)
 8002164:	2200      	movs	r2, #0
 8002166:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002168:	4b06      	ldr	r3, [pc, #24]	; (8002184 <MX_USART2_UART_Init+0x4c>)
 800216a:	2200      	movs	r2, #0
 800216c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800216e:	4805      	ldr	r0, [pc, #20]	; (8002184 <MX_USART2_UART_Init+0x4c>)
 8002170:	f001 fefc 	bl	8003f6c <HAL_UART_Init>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800217a:	f7ff fdb3 	bl	8001ce4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	20000160 	.word	0x20000160
 8002188:	40004400 	.word	0x40004400

0800218c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b088      	sub	sp, #32
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002194:	f107 0310 	add.w	r3, r7, #16
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a1b      	ldr	r2, [pc, #108]	; (8002214 <HAL_UART_MspInit+0x88>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d12f      	bne.n	800220c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021ac:	4b1a      	ldr	r3, [pc, #104]	; (8002218 <HAL_UART_MspInit+0x8c>)
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	4a19      	ldr	r2, [pc, #100]	; (8002218 <HAL_UART_MspInit+0x8c>)
 80021b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021b6:	61d3      	str	r3, [r2, #28]
 80021b8:	4b17      	ldr	r3, [pc, #92]	; (8002218 <HAL_UART_MspInit+0x8c>)
 80021ba:	69db      	ldr	r3, [r3, #28]
 80021bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c4:	4b14      	ldr	r3, [pc, #80]	; (8002218 <HAL_UART_MspInit+0x8c>)
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	4a13      	ldr	r2, [pc, #76]	; (8002218 <HAL_UART_MspInit+0x8c>)
 80021ca:	f043 0304 	orr.w	r3, r3, #4
 80021ce:	6193      	str	r3, [r2, #24]
 80021d0:	4b11      	ldr	r3, [pc, #68]	; (8002218 <HAL_UART_MspInit+0x8c>)
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	f003 0304 	and.w	r3, r3, #4
 80021d8:	60bb      	str	r3, [r7, #8]
 80021da:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021dc:	2304      	movs	r3, #4
 80021de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e0:	2302      	movs	r3, #2
 80021e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021e4:	2303      	movs	r3, #3
 80021e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e8:	f107 0310 	add.w	r3, r7, #16
 80021ec:	4619      	mov	r1, r3
 80021ee:	480b      	ldr	r0, [pc, #44]	; (800221c <HAL_UART_MspInit+0x90>)
 80021f0:	f000 fa82 	bl	80026f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80021f4:	2308      	movs	r3, #8
 80021f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002200:	f107 0310 	add.w	r3, r7, #16
 8002204:	4619      	mov	r1, r3
 8002206:	4805      	ldr	r0, [pc, #20]	; (800221c <HAL_UART_MspInit+0x90>)
 8002208:	f000 fa76 	bl	80026f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800220c:	bf00      	nop
 800220e:	3720      	adds	r7, #32
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40004400 	.word	0x40004400
 8002218:	40021000 	.word	0x40021000
 800221c:	40010800 	.word	0x40010800

08002220 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002220:	f7ff fede 	bl	8001fe0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002224:	480b      	ldr	r0, [pc, #44]	; (8002254 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002226:	490c      	ldr	r1, [pc, #48]	; (8002258 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002228:	4a0c      	ldr	r2, [pc, #48]	; (800225c <LoopFillZerobss+0x16>)
  movs r3, #0
 800222a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800222c:	e002      	b.n	8002234 <LoopCopyDataInit>

0800222e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800222e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002230:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002232:	3304      	adds	r3, #4

08002234 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002234:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002236:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002238:	d3f9      	bcc.n	800222e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800223a:	4a09      	ldr	r2, [pc, #36]	; (8002260 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800223c:	4c09      	ldr	r4, [pc, #36]	; (8002264 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800223e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002240:	e001      	b.n	8002246 <LoopFillZerobss>

08002242 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002242:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002244:	3204      	adds	r2, #4

08002246 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002246:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002248:	d3fb      	bcc.n	8002242 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800224a:	f002 fa85 	bl	8004758 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800224e:	f7ff fcfd 	bl	8001c4c <main>
  bx lr
 8002252:	4770      	bx	lr
  ldr r0, =_sdata
 8002254:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002258:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800225c:	08005664 	.word	0x08005664
  ldr r2, =_sbss
 8002260:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002264:	200002f8 	.word	0x200002f8

08002268 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002268:	e7fe      	b.n	8002268 <ADC1_2_IRQHandler>

0800226a <Paint_DrawFilledEllipse>:
#include "LCD_Test.h"
#include "LCD_1in28.h"
#include "DEV_Config.h"

// Function to draw a filled vertical ellipse
void Paint_DrawFilledEllipse(int center_x, int center_y, int a, int b, int color) {
 800226a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800226c:	b08b      	sub	sp, #44	; 0x2c
 800226e:	af04      	add	r7, sp, #16
 8002270:	60f8      	str	r0, [r7, #12]
 8002272:	60b9      	str	r1, [r7, #8]
 8002274:	607a      	str	r2, [r7, #4]
 8002276:	603b      	str	r3, [r7, #0]
    // Draw the filled ellipse by drawing horizontal lines for each y-value
    for (int y = -a; y <= a; y++) {
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	425b      	negs	r3, r3
 800227c:	617b      	str	r3, [r7, #20]
 800227e:	e05a      	b.n	8002336 <Paint_DrawFilledEllipse+0xcc>
        // Calculate the width of the ellipse at this y value
        int ellipse_width = (int)(b * sqrt(1 - (y * y) / (float)(a * a)));
 8002280:	6838      	ldr	r0, [r7, #0]
 8002282:	f7fe f8b5 	bl	80003f0 <__aeabi_i2d>
 8002286:	4604      	mov	r4, r0
 8002288:	460d      	mov	r5, r1
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	fb03 f303 	mul.w	r3, r3, r3
 8002290:	4618      	mov	r0, r3
 8002292:	f7fe fca9 	bl	8000be8 <__aeabi_i2f>
 8002296:	4606      	mov	r6, r0
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	fb03 f303 	mul.w	r3, r3, r3
 800229e:	4618      	mov	r0, r3
 80022a0:	f7fe fca2 	bl	8000be8 <__aeabi_i2f>
 80022a4:	4603      	mov	r3, r0
 80022a6:	4619      	mov	r1, r3
 80022a8:	4630      	mov	r0, r6
 80022aa:	f7fe fda5 	bl	8000df8 <__aeabi_fdiv>
 80022ae:	4603      	mov	r3, r0
 80022b0:	4619      	mov	r1, r3
 80022b2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80022b6:	f7fe fbe1 	bl	8000a7c <__aeabi_fsub>
 80022ba:	4603      	mov	r3, r0
 80022bc:	4618      	mov	r0, r3
 80022be:	f7fe f8a9 	bl	8000414 <__aeabi_f2d>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	4610      	mov	r0, r2
 80022c8:	4619      	mov	r1, r3
 80022ca:	f002 fec7 	bl	800505c <sqrt>
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	4620      	mov	r0, r4
 80022d4:	4629      	mov	r1, r5
 80022d6:	f7fe f8f5 	bl	80004c4 <__aeabi_dmul>
 80022da:	4602      	mov	r2, r0
 80022dc:	460b      	mov	r3, r1
 80022de:	4610      	mov	r0, r2
 80022e0:	4619      	mov	r1, r3
 80022e2:	f7fe fb9f 	bl	8000a24 <__aeabi_d2iz>
 80022e6:	4603      	mov	r3, r0
 80022e8:	613b      	str	r3, [r7, #16]
        // Draw the horizontal line from the left edge to the right edge of the ellipse
        Paint_DrawLine(center_x - ellipse_width, center_y + y, center_x + ellipse_width, center_y + y, color, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	b298      	uxth	r0, r3
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	4413      	add	r3, r2
 8002300:	b299      	uxth	r1, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	b29a      	uxth	r2, r3
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	b29b      	uxth	r3, r3
 800230a:	4413      	add	r3, r2
 800230c:	b29c      	uxth	r4, r3
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	b29a      	uxth	r2, r3
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	b29b      	uxth	r3, r3
 8002316:	4413      	add	r3, r2
 8002318:	b29a      	uxth	r2, r3
 800231a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800231c:	b29b      	uxth	r3, r3
 800231e:	2500      	movs	r5, #0
 8002320:	9502      	str	r5, [sp, #8]
 8002322:	2501      	movs	r5, #1
 8002324:	9501      	str	r5, [sp, #4]
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	4613      	mov	r3, r2
 800232a:	4622      	mov	r2, r4
 800232c:	f7fe fff6 	bl	800131c <Paint_DrawLine>
    for (int y = -a; y <= a; y++) {
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	3301      	adds	r3, #1
 8002334:	617b      	str	r3, [r7, #20]
 8002336:	697a      	ldr	r2, [r7, #20]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	429a      	cmp	r2, r3
 800233c:	dda0      	ble.n	8002280 <Paint_DrawFilledEllipse+0x16>
    }
}
 800233e:	bf00      	nop
 8002340:	bf00      	nop
 8002342:	371c      	adds	r7, #28
 8002344:	46bd      	mov	sp, r7
 8002346:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002348 <Robot_eyes>:

void Robot_eyes()
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b088      	sub	sp, #32
 800234c:	af02      	add	r7, sp, #8
	printf("LCD_1IN28_test Demo\r\n");
 800234e:	482c      	ldr	r0, [pc, #176]	; (8002400 <Robot_eyes+0xb8>)
 8002350:	f002 f8be 	bl	80044d0 <puts>
	DEV_Module_Init();
 8002354:	f7fe fdfe 	bl	8000f54 <DEV_Module_Init>

	printf("LCD_1IN28_ Init and Clear...\r\n");
 8002358:	482a      	ldr	r0, [pc, #168]	; (8002404 <Robot_eyes+0xbc>)
 800235a:	f002 f8b9 	bl	80044d0 <puts>
	LCD_1IN28_SetBackLight(1000);
 800235e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002362:	f7ff fc0f 	bl	8001b84 <LCD_1IN28_SetBackLight>
	LCD_1IN28_Init(VERTICAL);
 8002366:	2001      	movs	r0, #1
 8002368:	f7ff fb70 	bl	8001a4c <LCD_1IN28_Init>
	LCD_1IN28_Clear(BLACK);
 800236c:	2000      	movs	r0, #0
 800236e:	f7ff fbbb 	bl	8001ae8 <LCD_1IN28_Clear>

	printf("Paint_NewImage\r\n");
 8002372:	4825      	ldr	r0, [pc, #148]	; (8002408 <Robot_eyes+0xc0>)
 8002374:	f002 f8ac 	bl	80044d0 <puts>
	Paint_NewImage(LCD_1IN28_WIDTH, LCD_1IN28_HEIGHT, 0, BLACK);
 8002378:	2300      	movs	r3, #0
 800237a:	2200      	movs	r2, #0
 800237c:	21f0      	movs	r1, #240	; 0xf0
 800237e:	20f0      	movs	r0, #240	; 0xf0
 8002380:	f7fe fe08 	bl	8000f94 <Paint_NewImage>

	printf("Set Clear and Display Funtion\r\n");
 8002384:	4821      	ldr	r0, [pc, #132]	; (800240c <Robot_eyes+0xc4>)
 8002386:	f002 f8a3 	bl	80044d0 <puts>
	Paint_SetClearFuntion(LCD_1IN28_Clear);
 800238a:	4821      	ldr	r0, [pc, #132]	; (8002410 <Robot_eyes+0xc8>)
 800238c:	f7fe fe4e 	bl	800102c <Paint_SetClearFuntion>
	Paint_SetDisplayFuntion(LCD_1IN28_DrawPaint);
 8002390:	4820      	ldr	r0, [pc, #128]	; (8002414 <Robot_eyes+0xcc>)
 8002392:	f7fe fe59 	bl	8001048 <Paint_SetDisplayFuntion>

	printf("Paint_Clear\r\n");
 8002396:	4820      	ldr	r0, [pc, #128]	; (8002418 <Robot_eyes+0xd0>)
 8002398:	f002 f89a 	bl	80044d0 <puts>
	Paint_Clear(BLACK);
 800239c:	2000      	movs	r0, #0
 800239e:	f7fe ff11 	bl	80011c4 <Paint_Clear>

	//  DEV_Delay_ms(1000);
	    // Constants for the vertical ellipse, adjust for your display size
    int a = 60; // Semi-major axis (half the height of the ellipse)
 80023a2:	233c      	movs	r3, #60	; 0x3c
 80023a4:	617b      	str	r3, [r7, #20]
    int b = 30; // Semi-minor axis (half the width of the ellipse)
 80023a6:	231e      	movs	r3, #30
 80023a8:	613b      	str	r3, [r7, #16]
    
    // Calculate the center positions of the two ellipses
    int left_eye_center_x = (LCD_1IN28_WIDTH / 2) - (2 * b);
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	60fb      	str	r3, [r7, #12]
    int right_eye_center_x = (LCD_1IN28_WIDTH / 2) + (2 * b);
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	333c      	adds	r3, #60	; 0x3c
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	60bb      	str	r3, [r7, #8]
    int eye_center_y = LCD_1IN28_HEIGHT / 2;
 80023bc:	2378      	movs	r3, #120	; 0x78
 80023be:	607b      	str	r3, [r7, #4]

    // Clear the display
    LCD_1IN28_Clear(BLACK);
 80023c0:	2000      	movs	r0, #0
 80023c2:	f7ff fb91 	bl	8001ae8 <LCD_1IN28_Clear>

    // Draw the left eye
    Paint_DrawFilledEllipse(left_eye_center_x, eye_center_y, a, b, WHITE);
 80023c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f7ff ff49 	bl	800226a <Paint_DrawFilledEllipse>
    
    // Draw the right eye
    Paint_DrawFilledEllipse(right_eye_center_x, eye_center_y, a, b, WHITE);
 80023d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	697a      	ldr	r2, [r7, #20]
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	68b8      	ldr	r0, [r7, #8]
 80023e6:	f7ff ff40 	bl	800226a <Paint_DrawFilledEllipse>
    

    // Add any additional drawing commands for expressions here

    printf("Display test complete\r\n");
 80023ea:	480c      	ldr	r0, [pc, #48]	; (800241c <Robot_eyes+0xd4>)
 80023ec:	f002 f870 	bl	80044d0 <puts>
	printf("quit...\r\n");
 80023f0:	480b      	ldr	r0, [pc, #44]	; (8002420 <Robot_eyes+0xd8>)
 80023f2:	f002 f86d 	bl	80044d0 <puts>
	// DEV_Module_Exit();
}
 80023f6:	bf00      	nop
 80023f8:	3718      	adds	r7, #24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	08005560 	.word	0x08005560
 8002404:	08005578 	.word	0x08005578
 8002408:	08005598 	.word	0x08005598
 800240c:	080055a8 	.word	0x080055a8
 8002410:	08001ae9 	.word	0x08001ae9
 8002414:	08001b55 	.word	0x08001b55
 8002418:	080055c8 	.word	0x080055c8
 800241c:	080055d8 	.word	0x080055d8
 8002420:	080055f0 	.word	0x080055f0

08002424 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002428:	4b08      	ldr	r3, [pc, #32]	; (800244c <HAL_Init+0x28>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a07      	ldr	r2, [pc, #28]	; (800244c <HAL_Init+0x28>)
 800242e:	f043 0310 	orr.w	r3, r3, #16
 8002432:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002434:	2003      	movs	r0, #3
 8002436:	f000 f92b 	bl	8002690 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800243a:	200f      	movs	r0, #15
 800243c:	f000 f808 	bl	8002450 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002440:	f7ff fcd6 	bl	8001df0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40022000 	.word	0x40022000

08002450 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002458:	4b12      	ldr	r3, [pc, #72]	; (80024a4 <HAL_InitTick+0x54>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	4b12      	ldr	r3, [pc, #72]	; (80024a8 <HAL_InitTick+0x58>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	4619      	mov	r1, r3
 8002462:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002466:	fbb3 f3f1 	udiv	r3, r3, r1
 800246a:	fbb2 f3f3 	udiv	r3, r2, r3
 800246e:	4618      	mov	r0, r3
 8002470:	f000 f935 	bl	80026de <HAL_SYSTICK_Config>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e00e      	b.n	800249c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2b0f      	cmp	r3, #15
 8002482:	d80a      	bhi.n	800249a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002484:	2200      	movs	r2, #0
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	f04f 30ff 	mov.w	r0, #4294967295
 800248c:	f000 f90b 	bl	80026a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002490:	4a06      	ldr	r2, [pc, #24]	; (80024ac <HAL_InitTick+0x5c>)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002496:	2300      	movs	r3, #0
 8002498:	e000      	b.n	800249c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
}
 800249c:	4618      	mov	r0, r3
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	20000000 	.word	0x20000000
 80024a8:	20000008 	.word	0x20000008
 80024ac:	20000004 	.word	0x20000004

080024b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024b4:	4b05      	ldr	r3, [pc, #20]	; (80024cc <HAL_IncTick+0x1c>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	461a      	mov	r2, r3
 80024ba:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <HAL_IncTick+0x20>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4413      	add	r3, r2
 80024c0:	4a03      	ldr	r2, [pc, #12]	; (80024d0 <HAL_IncTick+0x20>)
 80024c2:	6013      	str	r3, [r2, #0]
}
 80024c4:	bf00      	nop
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr
 80024cc:	20000008 	.word	0x20000008
 80024d0:	200001a8 	.word	0x200001a8

080024d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  return uwTick;
 80024d8:	4b02      	ldr	r3, [pc, #8]	; (80024e4 <HAL_GetTick+0x10>)
 80024da:	681b      	ldr	r3, [r3, #0]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr
 80024e4:	200001a8 	.word	0x200001a8

080024e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024f0:	f7ff fff0 	bl	80024d4 <HAL_GetTick>
 80024f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002500:	d005      	beq.n	800250e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002502:	4b0a      	ldr	r3, [pc, #40]	; (800252c <HAL_Delay+0x44>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	461a      	mov	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4413      	add	r3, r2
 800250c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800250e:	bf00      	nop
 8002510:	f7ff ffe0 	bl	80024d4 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	429a      	cmp	r2, r3
 800251e:	d8f7      	bhi.n	8002510 <HAL_Delay+0x28>
  {
  }
}
 8002520:	bf00      	nop
 8002522:	bf00      	nop
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	20000008 	.word	0x20000008

08002530 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002540:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <__NVIC_SetPriorityGrouping+0x44>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800254c:	4013      	ands	r3, r2
 800254e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002558:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800255c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002560:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002562:	4a04      	ldr	r2, [pc, #16]	; (8002574 <__NVIC_SetPriorityGrouping+0x44>)
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	60d3      	str	r3, [r2, #12]
}
 8002568:	bf00      	nop
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	bc80      	pop	{r7}
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	e000ed00 	.word	0xe000ed00

08002578 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800257c:	4b04      	ldr	r3, [pc, #16]	; (8002590 <__NVIC_GetPriorityGrouping+0x18>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	0a1b      	lsrs	r3, r3, #8
 8002582:	f003 0307 	and.w	r3, r3, #7
}
 8002586:	4618      	mov	r0, r3
 8002588:	46bd      	mov	sp, r7
 800258a:	bc80      	pop	{r7}
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	e000ed00 	.word	0xe000ed00

08002594 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	4603      	mov	r3, r0
 800259c:	6039      	str	r1, [r7, #0]
 800259e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	db0a      	blt.n	80025be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	b2da      	uxtb	r2, r3
 80025ac:	490c      	ldr	r1, [pc, #48]	; (80025e0 <__NVIC_SetPriority+0x4c>)
 80025ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b2:	0112      	lsls	r2, r2, #4
 80025b4:	b2d2      	uxtb	r2, r2
 80025b6:	440b      	add	r3, r1
 80025b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025bc:	e00a      	b.n	80025d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	4908      	ldr	r1, [pc, #32]	; (80025e4 <__NVIC_SetPriority+0x50>)
 80025c4:	79fb      	ldrb	r3, [r7, #7]
 80025c6:	f003 030f 	and.w	r3, r3, #15
 80025ca:	3b04      	subs	r3, #4
 80025cc:	0112      	lsls	r2, r2, #4
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	440b      	add	r3, r1
 80025d2:	761a      	strb	r2, [r3, #24]
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	bc80      	pop	{r7}
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	e000e100 	.word	0xe000e100
 80025e4:	e000ed00 	.word	0xe000ed00

080025e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b089      	sub	sp, #36	; 0x24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	f1c3 0307 	rsb	r3, r3, #7
 8002602:	2b04      	cmp	r3, #4
 8002604:	bf28      	it	cs
 8002606:	2304      	movcs	r3, #4
 8002608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	3304      	adds	r3, #4
 800260e:	2b06      	cmp	r3, #6
 8002610:	d902      	bls.n	8002618 <NVIC_EncodePriority+0x30>
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	3b03      	subs	r3, #3
 8002616:	e000      	b.n	800261a <NVIC_EncodePriority+0x32>
 8002618:	2300      	movs	r3, #0
 800261a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800261c:	f04f 32ff 	mov.w	r2, #4294967295
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	43da      	mvns	r2, r3
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	401a      	ands	r2, r3
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002630:	f04f 31ff 	mov.w	r1, #4294967295
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	fa01 f303 	lsl.w	r3, r1, r3
 800263a:	43d9      	mvns	r1, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002640:	4313      	orrs	r3, r2
         );
}
 8002642:	4618      	mov	r0, r3
 8002644:	3724      	adds	r7, #36	; 0x24
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr

0800264c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3b01      	subs	r3, #1
 8002658:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800265c:	d301      	bcc.n	8002662 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800265e:	2301      	movs	r3, #1
 8002660:	e00f      	b.n	8002682 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002662:	4a0a      	ldr	r2, [pc, #40]	; (800268c <SysTick_Config+0x40>)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3b01      	subs	r3, #1
 8002668:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800266a:	210f      	movs	r1, #15
 800266c:	f04f 30ff 	mov.w	r0, #4294967295
 8002670:	f7ff ff90 	bl	8002594 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002674:	4b05      	ldr	r3, [pc, #20]	; (800268c <SysTick_Config+0x40>)
 8002676:	2200      	movs	r2, #0
 8002678:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800267a:	4b04      	ldr	r3, [pc, #16]	; (800268c <SysTick_Config+0x40>)
 800267c:	2207      	movs	r2, #7
 800267e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	e000e010 	.word	0xe000e010

08002690 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f7ff ff49 	bl	8002530 <__NVIC_SetPriorityGrouping>
}
 800269e:	bf00      	nop
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b086      	sub	sp, #24
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	4603      	mov	r3, r0
 80026ae:	60b9      	str	r1, [r7, #8]
 80026b0:	607a      	str	r2, [r7, #4]
 80026b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026b4:	2300      	movs	r3, #0
 80026b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026b8:	f7ff ff5e 	bl	8002578 <__NVIC_GetPriorityGrouping>
 80026bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	68b9      	ldr	r1, [r7, #8]
 80026c2:	6978      	ldr	r0, [r7, #20]
 80026c4:	f7ff ff90 	bl	80025e8 <NVIC_EncodePriority>
 80026c8:	4602      	mov	r2, r0
 80026ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ce:	4611      	mov	r1, r2
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff ff5f 	bl	8002594 <__NVIC_SetPriority>
}
 80026d6:	bf00      	nop
 80026d8:	3718      	adds	r7, #24
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b082      	sub	sp, #8
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7ff ffb0 	bl	800264c <SysTick_Config>
 80026ec:	4603      	mov	r3, r0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
	...

080026f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b08b      	sub	sp, #44	; 0x2c
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002702:	2300      	movs	r3, #0
 8002704:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002706:	2300      	movs	r3, #0
 8002708:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800270a:	e169      	b.n	80029e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800270c:	2201      	movs	r2, #1
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	69fa      	ldr	r2, [r7, #28]
 800271c:	4013      	ands	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	429a      	cmp	r2, r3
 8002726:	f040 8158 	bne.w	80029da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	4a9a      	ldr	r2, [pc, #616]	; (8002998 <HAL_GPIO_Init+0x2a0>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d05e      	beq.n	80027f2 <HAL_GPIO_Init+0xfa>
 8002734:	4a98      	ldr	r2, [pc, #608]	; (8002998 <HAL_GPIO_Init+0x2a0>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d875      	bhi.n	8002826 <HAL_GPIO_Init+0x12e>
 800273a:	4a98      	ldr	r2, [pc, #608]	; (800299c <HAL_GPIO_Init+0x2a4>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d058      	beq.n	80027f2 <HAL_GPIO_Init+0xfa>
 8002740:	4a96      	ldr	r2, [pc, #600]	; (800299c <HAL_GPIO_Init+0x2a4>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d86f      	bhi.n	8002826 <HAL_GPIO_Init+0x12e>
 8002746:	4a96      	ldr	r2, [pc, #600]	; (80029a0 <HAL_GPIO_Init+0x2a8>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d052      	beq.n	80027f2 <HAL_GPIO_Init+0xfa>
 800274c:	4a94      	ldr	r2, [pc, #592]	; (80029a0 <HAL_GPIO_Init+0x2a8>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d869      	bhi.n	8002826 <HAL_GPIO_Init+0x12e>
 8002752:	4a94      	ldr	r2, [pc, #592]	; (80029a4 <HAL_GPIO_Init+0x2ac>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d04c      	beq.n	80027f2 <HAL_GPIO_Init+0xfa>
 8002758:	4a92      	ldr	r2, [pc, #584]	; (80029a4 <HAL_GPIO_Init+0x2ac>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d863      	bhi.n	8002826 <HAL_GPIO_Init+0x12e>
 800275e:	4a92      	ldr	r2, [pc, #584]	; (80029a8 <HAL_GPIO_Init+0x2b0>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d046      	beq.n	80027f2 <HAL_GPIO_Init+0xfa>
 8002764:	4a90      	ldr	r2, [pc, #576]	; (80029a8 <HAL_GPIO_Init+0x2b0>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d85d      	bhi.n	8002826 <HAL_GPIO_Init+0x12e>
 800276a:	2b12      	cmp	r3, #18
 800276c:	d82a      	bhi.n	80027c4 <HAL_GPIO_Init+0xcc>
 800276e:	2b12      	cmp	r3, #18
 8002770:	d859      	bhi.n	8002826 <HAL_GPIO_Init+0x12e>
 8002772:	a201      	add	r2, pc, #4	; (adr r2, 8002778 <HAL_GPIO_Init+0x80>)
 8002774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002778:	080027f3 	.word	0x080027f3
 800277c:	080027cd 	.word	0x080027cd
 8002780:	080027df 	.word	0x080027df
 8002784:	08002821 	.word	0x08002821
 8002788:	08002827 	.word	0x08002827
 800278c:	08002827 	.word	0x08002827
 8002790:	08002827 	.word	0x08002827
 8002794:	08002827 	.word	0x08002827
 8002798:	08002827 	.word	0x08002827
 800279c:	08002827 	.word	0x08002827
 80027a0:	08002827 	.word	0x08002827
 80027a4:	08002827 	.word	0x08002827
 80027a8:	08002827 	.word	0x08002827
 80027ac:	08002827 	.word	0x08002827
 80027b0:	08002827 	.word	0x08002827
 80027b4:	08002827 	.word	0x08002827
 80027b8:	08002827 	.word	0x08002827
 80027bc:	080027d5 	.word	0x080027d5
 80027c0:	080027e9 	.word	0x080027e9
 80027c4:	4a79      	ldr	r2, [pc, #484]	; (80029ac <HAL_GPIO_Init+0x2b4>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d013      	beq.n	80027f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80027ca:	e02c      	b.n	8002826 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	623b      	str	r3, [r7, #32]
          break;
 80027d2:	e029      	b.n	8002828 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	3304      	adds	r3, #4
 80027da:	623b      	str	r3, [r7, #32]
          break;
 80027dc:	e024      	b.n	8002828 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	3308      	adds	r3, #8
 80027e4:	623b      	str	r3, [r7, #32]
          break;
 80027e6:	e01f      	b.n	8002828 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	330c      	adds	r3, #12
 80027ee:	623b      	str	r3, [r7, #32]
          break;
 80027f0:	e01a      	b.n	8002828 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d102      	bne.n	8002800 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80027fa:	2304      	movs	r3, #4
 80027fc:	623b      	str	r3, [r7, #32]
          break;
 80027fe:	e013      	b.n	8002828 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d105      	bne.n	8002814 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002808:	2308      	movs	r3, #8
 800280a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	69fa      	ldr	r2, [r7, #28]
 8002810:	611a      	str	r2, [r3, #16]
          break;
 8002812:	e009      	b.n	8002828 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002814:	2308      	movs	r3, #8
 8002816:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	69fa      	ldr	r2, [r7, #28]
 800281c:	615a      	str	r2, [r3, #20]
          break;
 800281e:	e003      	b.n	8002828 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002820:	2300      	movs	r3, #0
 8002822:	623b      	str	r3, [r7, #32]
          break;
 8002824:	e000      	b.n	8002828 <HAL_GPIO_Init+0x130>
          break;
 8002826:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	2bff      	cmp	r3, #255	; 0xff
 800282c:	d801      	bhi.n	8002832 <HAL_GPIO_Init+0x13a>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	e001      	b.n	8002836 <HAL_GPIO_Init+0x13e>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	3304      	adds	r3, #4
 8002836:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	2bff      	cmp	r3, #255	; 0xff
 800283c:	d802      	bhi.n	8002844 <HAL_GPIO_Init+0x14c>
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	e002      	b.n	800284a <HAL_GPIO_Init+0x152>
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	3b08      	subs	r3, #8
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	210f      	movs	r1, #15
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	fa01 f303 	lsl.w	r3, r1, r3
 8002858:	43db      	mvns	r3, r3
 800285a:	401a      	ands	r2, r3
 800285c:	6a39      	ldr	r1, [r7, #32]
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	fa01 f303 	lsl.w	r3, r1, r3
 8002864:	431a      	orrs	r2, r3
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002872:	2b00      	cmp	r3, #0
 8002874:	f000 80b1 	beq.w	80029da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002878:	4b4d      	ldr	r3, [pc, #308]	; (80029b0 <HAL_GPIO_Init+0x2b8>)
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	4a4c      	ldr	r2, [pc, #304]	; (80029b0 <HAL_GPIO_Init+0x2b8>)
 800287e:	f043 0301 	orr.w	r3, r3, #1
 8002882:	6193      	str	r3, [r2, #24]
 8002884:	4b4a      	ldr	r3, [pc, #296]	; (80029b0 <HAL_GPIO_Init+0x2b8>)
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	60bb      	str	r3, [r7, #8]
 800288e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002890:	4a48      	ldr	r2, [pc, #288]	; (80029b4 <HAL_GPIO_Init+0x2bc>)
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	089b      	lsrs	r3, r3, #2
 8002896:	3302      	adds	r3, #2
 8002898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800289c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	f003 0303 	and.w	r3, r3, #3
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	220f      	movs	r2, #15
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	43db      	mvns	r3, r3
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	4013      	ands	r3, r2
 80028b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a40      	ldr	r2, [pc, #256]	; (80029b8 <HAL_GPIO_Init+0x2c0>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d013      	beq.n	80028e4 <HAL_GPIO_Init+0x1ec>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a3f      	ldr	r2, [pc, #252]	; (80029bc <HAL_GPIO_Init+0x2c4>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d00d      	beq.n	80028e0 <HAL_GPIO_Init+0x1e8>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a3e      	ldr	r2, [pc, #248]	; (80029c0 <HAL_GPIO_Init+0x2c8>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d007      	beq.n	80028dc <HAL_GPIO_Init+0x1e4>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a3d      	ldr	r2, [pc, #244]	; (80029c4 <HAL_GPIO_Init+0x2cc>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d101      	bne.n	80028d8 <HAL_GPIO_Init+0x1e0>
 80028d4:	2303      	movs	r3, #3
 80028d6:	e006      	b.n	80028e6 <HAL_GPIO_Init+0x1ee>
 80028d8:	2304      	movs	r3, #4
 80028da:	e004      	b.n	80028e6 <HAL_GPIO_Init+0x1ee>
 80028dc:	2302      	movs	r3, #2
 80028de:	e002      	b.n	80028e6 <HAL_GPIO_Init+0x1ee>
 80028e0:	2301      	movs	r3, #1
 80028e2:	e000      	b.n	80028e6 <HAL_GPIO_Init+0x1ee>
 80028e4:	2300      	movs	r3, #0
 80028e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028e8:	f002 0203 	and.w	r2, r2, #3
 80028ec:	0092      	lsls	r2, r2, #2
 80028ee:	4093      	lsls	r3, r2
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80028f6:	492f      	ldr	r1, [pc, #188]	; (80029b4 <HAL_GPIO_Init+0x2bc>)
 80028f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fa:	089b      	lsrs	r3, r3, #2
 80028fc:	3302      	adds	r3, #2
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d006      	beq.n	800291e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002910:	4b2d      	ldr	r3, [pc, #180]	; (80029c8 <HAL_GPIO_Init+0x2d0>)
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	492c      	ldr	r1, [pc, #176]	; (80029c8 <HAL_GPIO_Init+0x2d0>)
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	4313      	orrs	r3, r2
 800291a:	608b      	str	r3, [r1, #8]
 800291c:	e006      	b.n	800292c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800291e:	4b2a      	ldr	r3, [pc, #168]	; (80029c8 <HAL_GPIO_Init+0x2d0>)
 8002920:	689a      	ldr	r2, [r3, #8]
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	43db      	mvns	r3, r3
 8002926:	4928      	ldr	r1, [pc, #160]	; (80029c8 <HAL_GPIO_Init+0x2d0>)
 8002928:	4013      	ands	r3, r2
 800292a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d006      	beq.n	8002946 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002938:	4b23      	ldr	r3, [pc, #140]	; (80029c8 <HAL_GPIO_Init+0x2d0>)
 800293a:	68da      	ldr	r2, [r3, #12]
 800293c:	4922      	ldr	r1, [pc, #136]	; (80029c8 <HAL_GPIO_Init+0x2d0>)
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	4313      	orrs	r3, r2
 8002942:	60cb      	str	r3, [r1, #12]
 8002944:	e006      	b.n	8002954 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002946:	4b20      	ldr	r3, [pc, #128]	; (80029c8 <HAL_GPIO_Init+0x2d0>)
 8002948:	68da      	ldr	r2, [r3, #12]
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	43db      	mvns	r3, r3
 800294e:	491e      	ldr	r1, [pc, #120]	; (80029c8 <HAL_GPIO_Init+0x2d0>)
 8002950:	4013      	ands	r3, r2
 8002952:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d006      	beq.n	800296e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002960:	4b19      	ldr	r3, [pc, #100]	; (80029c8 <HAL_GPIO_Init+0x2d0>)
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	4918      	ldr	r1, [pc, #96]	; (80029c8 <HAL_GPIO_Init+0x2d0>)
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	4313      	orrs	r3, r2
 800296a:	604b      	str	r3, [r1, #4]
 800296c:	e006      	b.n	800297c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800296e:	4b16      	ldr	r3, [pc, #88]	; (80029c8 <HAL_GPIO_Init+0x2d0>)
 8002970:	685a      	ldr	r2, [r3, #4]
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	43db      	mvns	r3, r3
 8002976:	4914      	ldr	r1, [pc, #80]	; (80029c8 <HAL_GPIO_Init+0x2d0>)
 8002978:	4013      	ands	r3, r2
 800297a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d021      	beq.n	80029cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002988:	4b0f      	ldr	r3, [pc, #60]	; (80029c8 <HAL_GPIO_Init+0x2d0>)
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	490e      	ldr	r1, [pc, #56]	; (80029c8 <HAL_GPIO_Init+0x2d0>)
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	4313      	orrs	r3, r2
 8002992:	600b      	str	r3, [r1, #0]
 8002994:	e021      	b.n	80029da <HAL_GPIO_Init+0x2e2>
 8002996:	bf00      	nop
 8002998:	10320000 	.word	0x10320000
 800299c:	10310000 	.word	0x10310000
 80029a0:	10220000 	.word	0x10220000
 80029a4:	10210000 	.word	0x10210000
 80029a8:	10120000 	.word	0x10120000
 80029ac:	10110000 	.word	0x10110000
 80029b0:	40021000 	.word	0x40021000
 80029b4:	40010000 	.word	0x40010000
 80029b8:	40010800 	.word	0x40010800
 80029bc:	40010c00 	.word	0x40010c00
 80029c0:	40011000 	.word	0x40011000
 80029c4:	40011400 	.word	0x40011400
 80029c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80029cc:	4b0b      	ldr	r3, [pc, #44]	; (80029fc <HAL_GPIO_Init+0x304>)
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	43db      	mvns	r3, r3
 80029d4:	4909      	ldr	r1, [pc, #36]	; (80029fc <HAL_GPIO_Init+0x304>)
 80029d6:	4013      	ands	r3, r2
 80029d8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	3301      	adds	r3, #1
 80029de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e6:	fa22 f303 	lsr.w	r3, r2, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f47f ae8e 	bne.w	800270c <HAL_GPIO_Init+0x14>
  }
}
 80029f0:	bf00      	nop
 80029f2:	bf00      	nop
 80029f4:	372c      	adds	r7, #44	; 0x2c
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr
 80029fc:	40010400 	.word	0x40010400

08002a00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	807b      	strh	r3, [r7, #2]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a10:	787b      	ldrb	r3, [r7, #1]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a16:	887a      	ldrh	r2, [r7, #2]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a1c:	e003      	b.n	8002a26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a1e:	887b      	ldrh	r3, [r7, #2]
 8002a20:	041a      	lsls	r2, r3, #16
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	611a      	str	r2, [r3, #16]
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr

08002a30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e272      	b.n	8002f28 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f000 8087 	beq.w	8002b5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a50:	4b92      	ldr	r3, [pc, #584]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f003 030c 	and.w	r3, r3, #12
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d00c      	beq.n	8002a76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a5c:	4b8f      	ldr	r3, [pc, #572]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f003 030c 	and.w	r3, r3, #12
 8002a64:	2b08      	cmp	r3, #8
 8002a66:	d112      	bne.n	8002a8e <HAL_RCC_OscConfig+0x5e>
 8002a68:	4b8c      	ldr	r3, [pc, #560]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a74:	d10b      	bne.n	8002a8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a76:	4b89      	ldr	r3, [pc, #548]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d06c      	beq.n	8002b5c <HAL_RCC_OscConfig+0x12c>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d168      	bne.n	8002b5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e24c      	b.n	8002f28 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a96:	d106      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x76>
 8002a98:	4b80      	ldr	r3, [pc, #512]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a7f      	ldr	r2, [pc, #508]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002a9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa2:	6013      	str	r3, [r2, #0]
 8002aa4:	e02e      	b.n	8002b04 <HAL_RCC_OscConfig+0xd4>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10c      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x98>
 8002aae:	4b7b      	ldr	r3, [pc, #492]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a7a      	ldr	r2, [pc, #488]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002ab4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ab8:	6013      	str	r3, [r2, #0]
 8002aba:	4b78      	ldr	r3, [pc, #480]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a77      	ldr	r2, [pc, #476]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002ac0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ac4:	6013      	str	r3, [r2, #0]
 8002ac6:	e01d      	b.n	8002b04 <HAL_RCC_OscConfig+0xd4>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ad0:	d10c      	bne.n	8002aec <HAL_RCC_OscConfig+0xbc>
 8002ad2:	4b72      	ldr	r3, [pc, #456]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a71      	ldr	r2, [pc, #452]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002ad8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002adc:	6013      	str	r3, [r2, #0]
 8002ade:	4b6f      	ldr	r3, [pc, #444]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a6e      	ldr	r2, [pc, #440]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae8:	6013      	str	r3, [r2, #0]
 8002aea:	e00b      	b.n	8002b04 <HAL_RCC_OscConfig+0xd4>
 8002aec:	4b6b      	ldr	r3, [pc, #428]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a6a      	ldr	r2, [pc, #424]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002af2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af6:	6013      	str	r3, [r2, #0]
 8002af8:	4b68      	ldr	r3, [pc, #416]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a67      	ldr	r2, [pc, #412]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002afe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d013      	beq.n	8002b34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0c:	f7ff fce2 	bl	80024d4 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b14:	f7ff fcde 	bl	80024d4 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b64      	cmp	r3, #100	; 0x64
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e200      	b.n	8002f28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b26:	4b5d      	ldr	r3, [pc, #372]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0f0      	beq.n	8002b14 <HAL_RCC_OscConfig+0xe4>
 8002b32:	e014      	b.n	8002b5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b34:	f7ff fcce 	bl	80024d4 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b3c:	f7ff fcca 	bl	80024d4 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b64      	cmp	r3, #100	; 0x64
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e1ec      	b.n	8002f28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b4e:	4b53      	ldr	r3, [pc, #332]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1f0      	bne.n	8002b3c <HAL_RCC_OscConfig+0x10c>
 8002b5a:	e000      	b.n	8002b5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d063      	beq.n	8002c32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b6a:	4b4c      	ldr	r3, [pc, #304]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f003 030c 	and.w	r3, r3, #12
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00b      	beq.n	8002b8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b76:	4b49      	ldr	r3, [pc, #292]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f003 030c 	and.w	r3, r3, #12
 8002b7e:	2b08      	cmp	r3, #8
 8002b80:	d11c      	bne.n	8002bbc <HAL_RCC_OscConfig+0x18c>
 8002b82:	4b46      	ldr	r3, [pc, #280]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d116      	bne.n	8002bbc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b8e:	4b43      	ldr	r3, [pc, #268]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d005      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x176>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d001      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e1c0      	b.n	8002f28 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba6:	4b3d      	ldr	r3, [pc, #244]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	4939      	ldr	r1, [pc, #228]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bba:	e03a      	b.n	8002c32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d020      	beq.n	8002c06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bc4:	4b36      	ldr	r3, [pc, #216]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bca:	f7ff fc83 	bl	80024d4 <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd0:	e008      	b.n	8002be4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bd2:	f7ff fc7f 	bl	80024d4 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e1a1      	b.n	8002f28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be4:	4b2d      	ldr	r3, [pc, #180]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d0f0      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf0:	4b2a      	ldr	r3, [pc, #168]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	695b      	ldr	r3, [r3, #20]
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	4927      	ldr	r1, [pc, #156]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	600b      	str	r3, [r1, #0]
 8002c04:	e015      	b.n	8002c32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c06:	4b26      	ldr	r3, [pc, #152]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0c:	f7ff fc62 	bl	80024d4 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c14:	f7ff fc5e 	bl	80024d4 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e180      	b.n	8002f28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c26:	4b1d      	ldr	r3, [pc, #116]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1f0      	bne.n	8002c14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d03a      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d019      	beq.n	8002c7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c46:	4b17      	ldr	r3, [pc, #92]	; (8002ca4 <HAL_RCC_OscConfig+0x274>)
 8002c48:	2201      	movs	r2, #1
 8002c4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c4c:	f7ff fc42 	bl	80024d4 <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c54:	f7ff fc3e 	bl	80024d4 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e160      	b.n	8002f28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c66:	4b0d      	ldr	r3, [pc, #52]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d0f0      	beq.n	8002c54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c72:	2001      	movs	r0, #1
 8002c74:	f000 face 	bl	8003214 <RCC_Delay>
 8002c78:	e01c      	b.n	8002cb4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ca4 <HAL_RCC_OscConfig+0x274>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c80:	f7ff fc28 	bl	80024d4 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c86:	e00f      	b.n	8002ca8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c88:	f7ff fc24 	bl	80024d4 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d908      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e146      	b.n	8002f28 <HAL_RCC_OscConfig+0x4f8>
 8002c9a:	bf00      	nop
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	42420000 	.word	0x42420000
 8002ca4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ca8:	4b92      	ldr	r3, [pc, #584]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1e9      	bne.n	8002c88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 80a6 	beq.w	8002e0e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cc6:	4b8b      	ldr	r3, [pc, #556]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10d      	bne.n	8002cee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cd2:	4b88      	ldr	r3, [pc, #544]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	4a87      	ldr	r2, [pc, #540]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cdc:	61d3      	str	r3, [r2, #28]
 8002cde:	4b85      	ldr	r3, [pc, #532]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002ce0:	69db      	ldr	r3, [r3, #28]
 8002ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce6:	60bb      	str	r3, [r7, #8]
 8002ce8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cea:	2301      	movs	r3, #1
 8002cec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cee:	4b82      	ldr	r3, [pc, #520]	; (8002ef8 <HAL_RCC_OscConfig+0x4c8>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d118      	bne.n	8002d2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cfa:	4b7f      	ldr	r3, [pc, #508]	; (8002ef8 <HAL_RCC_OscConfig+0x4c8>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a7e      	ldr	r2, [pc, #504]	; (8002ef8 <HAL_RCC_OscConfig+0x4c8>)
 8002d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d06:	f7ff fbe5 	bl	80024d4 <HAL_GetTick>
 8002d0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d0c:	e008      	b.n	8002d20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d0e:	f7ff fbe1 	bl	80024d4 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b64      	cmp	r3, #100	; 0x64
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e103      	b.n	8002f28 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d20:	4b75      	ldr	r3, [pc, #468]	; (8002ef8 <HAL_RCC_OscConfig+0x4c8>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d0f0      	beq.n	8002d0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d106      	bne.n	8002d42 <HAL_RCC_OscConfig+0x312>
 8002d34:	4b6f      	ldr	r3, [pc, #444]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	4a6e      	ldr	r2, [pc, #440]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002d3a:	f043 0301 	orr.w	r3, r3, #1
 8002d3e:	6213      	str	r3, [r2, #32]
 8002d40:	e02d      	b.n	8002d9e <HAL_RCC_OscConfig+0x36e>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10c      	bne.n	8002d64 <HAL_RCC_OscConfig+0x334>
 8002d4a:	4b6a      	ldr	r3, [pc, #424]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	4a69      	ldr	r2, [pc, #420]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002d50:	f023 0301 	bic.w	r3, r3, #1
 8002d54:	6213      	str	r3, [r2, #32]
 8002d56:	4b67      	ldr	r3, [pc, #412]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	4a66      	ldr	r2, [pc, #408]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002d5c:	f023 0304 	bic.w	r3, r3, #4
 8002d60:	6213      	str	r3, [r2, #32]
 8002d62:	e01c      	b.n	8002d9e <HAL_RCC_OscConfig+0x36e>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	2b05      	cmp	r3, #5
 8002d6a:	d10c      	bne.n	8002d86 <HAL_RCC_OscConfig+0x356>
 8002d6c:	4b61      	ldr	r3, [pc, #388]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	4a60      	ldr	r2, [pc, #384]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002d72:	f043 0304 	orr.w	r3, r3, #4
 8002d76:	6213      	str	r3, [r2, #32]
 8002d78:	4b5e      	ldr	r3, [pc, #376]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	4a5d      	ldr	r2, [pc, #372]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002d7e:	f043 0301 	orr.w	r3, r3, #1
 8002d82:	6213      	str	r3, [r2, #32]
 8002d84:	e00b      	b.n	8002d9e <HAL_RCC_OscConfig+0x36e>
 8002d86:	4b5b      	ldr	r3, [pc, #364]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	4a5a      	ldr	r2, [pc, #360]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002d8c:	f023 0301 	bic.w	r3, r3, #1
 8002d90:	6213      	str	r3, [r2, #32]
 8002d92:	4b58      	ldr	r3, [pc, #352]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	4a57      	ldr	r2, [pc, #348]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002d98:	f023 0304 	bic.w	r3, r3, #4
 8002d9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d015      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da6:	f7ff fb95 	bl	80024d4 <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dac:	e00a      	b.n	8002dc4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dae:	f7ff fb91 	bl	80024d4 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e0b1      	b.n	8002f28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc4:	4b4b      	ldr	r3, [pc, #300]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d0ee      	beq.n	8002dae <HAL_RCC_OscConfig+0x37e>
 8002dd0:	e014      	b.n	8002dfc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd2:	f7ff fb7f 	bl	80024d4 <HAL_GetTick>
 8002dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dd8:	e00a      	b.n	8002df0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dda:	f7ff fb7b 	bl	80024d4 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e09b      	b.n	8002f28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002df0:	4b40      	ldr	r3, [pc, #256]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1ee      	bne.n	8002dda <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002dfc:	7dfb      	ldrb	r3, [r7, #23]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d105      	bne.n	8002e0e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e02:	4b3c      	ldr	r3, [pc, #240]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	4a3b      	ldr	r2, [pc, #236]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002e08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e0c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f000 8087 	beq.w	8002f26 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e18:	4b36      	ldr	r3, [pc, #216]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f003 030c 	and.w	r3, r3, #12
 8002e20:	2b08      	cmp	r3, #8
 8002e22:	d061      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d146      	bne.n	8002eba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e2c:	4b33      	ldr	r3, [pc, #204]	; (8002efc <HAL_RCC_OscConfig+0x4cc>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e32:	f7ff fb4f 	bl	80024d4 <HAL_GetTick>
 8002e36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e38:	e008      	b.n	8002e4c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e3a:	f7ff fb4b 	bl	80024d4 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e06d      	b.n	8002f28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e4c:	4b29      	ldr	r3, [pc, #164]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1f0      	bne.n	8002e3a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e60:	d108      	bne.n	8002e74 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e62:	4b24      	ldr	r3, [pc, #144]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	4921      	ldr	r1, [pc, #132]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e74:	4b1f      	ldr	r3, [pc, #124]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a19      	ldr	r1, [r3, #32]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	430b      	orrs	r3, r1
 8002e86:	491b      	ldr	r1, [pc, #108]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e8c:	4b1b      	ldr	r3, [pc, #108]	; (8002efc <HAL_RCC_OscConfig+0x4cc>)
 8002e8e:	2201      	movs	r2, #1
 8002e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e92:	f7ff fb1f 	bl	80024d4 <HAL_GetTick>
 8002e96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e98:	e008      	b.n	8002eac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e9a:	f7ff fb1b 	bl	80024d4 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e03d      	b.n	8002f28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002eac:	4b11      	ldr	r3, [pc, #68]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d0f0      	beq.n	8002e9a <HAL_RCC_OscConfig+0x46a>
 8002eb8:	e035      	b.n	8002f26 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eba:	4b10      	ldr	r3, [pc, #64]	; (8002efc <HAL_RCC_OscConfig+0x4cc>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec0:	f7ff fb08 	bl	80024d4 <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ec8:	f7ff fb04 	bl	80024d4 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e026      	b.n	8002f28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eda:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1f0      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x498>
 8002ee6:	e01e      	b.n	8002f26 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	69db      	ldr	r3, [r3, #28]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d107      	bne.n	8002f00 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e019      	b.n	8002f28 <HAL_RCC_OscConfig+0x4f8>
 8002ef4:	40021000 	.word	0x40021000
 8002ef8:	40007000 	.word	0x40007000
 8002efc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f00:	4b0b      	ldr	r3, [pc, #44]	; (8002f30 <HAL_RCC_OscConfig+0x500>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d106      	bne.n	8002f22 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d001      	beq.n	8002f26 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e000      	b.n	8002f28 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3718      	adds	r7, #24
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40021000 	.word	0x40021000

08002f34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e0d0      	b.n	80030ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f48:	4b6a      	ldr	r3, [pc, #424]	; (80030f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d910      	bls.n	8002f78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f56:	4b67      	ldr	r3, [pc, #412]	; (80030f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f023 0207 	bic.w	r2, r3, #7
 8002f5e:	4965      	ldr	r1, [pc, #404]	; (80030f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f66:	4b63      	ldr	r3, [pc, #396]	; (80030f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0307 	and.w	r3, r3, #7
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d001      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e0b8      	b.n	80030ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d020      	beq.n	8002fc6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d005      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f90:	4b59      	ldr	r3, [pc, #356]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	4a58      	ldr	r2, [pc, #352]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f96:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f9a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0308 	and.w	r3, r3, #8
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d005      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fa8:	4b53      	ldr	r3, [pc, #332]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	4a52      	ldr	r2, [pc, #328]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002fb2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fb4:	4b50      	ldr	r3, [pc, #320]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	494d      	ldr	r1, [pc, #308]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d040      	beq.n	8003054 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d107      	bne.n	8002fea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fda:	4b47      	ldr	r3, [pc, #284]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d115      	bne.n	8003012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e07f      	b.n	80030ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d107      	bne.n	8003002 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ff2:	4b41      	ldr	r3, [pc, #260]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d109      	bne.n	8003012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e073      	b.n	80030ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003002:	4b3d      	ldr	r3, [pc, #244]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e06b      	b.n	80030ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003012:	4b39      	ldr	r3, [pc, #228]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f023 0203 	bic.w	r2, r3, #3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	4936      	ldr	r1, [pc, #216]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003020:	4313      	orrs	r3, r2
 8003022:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003024:	f7ff fa56 	bl	80024d4 <HAL_GetTick>
 8003028:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800302a:	e00a      	b.n	8003042 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800302c:	f7ff fa52 	bl	80024d4 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	f241 3288 	movw	r2, #5000	; 0x1388
 800303a:	4293      	cmp	r3, r2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e053      	b.n	80030ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003042:	4b2d      	ldr	r3, [pc, #180]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f003 020c 	and.w	r2, r3, #12
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	429a      	cmp	r2, r3
 8003052:	d1eb      	bne.n	800302c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003054:	4b27      	ldr	r3, [pc, #156]	; (80030f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0307 	and.w	r3, r3, #7
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	429a      	cmp	r2, r3
 8003060:	d210      	bcs.n	8003084 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003062:	4b24      	ldr	r3, [pc, #144]	; (80030f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f023 0207 	bic.w	r2, r3, #7
 800306a:	4922      	ldr	r1, [pc, #136]	; (80030f4 <HAL_RCC_ClockConfig+0x1c0>)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	4313      	orrs	r3, r2
 8003070:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003072:	4b20      	ldr	r3, [pc, #128]	; (80030f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	429a      	cmp	r2, r3
 800307e:	d001      	beq.n	8003084 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e032      	b.n	80030ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b00      	cmp	r3, #0
 800308e:	d008      	beq.n	80030a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003090:	4b19      	ldr	r3, [pc, #100]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	4916      	ldr	r1, [pc, #88]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0308 	and.w	r3, r3, #8
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d009      	beq.n	80030c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030ae:	4b12      	ldr	r3, [pc, #72]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	490e      	ldr	r1, [pc, #56]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030c2:	f000 f821 	bl	8003108 <HAL_RCC_GetSysClockFreq>
 80030c6:	4602      	mov	r2, r0
 80030c8:	4b0b      	ldr	r3, [pc, #44]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	091b      	lsrs	r3, r3, #4
 80030ce:	f003 030f 	and.w	r3, r3, #15
 80030d2:	490a      	ldr	r1, [pc, #40]	; (80030fc <HAL_RCC_ClockConfig+0x1c8>)
 80030d4:	5ccb      	ldrb	r3, [r1, r3]
 80030d6:	fa22 f303 	lsr.w	r3, r2, r3
 80030da:	4a09      	ldr	r2, [pc, #36]	; (8003100 <HAL_RCC_ClockConfig+0x1cc>)
 80030dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030de:	4b09      	ldr	r3, [pc, #36]	; (8003104 <HAL_RCC_ClockConfig+0x1d0>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff f9b4 	bl	8002450 <HAL_InitTick>

  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	40022000 	.word	0x40022000
 80030f8:	40021000 	.word	0x40021000
 80030fc:	080055fc 	.word	0x080055fc
 8003100:	20000000 	.word	0x20000000
 8003104:	20000004 	.word	0x20000004

08003108 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003108:	b480      	push	{r7}
 800310a:	b087      	sub	sp, #28
 800310c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800310e:	2300      	movs	r3, #0
 8003110:	60fb      	str	r3, [r7, #12]
 8003112:	2300      	movs	r3, #0
 8003114:	60bb      	str	r3, [r7, #8]
 8003116:	2300      	movs	r3, #0
 8003118:	617b      	str	r3, [r7, #20]
 800311a:	2300      	movs	r3, #0
 800311c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800311e:	2300      	movs	r3, #0
 8003120:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003122:	4b1e      	ldr	r3, [pc, #120]	; (800319c <HAL_RCC_GetSysClockFreq+0x94>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f003 030c 	and.w	r3, r3, #12
 800312e:	2b04      	cmp	r3, #4
 8003130:	d002      	beq.n	8003138 <HAL_RCC_GetSysClockFreq+0x30>
 8003132:	2b08      	cmp	r3, #8
 8003134:	d003      	beq.n	800313e <HAL_RCC_GetSysClockFreq+0x36>
 8003136:	e027      	b.n	8003188 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003138:	4b19      	ldr	r3, [pc, #100]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800313a:	613b      	str	r3, [r7, #16]
      break;
 800313c:	e027      	b.n	800318e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	0c9b      	lsrs	r3, r3, #18
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	4a17      	ldr	r2, [pc, #92]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003148:	5cd3      	ldrb	r3, [r2, r3]
 800314a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d010      	beq.n	8003178 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003156:	4b11      	ldr	r3, [pc, #68]	; (800319c <HAL_RCC_GetSysClockFreq+0x94>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	0c5b      	lsrs	r3, r3, #17
 800315c:	f003 0301 	and.w	r3, r3, #1
 8003160:	4a11      	ldr	r2, [pc, #68]	; (80031a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003162:	5cd3      	ldrb	r3, [r2, r3]
 8003164:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a0d      	ldr	r2, [pc, #52]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800316a:	fb03 f202 	mul.w	r2, r3, r2
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	fbb2 f3f3 	udiv	r3, r2, r3
 8003174:	617b      	str	r3, [r7, #20]
 8003176:	e004      	b.n	8003182 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a0c      	ldr	r2, [pc, #48]	; (80031ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800317c:	fb02 f303 	mul.w	r3, r2, r3
 8003180:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	613b      	str	r3, [r7, #16]
      break;
 8003186:	e002      	b.n	800318e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003188:	4b05      	ldr	r3, [pc, #20]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800318a:	613b      	str	r3, [r7, #16]
      break;
 800318c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800318e:	693b      	ldr	r3, [r7, #16]
}
 8003190:	4618      	mov	r0, r3
 8003192:	371c      	adds	r7, #28
 8003194:	46bd      	mov	sp, r7
 8003196:	bc80      	pop	{r7}
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	40021000 	.word	0x40021000
 80031a0:	007a1200 	.word	0x007a1200
 80031a4:	08005614 	.word	0x08005614
 80031a8:	08005624 	.word	0x08005624
 80031ac:	003d0900 	.word	0x003d0900

080031b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031b4:	4b02      	ldr	r3, [pc, #8]	; (80031c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80031b6:	681b      	ldr	r3, [r3, #0]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bc80      	pop	{r7}
 80031be:	4770      	bx	lr
 80031c0:	20000000 	.word	0x20000000

080031c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031c8:	f7ff fff2 	bl	80031b0 <HAL_RCC_GetHCLKFreq>
 80031cc:	4602      	mov	r2, r0
 80031ce:	4b05      	ldr	r3, [pc, #20]	; (80031e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	0a1b      	lsrs	r3, r3, #8
 80031d4:	f003 0307 	and.w	r3, r3, #7
 80031d8:	4903      	ldr	r1, [pc, #12]	; (80031e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031da:	5ccb      	ldrb	r3, [r1, r3]
 80031dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40021000 	.word	0x40021000
 80031e8:	0800560c 	.word	0x0800560c

080031ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031f0:	f7ff ffde 	bl	80031b0 <HAL_RCC_GetHCLKFreq>
 80031f4:	4602      	mov	r2, r0
 80031f6:	4b05      	ldr	r3, [pc, #20]	; (800320c <HAL_RCC_GetPCLK2Freq+0x20>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	0adb      	lsrs	r3, r3, #11
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	4903      	ldr	r1, [pc, #12]	; (8003210 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003202:	5ccb      	ldrb	r3, [r1, r3]
 8003204:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003208:	4618      	mov	r0, r3
 800320a:	bd80      	pop	{r7, pc}
 800320c:	40021000 	.word	0x40021000
 8003210:	0800560c 	.word	0x0800560c

08003214 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800321c:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <RCC_Delay+0x34>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a0a      	ldr	r2, [pc, #40]	; (800324c <RCC_Delay+0x38>)
 8003222:	fba2 2303 	umull	r2, r3, r2, r3
 8003226:	0a5b      	lsrs	r3, r3, #9
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	fb02 f303 	mul.w	r3, r2, r3
 800322e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003230:	bf00      	nop
  }
  while (Delay --);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	1e5a      	subs	r2, r3, #1
 8003236:	60fa      	str	r2, [r7, #12]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d1f9      	bne.n	8003230 <RCC_Delay+0x1c>
}
 800323c:	bf00      	nop
 800323e:	bf00      	nop
 8003240:	3714      	adds	r7, #20
 8003242:	46bd      	mov	sp, r7
 8003244:	bc80      	pop	{r7}
 8003246:	4770      	bx	lr
 8003248:	20000000 	.word	0x20000000
 800324c:	10624dd3 	.word	0x10624dd3

08003250 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e076      	b.n	8003350 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003266:	2b00      	cmp	r3, #0
 8003268:	d108      	bne.n	800327c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003272:	d009      	beq.n	8003288 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	61da      	str	r2, [r3, #28]
 800327a:	e005      	b.n	8003288 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d106      	bne.n	80032a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f7fe fd5a 	bl	8001d5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2202      	movs	r2, #2
 80032ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80032d0:	431a      	orrs	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032da:	431a      	orrs	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	431a      	orrs	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	431a      	orrs	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032f8:	431a      	orrs	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	69db      	ldr	r3, [r3, #28]
 80032fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800330c:	ea42 0103 	orr.w	r1, r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003314:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	430a      	orrs	r2, r1
 800331e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	0c1a      	lsrs	r2, r3, #16
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f002 0204 	and.w	r2, r2, #4
 800332e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	69da      	ldr	r2, [r3, #28]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800333e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3708      	adds	r7, #8
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b088      	sub	sp, #32
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	603b      	str	r3, [r7, #0]
 8003364:	4613      	mov	r3, r2
 8003366:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003368:	2300      	movs	r3, #0
 800336a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003372:	2b01      	cmp	r3, #1
 8003374:	d101      	bne.n	800337a <HAL_SPI_Transmit+0x22>
 8003376:	2302      	movs	r3, #2
 8003378:	e12d      	b.n	80035d6 <HAL_SPI_Transmit+0x27e>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003382:	f7ff f8a7 	bl	80024d4 <HAL_GetTick>
 8003386:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003388:	88fb      	ldrh	r3, [r7, #6]
 800338a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b01      	cmp	r3, #1
 8003396:	d002      	beq.n	800339e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003398:	2302      	movs	r3, #2
 800339a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800339c:	e116      	b.n	80035cc <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d002      	beq.n	80033aa <HAL_SPI_Transmit+0x52>
 80033a4:	88fb      	ldrh	r3, [r7, #6]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d102      	bne.n	80033b0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80033ae:	e10d      	b.n	80035cc <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2203      	movs	r2, #3
 80033b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	88fa      	ldrh	r2, [r7, #6]
 80033c8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	88fa      	ldrh	r2, [r7, #6]
 80033ce:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033f6:	d10f      	bne.n	8003418 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003406:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003416:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003422:	2b40      	cmp	r3, #64	; 0x40
 8003424:	d007      	beq.n	8003436 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003434:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800343e:	d14f      	bne.n	80034e0 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d002      	beq.n	800344e <HAL_SPI_Transmit+0xf6>
 8003448:	8afb      	ldrh	r3, [r7, #22]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d142      	bne.n	80034d4 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003452:	881a      	ldrh	r2, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345e:	1c9a      	adds	r2, r3, #2
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003468:	b29b      	uxth	r3, r3
 800346a:	3b01      	subs	r3, #1
 800346c:	b29a      	uxth	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003472:	e02f      	b.n	80034d4 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b02      	cmp	r3, #2
 8003480:	d112      	bne.n	80034a8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003486:	881a      	ldrh	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003492:	1c9a      	adds	r2, r3, #2
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800349c:	b29b      	uxth	r3, r3
 800349e:	3b01      	subs	r3, #1
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	86da      	strh	r2, [r3, #54]	; 0x36
 80034a6:	e015      	b.n	80034d4 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034a8:	f7ff f814 	bl	80024d4 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	683a      	ldr	r2, [r7, #0]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d803      	bhi.n	80034c0 <HAL_SPI_Transmit+0x168>
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034be:	d102      	bne.n	80034c6 <HAL_SPI_Transmit+0x16e>
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d106      	bne.n	80034d4 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80034d2:	e07b      	b.n	80035cc <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034d8:	b29b      	uxth	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1ca      	bne.n	8003474 <HAL_SPI_Transmit+0x11c>
 80034de:	e050      	b.n	8003582 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d002      	beq.n	80034ee <HAL_SPI_Transmit+0x196>
 80034e8:	8afb      	ldrh	r3, [r7, #22]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d144      	bne.n	8003578 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	330c      	adds	r3, #12
 80034f8:	7812      	ldrb	r2, [r2, #0]
 80034fa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003500:	1c5a      	adds	r2, r3, #1
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800350a:	b29b      	uxth	r3, r3
 800350c:	3b01      	subs	r3, #1
 800350e:	b29a      	uxth	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003514:	e030      	b.n	8003578 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b02      	cmp	r3, #2
 8003522:	d113      	bne.n	800354c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	330c      	adds	r3, #12
 800352e:	7812      	ldrb	r2, [r2, #0]
 8003530:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003536:	1c5a      	adds	r2, r3, #1
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003540:	b29b      	uxth	r3, r3
 8003542:	3b01      	subs	r3, #1
 8003544:	b29a      	uxth	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	86da      	strh	r2, [r3, #54]	; 0x36
 800354a:	e015      	b.n	8003578 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800354c:	f7fe ffc2 	bl	80024d4 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	429a      	cmp	r2, r3
 800355a:	d803      	bhi.n	8003564 <HAL_SPI_Transmit+0x20c>
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003562:	d102      	bne.n	800356a <HAL_SPI_Transmit+0x212>
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d106      	bne.n	8003578 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003576:	e029      	b.n	80035cc <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800357c:	b29b      	uxth	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1c9      	bne.n	8003516 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	6839      	ldr	r1, [r7, #0]
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 f8b2 	bl	80036f0 <SPI_EndRxTxTransaction>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d002      	beq.n	8003598 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2220      	movs	r2, #32
 8003596:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10a      	bne.n	80035b6 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035a0:	2300      	movs	r3, #0
 80035a2:	613b      	str	r3, [r7, #16]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	613b      	str	r3, [r7, #16]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	613b      	str	r3, [r7, #16]
 80035b4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	77fb      	strb	r3, [r7, #31]
 80035c2:	e003      	b.n	80035cc <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80035d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3720      	adds	r7, #32
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
	...

080035e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b088      	sub	sp, #32
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	603b      	str	r3, [r7, #0]
 80035ec:	4613      	mov	r3, r2
 80035ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80035f0:	f7fe ff70 	bl	80024d4 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f8:	1a9b      	subs	r3, r3, r2
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	4413      	add	r3, r2
 80035fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003600:	f7fe ff68 	bl	80024d4 <HAL_GetTick>
 8003604:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003606:	4b39      	ldr	r3, [pc, #228]	; (80036ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	015b      	lsls	r3, r3, #5
 800360c:	0d1b      	lsrs	r3, r3, #20
 800360e:	69fa      	ldr	r2, [r7, #28]
 8003610:	fb02 f303 	mul.w	r3, r2, r3
 8003614:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003616:	e054      	b.n	80036c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361e:	d050      	beq.n	80036c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003620:	f7fe ff58 	bl	80024d4 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	69fa      	ldr	r2, [r7, #28]
 800362c:	429a      	cmp	r2, r3
 800362e:	d902      	bls.n	8003636 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d13d      	bne.n	80036b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003644:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800364e:	d111      	bne.n	8003674 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003658:	d004      	beq.n	8003664 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003662:	d107      	bne.n	8003674 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003672:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003678:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800367c:	d10f      	bne.n	800369e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800369c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e017      	b.n	80036e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80036b8:	2300      	movs	r3, #0
 80036ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	3b01      	subs	r3, #1
 80036c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	4013      	ands	r3, r2
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	bf0c      	ite	eq
 80036d2:	2301      	moveq	r3, #1
 80036d4:	2300      	movne	r3, #0
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	461a      	mov	r2, r3
 80036da:	79fb      	ldrb	r3, [r7, #7]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d19b      	bne.n	8003618 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3720      	adds	r7, #32
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	20000000 	.word	0x20000000

080036f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af02      	add	r7, sp, #8
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	9300      	str	r3, [sp, #0]
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	2200      	movs	r2, #0
 8003704:	2180      	movs	r1, #128	; 0x80
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f7ff ff6a 	bl	80035e0 <SPI_WaitFlagStateUntilTimeout>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d007      	beq.n	8003722 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003716:	f043 0220 	orr.w	r2, r3, #32
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e000      	b.n	8003724 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e041      	b.n	80037c2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d106      	bne.n	8003758 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7fe fca4 	bl	80020a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2202      	movs	r2, #2
 800375c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	3304      	adds	r3, #4
 8003768:	4619      	mov	r1, r3
 800376a:	4610      	mov	r0, r2
 800376c:	f000 f992 	bl	8003a94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
	...

080037cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d109      	bne.n	80037f0 <HAL_TIM_PWM_Start+0x24>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	bf14      	ite	ne
 80037e8:	2301      	movne	r3, #1
 80037ea:	2300      	moveq	r3, #0
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	e022      	b.n	8003836 <HAL_TIM_PWM_Start+0x6a>
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	2b04      	cmp	r3, #4
 80037f4:	d109      	bne.n	800380a <HAL_TIM_PWM_Start+0x3e>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b01      	cmp	r3, #1
 8003800:	bf14      	ite	ne
 8003802:	2301      	movne	r3, #1
 8003804:	2300      	moveq	r3, #0
 8003806:	b2db      	uxtb	r3, r3
 8003808:	e015      	b.n	8003836 <HAL_TIM_PWM_Start+0x6a>
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	2b08      	cmp	r3, #8
 800380e:	d109      	bne.n	8003824 <HAL_TIM_PWM_Start+0x58>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b01      	cmp	r3, #1
 800381a:	bf14      	ite	ne
 800381c:	2301      	movne	r3, #1
 800381e:	2300      	moveq	r3, #0
 8003820:	b2db      	uxtb	r3, r3
 8003822:	e008      	b.n	8003836 <HAL_TIM_PWM_Start+0x6a>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b01      	cmp	r3, #1
 800382e:	bf14      	ite	ne
 8003830:	2301      	movne	r3, #1
 8003832:	2300      	moveq	r3, #0
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e05e      	b.n	80038fc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d104      	bne.n	800384e <HAL_TIM_PWM_Start+0x82>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2202      	movs	r2, #2
 8003848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800384c:	e013      	b.n	8003876 <HAL_TIM_PWM_Start+0xaa>
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b04      	cmp	r3, #4
 8003852:	d104      	bne.n	800385e <HAL_TIM_PWM_Start+0x92>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2202      	movs	r2, #2
 8003858:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800385c:	e00b      	b.n	8003876 <HAL_TIM_PWM_Start+0xaa>
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	2b08      	cmp	r3, #8
 8003862:	d104      	bne.n	800386e <HAL_TIM_PWM_Start+0xa2>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2202      	movs	r2, #2
 8003868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800386c:	e003      	b.n	8003876 <HAL_TIM_PWM_Start+0xaa>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2202      	movs	r2, #2
 8003872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2201      	movs	r2, #1
 800387c:	6839      	ldr	r1, [r7, #0]
 800387e:	4618      	mov	r0, r3
 8003880:	f000 faf2 	bl	8003e68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a1e      	ldr	r2, [pc, #120]	; (8003904 <HAL_TIM_PWM_Start+0x138>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d107      	bne.n	800389e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800389c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a18      	ldr	r2, [pc, #96]	; (8003904 <HAL_TIM_PWM_Start+0x138>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d00e      	beq.n	80038c6 <HAL_TIM_PWM_Start+0xfa>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038b0:	d009      	beq.n	80038c6 <HAL_TIM_PWM_Start+0xfa>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a14      	ldr	r2, [pc, #80]	; (8003908 <HAL_TIM_PWM_Start+0x13c>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d004      	beq.n	80038c6 <HAL_TIM_PWM_Start+0xfa>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a12      	ldr	r2, [pc, #72]	; (800390c <HAL_TIM_PWM_Start+0x140>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d111      	bne.n	80038ea <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f003 0307 	and.w	r3, r3, #7
 80038d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2b06      	cmp	r3, #6
 80038d6:	d010      	beq.n	80038fa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f042 0201 	orr.w	r2, r2, #1
 80038e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038e8:	e007      	b.n	80038fa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f042 0201 	orr.w	r2, r2, #1
 80038f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	40012c00 	.word	0x40012c00
 8003908:	40000400 	.word	0x40000400
 800390c:	40000800 	.word	0x40000800

08003910 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b086      	sub	sp, #24
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800391c:	2300      	movs	r3, #0
 800391e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003926:	2b01      	cmp	r3, #1
 8003928:	d101      	bne.n	800392e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800392a:	2302      	movs	r3, #2
 800392c:	e0ae      	b.n	8003a8c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2b0c      	cmp	r3, #12
 800393a:	f200 809f 	bhi.w	8003a7c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800393e:	a201      	add	r2, pc, #4	; (adr r2, 8003944 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003944:	08003979 	.word	0x08003979
 8003948:	08003a7d 	.word	0x08003a7d
 800394c:	08003a7d 	.word	0x08003a7d
 8003950:	08003a7d 	.word	0x08003a7d
 8003954:	080039b9 	.word	0x080039b9
 8003958:	08003a7d 	.word	0x08003a7d
 800395c:	08003a7d 	.word	0x08003a7d
 8003960:	08003a7d 	.word	0x08003a7d
 8003964:	080039fb 	.word	0x080039fb
 8003968:	08003a7d 	.word	0x08003a7d
 800396c:	08003a7d 	.word	0x08003a7d
 8003970:	08003a7d 	.word	0x08003a7d
 8003974:	08003a3b 	.word	0x08003a3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68b9      	ldr	r1, [r7, #8]
 800397e:	4618      	mov	r0, r3
 8003980:	f000 f8ea 	bl	8003b58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	699a      	ldr	r2, [r3, #24]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f042 0208 	orr.w	r2, r2, #8
 8003992:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	699a      	ldr	r2, [r3, #24]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 0204 	bic.w	r2, r2, #4
 80039a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	6999      	ldr	r1, [r3, #24]
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	691a      	ldr	r2, [r3, #16]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	619a      	str	r2, [r3, #24]
      break;
 80039b6:	e064      	b.n	8003a82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68b9      	ldr	r1, [r7, #8]
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 f930 	bl	8003c24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	699a      	ldr	r2, [r3, #24]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	699a      	ldr	r2, [r3, #24]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6999      	ldr	r1, [r3, #24]
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	021a      	lsls	r2, r3, #8
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	430a      	orrs	r2, r1
 80039f6:	619a      	str	r2, [r3, #24]
      break;
 80039f8:	e043      	b.n	8003a82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68b9      	ldr	r1, [r7, #8]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f000 f979 	bl	8003cf8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	69da      	ldr	r2, [r3, #28]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f042 0208 	orr.w	r2, r2, #8
 8003a14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	69da      	ldr	r2, [r3, #28]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 0204 	bic.w	r2, r2, #4
 8003a24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	69d9      	ldr	r1, [r3, #28]
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	691a      	ldr	r2, [r3, #16]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	430a      	orrs	r2, r1
 8003a36:	61da      	str	r2, [r3, #28]
      break;
 8003a38:	e023      	b.n	8003a82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68b9      	ldr	r1, [r7, #8]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f000 f9c3 	bl	8003dcc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	69da      	ldr	r2, [r3, #28]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	69da      	ldr	r2, [r3, #28]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	69d9      	ldr	r1, [r3, #28]
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	021a      	lsls	r2, r3, #8
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	61da      	str	r2, [r3, #28]
      break;
 8003a7a:	e002      	b.n	8003a82 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	75fb      	strb	r3, [r7, #23]
      break;
 8003a80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3718      	adds	r7, #24
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a29      	ldr	r2, [pc, #164]	; (8003b4c <TIM_Base_SetConfig+0xb8>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d00b      	beq.n	8003ac4 <TIM_Base_SetConfig+0x30>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ab2:	d007      	beq.n	8003ac4 <TIM_Base_SetConfig+0x30>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a26      	ldr	r2, [pc, #152]	; (8003b50 <TIM_Base_SetConfig+0xbc>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d003      	beq.n	8003ac4 <TIM_Base_SetConfig+0x30>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a25      	ldr	r2, [pc, #148]	; (8003b54 <TIM_Base_SetConfig+0xc0>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d108      	bne.n	8003ad6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a1c      	ldr	r2, [pc, #112]	; (8003b4c <TIM_Base_SetConfig+0xb8>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d00b      	beq.n	8003af6 <TIM_Base_SetConfig+0x62>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae4:	d007      	beq.n	8003af6 <TIM_Base_SetConfig+0x62>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a19      	ldr	r2, [pc, #100]	; (8003b50 <TIM_Base_SetConfig+0xbc>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d003      	beq.n	8003af6 <TIM_Base_SetConfig+0x62>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a18      	ldr	r2, [pc, #96]	; (8003b54 <TIM_Base_SetConfig+0xc0>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d108      	bne.n	8003b08 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003afc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	689a      	ldr	r2, [r3, #8]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a07      	ldr	r2, [pc, #28]	; (8003b4c <TIM_Base_SetConfig+0xb8>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d103      	bne.n	8003b3c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	691a      	ldr	r2, [r3, #16]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	615a      	str	r2, [r3, #20]
}
 8003b42:	bf00      	nop
 8003b44:	3714      	adds	r7, #20
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bc80      	pop	{r7}
 8003b4a:	4770      	bx	lr
 8003b4c:	40012c00 	.word	0x40012c00
 8003b50:	40000400 	.word	0x40000400
 8003b54:	40000800 	.word	0x40000800

08003b58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b087      	sub	sp, #28
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a1b      	ldr	r3, [r3, #32]
 8003b6c:	f023 0201 	bic.w	r2, r3, #1
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f023 0303 	bic.w	r3, r3, #3
 8003b8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f023 0302 	bic.w	r3, r3, #2
 8003ba0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a1c      	ldr	r2, [pc, #112]	; (8003c20 <TIM_OC1_SetConfig+0xc8>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d10c      	bne.n	8003bce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	f023 0308 	bic.w	r3, r3, #8
 8003bba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	f023 0304 	bic.w	r3, r3, #4
 8003bcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a13      	ldr	r2, [pc, #76]	; (8003c20 <TIM_OC1_SetConfig+0xc8>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d111      	bne.n	8003bfa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003be4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	621a      	str	r2, [r3, #32]
}
 8003c14:	bf00      	nop
 8003c16:	371c      	adds	r7, #28
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bc80      	pop	{r7}
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	40012c00 	.word	0x40012c00

08003c24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b087      	sub	sp, #28
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	f023 0210 	bic.w	r2, r3, #16
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	021b      	lsls	r3, r3, #8
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	f023 0320 	bic.w	r3, r3, #32
 8003c6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	011b      	lsls	r3, r3, #4
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a1d      	ldr	r2, [pc, #116]	; (8003cf4 <TIM_OC2_SetConfig+0xd0>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d10d      	bne.n	8003ca0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	011b      	lsls	r3, r3, #4
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a14      	ldr	r2, [pc, #80]	; (8003cf4 <TIM_OC2_SetConfig+0xd0>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d113      	bne.n	8003cd0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cb6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685a      	ldr	r2, [r3, #4]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	697a      	ldr	r2, [r7, #20]
 8003ce8:	621a      	str	r2, [r3, #32]
}
 8003cea:	bf00      	nop
 8003cec:	371c      	adds	r7, #28
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bc80      	pop	{r7}
 8003cf2:	4770      	bx	lr
 8003cf4:	40012c00 	.word	0x40012c00

08003cf8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b087      	sub	sp, #28
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a1b      	ldr	r3, [r3, #32]
 8003d0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f023 0303 	bic.w	r3, r3, #3
 8003d2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	021b      	lsls	r3, r3, #8
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a1d      	ldr	r2, [pc, #116]	; (8003dc8 <TIM_OC3_SetConfig+0xd0>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d10d      	bne.n	8003d72 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	021b      	lsls	r3, r3, #8
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a14      	ldr	r2, [pc, #80]	; (8003dc8 <TIM_OC3_SetConfig+0xd0>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d113      	bne.n	8003da2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	011b      	lsls	r3, r3, #4
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	011b      	lsls	r3, r3, #4
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685a      	ldr	r2, [r3, #4]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	621a      	str	r2, [r3, #32]
}
 8003dbc:	bf00      	nop
 8003dbe:	371c      	adds	r7, #28
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bc80      	pop	{r7}
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	40012c00 	.word	0x40012c00

08003dcc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b087      	sub	sp, #28
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	021b      	lsls	r3, r3, #8
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	031b      	lsls	r3, r3, #12
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a0f      	ldr	r2, [pc, #60]	; (8003e64 <TIM_OC4_SetConfig+0x98>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d109      	bne.n	8003e40 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	019b      	lsls	r3, r3, #6
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	685a      	ldr	r2, [r3, #4]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	621a      	str	r2, [r3, #32]
}
 8003e5a:	bf00      	nop
 8003e5c:	371c      	adds	r7, #28
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bc80      	pop	{r7}
 8003e62:	4770      	bx	lr
 8003e64:	40012c00 	.word	0x40012c00

08003e68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b087      	sub	sp, #28
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	f003 031f 	and.w	r3, r3, #31
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6a1a      	ldr	r2, [r3, #32]
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	43db      	mvns	r3, r3
 8003e8a:	401a      	ands	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6a1a      	ldr	r2, [r3, #32]
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	f003 031f 	and.w	r3, r3, #31
 8003e9a:	6879      	ldr	r1, [r7, #4]
 8003e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	621a      	str	r2, [r3, #32]
}
 8003ea6:	bf00      	nop
 8003ea8:	371c      	adds	r7, #28
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bc80      	pop	{r7}
 8003eae:	4770      	bx	lr

08003eb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d101      	bne.n	8003ec8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	e046      	b.n	8003f56 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a16      	ldr	r2, [pc, #88]	; (8003f60 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d00e      	beq.n	8003f2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f14:	d009      	beq.n	8003f2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a12      	ldr	r2, [pc, #72]	; (8003f64 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d004      	beq.n	8003f2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a10      	ldr	r2, [pc, #64]	; (8003f68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d10c      	bne.n	8003f44 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bc80      	pop	{r7}
 8003f5e:	4770      	bx	lr
 8003f60:	40012c00 	.word	0x40012c00
 8003f64:	40000400 	.word	0x40000400
 8003f68:	40000800 	.word	0x40000800

08003f6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e042      	b.n	8004004 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d106      	bne.n	8003f98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f7fe f8fa 	bl	800218c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2224      	movs	r2, #36	; 0x24
 8003f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68da      	ldr	r2, [r3, #12]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 f82b 	bl	800400c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	691a      	ldr	r2, [r3, #16]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	695a      	ldr	r2, [r3, #20]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fd4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68da      	ldr	r2, [r3, #12]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fe4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	3708      	adds	r7, #8
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68da      	ldr	r2, [r3, #12]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	430a      	orrs	r2, r1
 8004028:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689a      	ldr	r2, [r3, #8]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	431a      	orrs	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	4313      	orrs	r3, r2
 800403a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004046:	f023 030c 	bic.w	r3, r3, #12
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	6812      	ldr	r2, [r2, #0]
 800404e:	68b9      	ldr	r1, [r7, #8]
 8004050:	430b      	orrs	r3, r1
 8004052:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	699a      	ldr	r2, [r3, #24]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	430a      	orrs	r2, r1
 8004068:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a2c      	ldr	r2, [pc, #176]	; (8004120 <UART_SetConfig+0x114>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d103      	bne.n	800407c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004074:	f7ff f8ba 	bl	80031ec <HAL_RCC_GetPCLK2Freq>
 8004078:	60f8      	str	r0, [r7, #12]
 800407a:	e002      	b.n	8004082 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800407c:	f7ff f8a2 	bl	80031c4 <HAL_RCC_GetPCLK1Freq>
 8004080:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	4613      	mov	r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4413      	add	r3, r2
 800408a:	009a      	lsls	r2, r3, #2
 800408c:	441a      	add	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	fbb2 f3f3 	udiv	r3, r2, r3
 8004098:	4a22      	ldr	r2, [pc, #136]	; (8004124 <UART_SetConfig+0x118>)
 800409a:	fba2 2303 	umull	r2, r3, r2, r3
 800409e:	095b      	lsrs	r3, r3, #5
 80040a0:	0119      	lsls	r1, r3, #4
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	4613      	mov	r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	4413      	add	r3, r2
 80040aa:	009a      	lsls	r2, r3, #2
 80040ac:	441a      	add	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80040b8:	4b1a      	ldr	r3, [pc, #104]	; (8004124 <UART_SetConfig+0x118>)
 80040ba:	fba3 0302 	umull	r0, r3, r3, r2
 80040be:	095b      	lsrs	r3, r3, #5
 80040c0:	2064      	movs	r0, #100	; 0x64
 80040c2:	fb00 f303 	mul.w	r3, r0, r3
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	011b      	lsls	r3, r3, #4
 80040ca:	3332      	adds	r3, #50	; 0x32
 80040cc:	4a15      	ldr	r2, [pc, #84]	; (8004124 <UART_SetConfig+0x118>)
 80040ce:	fba2 2303 	umull	r2, r3, r2, r3
 80040d2:	095b      	lsrs	r3, r3, #5
 80040d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040d8:	4419      	add	r1, r3
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	4613      	mov	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	4413      	add	r3, r2
 80040e2:	009a      	lsls	r2, r3, #2
 80040e4:	441a      	add	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80040f0:	4b0c      	ldr	r3, [pc, #48]	; (8004124 <UART_SetConfig+0x118>)
 80040f2:	fba3 0302 	umull	r0, r3, r3, r2
 80040f6:	095b      	lsrs	r3, r3, #5
 80040f8:	2064      	movs	r0, #100	; 0x64
 80040fa:	fb00 f303 	mul.w	r3, r0, r3
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	011b      	lsls	r3, r3, #4
 8004102:	3332      	adds	r3, #50	; 0x32
 8004104:	4a07      	ldr	r2, [pc, #28]	; (8004124 <UART_SetConfig+0x118>)
 8004106:	fba2 2303 	umull	r2, r3, r2, r3
 800410a:	095b      	lsrs	r3, r3, #5
 800410c:	f003 020f 	and.w	r2, r3, #15
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	440a      	add	r2, r1
 8004116:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004118:	bf00      	nop
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40013800 	.word	0x40013800
 8004124:	51eb851f 	.word	0x51eb851f

08004128 <sbrk_aligned>:
 8004128:	b570      	push	{r4, r5, r6, lr}
 800412a:	4e0e      	ldr	r6, [pc, #56]	; (8004164 <sbrk_aligned+0x3c>)
 800412c:	460c      	mov	r4, r1
 800412e:	6831      	ldr	r1, [r6, #0]
 8004130:	4605      	mov	r5, r0
 8004132:	b911      	cbnz	r1, 800413a <sbrk_aligned+0x12>
 8004134:	f000 fae8 	bl	8004708 <_sbrk_r>
 8004138:	6030      	str	r0, [r6, #0]
 800413a:	4621      	mov	r1, r4
 800413c:	4628      	mov	r0, r5
 800413e:	f000 fae3 	bl	8004708 <_sbrk_r>
 8004142:	1c43      	adds	r3, r0, #1
 8004144:	d00a      	beq.n	800415c <sbrk_aligned+0x34>
 8004146:	1cc4      	adds	r4, r0, #3
 8004148:	f024 0403 	bic.w	r4, r4, #3
 800414c:	42a0      	cmp	r0, r4
 800414e:	d007      	beq.n	8004160 <sbrk_aligned+0x38>
 8004150:	1a21      	subs	r1, r4, r0
 8004152:	4628      	mov	r0, r5
 8004154:	f000 fad8 	bl	8004708 <_sbrk_r>
 8004158:	3001      	adds	r0, #1
 800415a:	d101      	bne.n	8004160 <sbrk_aligned+0x38>
 800415c:	f04f 34ff 	mov.w	r4, #4294967295
 8004160:	4620      	mov	r0, r4
 8004162:	bd70      	pop	{r4, r5, r6, pc}
 8004164:	200001b0 	.word	0x200001b0

08004168 <_malloc_r>:
 8004168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800416c:	1ccd      	adds	r5, r1, #3
 800416e:	f025 0503 	bic.w	r5, r5, #3
 8004172:	3508      	adds	r5, #8
 8004174:	2d0c      	cmp	r5, #12
 8004176:	bf38      	it	cc
 8004178:	250c      	movcc	r5, #12
 800417a:	2d00      	cmp	r5, #0
 800417c:	4607      	mov	r7, r0
 800417e:	db01      	blt.n	8004184 <_malloc_r+0x1c>
 8004180:	42a9      	cmp	r1, r5
 8004182:	d905      	bls.n	8004190 <_malloc_r+0x28>
 8004184:	230c      	movs	r3, #12
 8004186:	2600      	movs	r6, #0
 8004188:	603b      	str	r3, [r7, #0]
 800418a:	4630      	mov	r0, r6
 800418c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004190:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004264 <_malloc_r+0xfc>
 8004194:	f000 f868 	bl	8004268 <__malloc_lock>
 8004198:	f8d8 3000 	ldr.w	r3, [r8]
 800419c:	461c      	mov	r4, r3
 800419e:	bb5c      	cbnz	r4, 80041f8 <_malloc_r+0x90>
 80041a0:	4629      	mov	r1, r5
 80041a2:	4638      	mov	r0, r7
 80041a4:	f7ff ffc0 	bl	8004128 <sbrk_aligned>
 80041a8:	1c43      	adds	r3, r0, #1
 80041aa:	4604      	mov	r4, r0
 80041ac:	d155      	bne.n	800425a <_malloc_r+0xf2>
 80041ae:	f8d8 4000 	ldr.w	r4, [r8]
 80041b2:	4626      	mov	r6, r4
 80041b4:	2e00      	cmp	r6, #0
 80041b6:	d145      	bne.n	8004244 <_malloc_r+0xdc>
 80041b8:	2c00      	cmp	r4, #0
 80041ba:	d048      	beq.n	800424e <_malloc_r+0xe6>
 80041bc:	6823      	ldr	r3, [r4, #0]
 80041be:	4631      	mov	r1, r6
 80041c0:	4638      	mov	r0, r7
 80041c2:	eb04 0903 	add.w	r9, r4, r3
 80041c6:	f000 fa9f 	bl	8004708 <_sbrk_r>
 80041ca:	4581      	cmp	r9, r0
 80041cc:	d13f      	bne.n	800424e <_malloc_r+0xe6>
 80041ce:	6821      	ldr	r1, [r4, #0]
 80041d0:	4638      	mov	r0, r7
 80041d2:	1a6d      	subs	r5, r5, r1
 80041d4:	4629      	mov	r1, r5
 80041d6:	f7ff ffa7 	bl	8004128 <sbrk_aligned>
 80041da:	3001      	adds	r0, #1
 80041dc:	d037      	beq.n	800424e <_malloc_r+0xe6>
 80041de:	6823      	ldr	r3, [r4, #0]
 80041e0:	442b      	add	r3, r5
 80041e2:	6023      	str	r3, [r4, #0]
 80041e4:	f8d8 3000 	ldr.w	r3, [r8]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d038      	beq.n	800425e <_malloc_r+0xf6>
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	42a2      	cmp	r2, r4
 80041f0:	d12b      	bne.n	800424a <_malloc_r+0xe2>
 80041f2:	2200      	movs	r2, #0
 80041f4:	605a      	str	r2, [r3, #4]
 80041f6:	e00f      	b.n	8004218 <_malloc_r+0xb0>
 80041f8:	6822      	ldr	r2, [r4, #0]
 80041fa:	1b52      	subs	r2, r2, r5
 80041fc:	d41f      	bmi.n	800423e <_malloc_r+0xd6>
 80041fe:	2a0b      	cmp	r2, #11
 8004200:	d917      	bls.n	8004232 <_malloc_r+0xca>
 8004202:	1961      	adds	r1, r4, r5
 8004204:	42a3      	cmp	r3, r4
 8004206:	6025      	str	r5, [r4, #0]
 8004208:	bf18      	it	ne
 800420a:	6059      	strne	r1, [r3, #4]
 800420c:	6863      	ldr	r3, [r4, #4]
 800420e:	bf08      	it	eq
 8004210:	f8c8 1000 	streq.w	r1, [r8]
 8004214:	5162      	str	r2, [r4, r5]
 8004216:	604b      	str	r3, [r1, #4]
 8004218:	4638      	mov	r0, r7
 800421a:	f104 060b 	add.w	r6, r4, #11
 800421e:	f000 f829 	bl	8004274 <__malloc_unlock>
 8004222:	f026 0607 	bic.w	r6, r6, #7
 8004226:	1d23      	adds	r3, r4, #4
 8004228:	1af2      	subs	r2, r6, r3
 800422a:	d0ae      	beq.n	800418a <_malloc_r+0x22>
 800422c:	1b9b      	subs	r3, r3, r6
 800422e:	50a3      	str	r3, [r4, r2]
 8004230:	e7ab      	b.n	800418a <_malloc_r+0x22>
 8004232:	42a3      	cmp	r3, r4
 8004234:	6862      	ldr	r2, [r4, #4]
 8004236:	d1dd      	bne.n	80041f4 <_malloc_r+0x8c>
 8004238:	f8c8 2000 	str.w	r2, [r8]
 800423c:	e7ec      	b.n	8004218 <_malloc_r+0xb0>
 800423e:	4623      	mov	r3, r4
 8004240:	6864      	ldr	r4, [r4, #4]
 8004242:	e7ac      	b.n	800419e <_malloc_r+0x36>
 8004244:	4634      	mov	r4, r6
 8004246:	6876      	ldr	r6, [r6, #4]
 8004248:	e7b4      	b.n	80041b4 <_malloc_r+0x4c>
 800424a:	4613      	mov	r3, r2
 800424c:	e7cc      	b.n	80041e8 <_malloc_r+0x80>
 800424e:	230c      	movs	r3, #12
 8004250:	4638      	mov	r0, r7
 8004252:	603b      	str	r3, [r7, #0]
 8004254:	f000 f80e 	bl	8004274 <__malloc_unlock>
 8004258:	e797      	b.n	800418a <_malloc_r+0x22>
 800425a:	6025      	str	r5, [r4, #0]
 800425c:	e7dc      	b.n	8004218 <_malloc_r+0xb0>
 800425e:	605b      	str	r3, [r3, #4]
 8004260:	deff      	udf	#255	; 0xff
 8004262:	bf00      	nop
 8004264:	200001ac 	.word	0x200001ac

08004268 <__malloc_lock>:
 8004268:	4801      	ldr	r0, [pc, #4]	; (8004270 <__malloc_lock+0x8>)
 800426a:	f000 ba9a 	b.w	80047a2 <__retarget_lock_acquire_recursive>
 800426e:	bf00      	nop
 8004270:	200002f4 	.word	0x200002f4

08004274 <__malloc_unlock>:
 8004274:	4801      	ldr	r0, [pc, #4]	; (800427c <__malloc_unlock+0x8>)
 8004276:	f000 ba95 	b.w	80047a4 <__retarget_lock_release_recursive>
 800427a:	bf00      	nop
 800427c:	200002f4 	.word	0x200002f4

08004280 <std>:
 8004280:	2300      	movs	r3, #0
 8004282:	b510      	push	{r4, lr}
 8004284:	4604      	mov	r4, r0
 8004286:	e9c0 3300 	strd	r3, r3, [r0]
 800428a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800428e:	6083      	str	r3, [r0, #8]
 8004290:	8181      	strh	r1, [r0, #12]
 8004292:	6643      	str	r3, [r0, #100]	; 0x64
 8004294:	81c2      	strh	r2, [r0, #14]
 8004296:	6183      	str	r3, [r0, #24]
 8004298:	4619      	mov	r1, r3
 800429a:	2208      	movs	r2, #8
 800429c:	305c      	adds	r0, #92	; 0x5c
 800429e:	f000 f9f7 	bl	8004690 <memset>
 80042a2:	4b0d      	ldr	r3, [pc, #52]	; (80042d8 <std+0x58>)
 80042a4:	6224      	str	r4, [r4, #32]
 80042a6:	6263      	str	r3, [r4, #36]	; 0x24
 80042a8:	4b0c      	ldr	r3, [pc, #48]	; (80042dc <std+0x5c>)
 80042aa:	62a3      	str	r3, [r4, #40]	; 0x28
 80042ac:	4b0c      	ldr	r3, [pc, #48]	; (80042e0 <std+0x60>)
 80042ae:	62e3      	str	r3, [r4, #44]	; 0x2c
 80042b0:	4b0c      	ldr	r3, [pc, #48]	; (80042e4 <std+0x64>)
 80042b2:	6323      	str	r3, [r4, #48]	; 0x30
 80042b4:	4b0c      	ldr	r3, [pc, #48]	; (80042e8 <std+0x68>)
 80042b6:	429c      	cmp	r4, r3
 80042b8:	d006      	beq.n	80042c8 <std+0x48>
 80042ba:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80042be:	4294      	cmp	r4, r2
 80042c0:	d002      	beq.n	80042c8 <std+0x48>
 80042c2:	33d0      	adds	r3, #208	; 0xd0
 80042c4:	429c      	cmp	r4, r3
 80042c6:	d105      	bne.n	80042d4 <std+0x54>
 80042c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80042cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042d0:	f000 ba66 	b.w	80047a0 <__retarget_lock_init_recursive>
 80042d4:	bd10      	pop	{r4, pc}
 80042d6:	bf00      	nop
 80042d8:	080044e1 	.word	0x080044e1
 80042dc:	08004503 	.word	0x08004503
 80042e0:	0800453b 	.word	0x0800453b
 80042e4:	0800455f 	.word	0x0800455f
 80042e8:	200001b4 	.word	0x200001b4

080042ec <stdio_exit_handler>:
 80042ec:	4a02      	ldr	r2, [pc, #8]	; (80042f8 <stdio_exit_handler+0xc>)
 80042ee:	4903      	ldr	r1, [pc, #12]	; (80042fc <stdio_exit_handler+0x10>)
 80042f0:	4803      	ldr	r0, [pc, #12]	; (8004300 <stdio_exit_handler+0x14>)
 80042f2:	f000 b869 	b.w	80043c8 <_fwalk_sglue>
 80042f6:	bf00      	nop
 80042f8:	2000000c 	.word	0x2000000c
 80042fc:	08004ee9 	.word	0x08004ee9
 8004300:	20000018 	.word	0x20000018

08004304 <cleanup_stdio>:
 8004304:	6841      	ldr	r1, [r0, #4]
 8004306:	4b0c      	ldr	r3, [pc, #48]	; (8004338 <cleanup_stdio+0x34>)
 8004308:	b510      	push	{r4, lr}
 800430a:	4299      	cmp	r1, r3
 800430c:	4604      	mov	r4, r0
 800430e:	d001      	beq.n	8004314 <cleanup_stdio+0x10>
 8004310:	f000 fdea 	bl	8004ee8 <_fflush_r>
 8004314:	68a1      	ldr	r1, [r4, #8]
 8004316:	4b09      	ldr	r3, [pc, #36]	; (800433c <cleanup_stdio+0x38>)
 8004318:	4299      	cmp	r1, r3
 800431a:	d002      	beq.n	8004322 <cleanup_stdio+0x1e>
 800431c:	4620      	mov	r0, r4
 800431e:	f000 fde3 	bl	8004ee8 <_fflush_r>
 8004322:	68e1      	ldr	r1, [r4, #12]
 8004324:	4b06      	ldr	r3, [pc, #24]	; (8004340 <cleanup_stdio+0x3c>)
 8004326:	4299      	cmp	r1, r3
 8004328:	d004      	beq.n	8004334 <cleanup_stdio+0x30>
 800432a:	4620      	mov	r0, r4
 800432c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004330:	f000 bdda 	b.w	8004ee8 <_fflush_r>
 8004334:	bd10      	pop	{r4, pc}
 8004336:	bf00      	nop
 8004338:	200001b4 	.word	0x200001b4
 800433c:	2000021c 	.word	0x2000021c
 8004340:	20000284 	.word	0x20000284

08004344 <global_stdio_init.part.0>:
 8004344:	b510      	push	{r4, lr}
 8004346:	4b0b      	ldr	r3, [pc, #44]	; (8004374 <global_stdio_init.part.0+0x30>)
 8004348:	4c0b      	ldr	r4, [pc, #44]	; (8004378 <global_stdio_init.part.0+0x34>)
 800434a:	4a0c      	ldr	r2, [pc, #48]	; (800437c <global_stdio_init.part.0+0x38>)
 800434c:	4620      	mov	r0, r4
 800434e:	601a      	str	r2, [r3, #0]
 8004350:	2104      	movs	r1, #4
 8004352:	2200      	movs	r2, #0
 8004354:	f7ff ff94 	bl	8004280 <std>
 8004358:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800435c:	2201      	movs	r2, #1
 800435e:	2109      	movs	r1, #9
 8004360:	f7ff ff8e 	bl	8004280 <std>
 8004364:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004368:	2202      	movs	r2, #2
 800436a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800436e:	2112      	movs	r1, #18
 8004370:	f7ff bf86 	b.w	8004280 <std>
 8004374:	200002ec 	.word	0x200002ec
 8004378:	200001b4 	.word	0x200001b4
 800437c:	080042ed 	.word	0x080042ed

08004380 <__sfp_lock_acquire>:
 8004380:	4801      	ldr	r0, [pc, #4]	; (8004388 <__sfp_lock_acquire+0x8>)
 8004382:	f000 ba0e 	b.w	80047a2 <__retarget_lock_acquire_recursive>
 8004386:	bf00      	nop
 8004388:	200002f5 	.word	0x200002f5

0800438c <__sfp_lock_release>:
 800438c:	4801      	ldr	r0, [pc, #4]	; (8004394 <__sfp_lock_release+0x8>)
 800438e:	f000 ba09 	b.w	80047a4 <__retarget_lock_release_recursive>
 8004392:	bf00      	nop
 8004394:	200002f5 	.word	0x200002f5

08004398 <__sinit>:
 8004398:	b510      	push	{r4, lr}
 800439a:	4604      	mov	r4, r0
 800439c:	f7ff fff0 	bl	8004380 <__sfp_lock_acquire>
 80043a0:	6a23      	ldr	r3, [r4, #32]
 80043a2:	b11b      	cbz	r3, 80043ac <__sinit+0x14>
 80043a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043a8:	f7ff bff0 	b.w	800438c <__sfp_lock_release>
 80043ac:	4b04      	ldr	r3, [pc, #16]	; (80043c0 <__sinit+0x28>)
 80043ae:	6223      	str	r3, [r4, #32]
 80043b0:	4b04      	ldr	r3, [pc, #16]	; (80043c4 <__sinit+0x2c>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1f5      	bne.n	80043a4 <__sinit+0xc>
 80043b8:	f7ff ffc4 	bl	8004344 <global_stdio_init.part.0>
 80043bc:	e7f2      	b.n	80043a4 <__sinit+0xc>
 80043be:	bf00      	nop
 80043c0:	08004305 	.word	0x08004305
 80043c4:	200002ec 	.word	0x200002ec

080043c8 <_fwalk_sglue>:
 80043c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043cc:	4607      	mov	r7, r0
 80043ce:	4688      	mov	r8, r1
 80043d0:	4614      	mov	r4, r2
 80043d2:	2600      	movs	r6, #0
 80043d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80043d8:	f1b9 0901 	subs.w	r9, r9, #1
 80043dc:	d505      	bpl.n	80043ea <_fwalk_sglue+0x22>
 80043de:	6824      	ldr	r4, [r4, #0]
 80043e0:	2c00      	cmp	r4, #0
 80043e2:	d1f7      	bne.n	80043d4 <_fwalk_sglue+0xc>
 80043e4:	4630      	mov	r0, r6
 80043e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043ea:	89ab      	ldrh	r3, [r5, #12]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d907      	bls.n	8004400 <_fwalk_sglue+0x38>
 80043f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80043f4:	3301      	adds	r3, #1
 80043f6:	d003      	beq.n	8004400 <_fwalk_sglue+0x38>
 80043f8:	4629      	mov	r1, r5
 80043fa:	4638      	mov	r0, r7
 80043fc:	47c0      	blx	r8
 80043fe:	4306      	orrs	r6, r0
 8004400:	3568      	adds	r5, #104	; 0x68
 8004402:	e7e9      	b.n	80043d8 <_fwalk_sglue+0x10>

08004404 <iprintf>:
 8004404:	b40f      	push	{r0, r1, r2, r3}
 8004406:	b507      	push	{r0, r1, r2, lr}
 8004408:	4906      	ldr	r1, [pc, #24]	; (8004424 <iprintf+0x20>)
 800440a:	ab04      	add	r3, sp, #16
 800440c:	6808      	ldr	r0, [r1, #0]
 800440e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004412:	6881      	ldr	r1, [r0, #8]
 8004414:	9301      	str	r3, [sp, #4]
 8004416:	f000 fa37 	bl	8004888 <_vfiprintf_r>
 800441a:	b003      	add	sp, #12
 800441c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004420:	b004      	add	sp, #16
 8004422:	4770      	bx	lr
 8004424:	20000064 	.word	0x20000064

08004428 <_puts_r>:
 8004428:	6a03      	ldr	r3, [r0, #32]
 800442a:	b570      	push	{r4, r5, r6, lr}
 800442c:	4605      	mov	r5, r0
 800442e:	460e      	mov	r6, r1
 8004430:	6884      	ldr	r4, [r0, #8]
 8004432:	b90b      	cbnz	r3, 8004438 <_puts_r+0x10>
 8004434:	f7ff ffb0 	bl	8004398 <__sinit>
 8004438:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800443a:	07db      	lsls	r3, r3, #31
 800443c:	d405      	bmi.n	800444a <_puts_r+0x22>
 800443e:	89a3      	ldrh	r3, [r4, #12]
 8004440:	0598      	lsls	r0, r3, #22
 8004442:	d402      	bmi.n	800444a <_puts_r+0x22>
 8004444:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004446:	f000 f9ac 	bl	80047a2 <__retarget_lock_acquire_recursive>
 800444a:	89a3      	ldrh	r3, [r4, #12]
 800444c:	0719      	lsls	r1, r3, #28
 800444e:	d513      	bpl.n	8004478 <_puts_r+0x50>
 8004450:	6923      	ldr	r3, [r4, #16]
 8004452:	b18b      	cbz	r3, 8004478 <_puts_r+0x50>
 8004454:	3e01      	subs	r6, #1
 8004456:	68a3      	ldr	r3, [r4, #8]
 8004458:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800445c:	3b01      	subs	r3, #1
 800445e:	60a3      	str	r3, [r4, #8]
 8004460:	b9e9      	cbnz	r1, 800449e <_puts_r+0x76>
 8004462:	2b00      	cmp	r3, #0
 8004464:	da2e      	bge.n	80044c4 <_puts_r+0x9c>
 8004466:	4622      	mov	r2, r4
 8004468:	210a      	movs	r1, #10
 800446a:	4628      	mov	r0, r5
 800446c:	f000 f87b 	bl	8004566 <__swbuf_r>
 8004470:	3001      	adds	r0, #1
 8004472:	d007      	beq.n	8004484 <_puts_r+0x5c>
 8004474:	250a      	movs	r5, #10
 8004476:	e007      	b.n	8004488 <_puts_r+0x60>
 8004478:	4621      	mov	r1, r4
 800447a:	4628      	mov	r0, r5
 800447c:	f000 f8b0 	bl	80045e0 <__swsetup_r>
 8004480:	2800      	cmp	r0, #0
 8004482:	d0e7      	beq.n	8004454 <_puts_r+0x2c>
 8004484:	f04f 35ff 	mov.w	r5, #4294967295
 8004488:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800448a:	07da      	lsls	r2, r3, #31
 800448c:	d405      	bmi.n	800449a <_puts_r+0x72>
 800448e:	89a3      	ldrh	r3, [r4, #12]
 8004490:	059b      	lsls	r3, r3, #22
 8004492:	d402      	bmi.n	800449a <_puts_r+0x72>
 8004494:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004496:	f000 f985 	bl	80047a4 <__retarget_lock_release_recursive>
 800449a:	4628      	mov	r0, r5
 800449c:	bd70      	pop	{r4, r5, r6, pc}
 800449e:	2b00      	cmp	r3, #0
 80044a0:	da04      	bge.n	80044ac <_puts_r+0x84>
 80044a2:	69a2      	ldr	r2, [r4, #24]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	dc06      	bgt.n	80044b6 <_puts_r+0x8e>
 80044a8:	290a      	cmp	r1, #10
 80044aa:	d004      	beq.n	80044b6 <_puts_r+0x8e>
 80044ac:	6823      	ldr	r3, [r4, #0]
 80044ae:	1c5a      	adds	r2, r3, #1
 80044b0:	6022      	str	r2, [r4, #0]
 80044b2:	7019      	strb	r1, [r3, #0]
 80044b4:	e7cf      	b.n	8004456 <_puts_r+0x2e>
 80044b6:	4622      	mov	r2, r4
 80044b8:	4628      	mov	r0, r5
 80044ba:	f000 f854 	bl	8004566 <__swbuf_r>
 80044be:	3001      	adds	r0, #1
 80044c0:	d1c9      	bne.n	8004456 <_puts_r+0x2e>
 80044c2:	e7df      	b.n	8004484 <_puts_r+0x5c>
 80044c4:	250a      	movs	r5, #10
 80044c6:	6823      	ldr	r3, [r4, #0]
 80044c8:	1c5a      	adds	r2, r3, #1
 80044ca:	6022      	str	r2, [r4, #0]
 80044cc:	701d      	strb	r5, [r3, #0]
 80044ce:	e7db      	b.n	8004488 <_puts_r+0x60>

080044d0 <puts>:
 80044d0:	4b02      	ldr	r3, [pc, #8]	; (80044dc <puts+0xc>)
 80044d2:	4601      	mov	r1, r0
 80044d4:	6818      	ldr	r0, [r3, #0]
 80044d6:	f7ff bfa7 	b.w	8004428 <_puts_r>
 80044da:	bf00      	nop
 80044dc:	20000064 	.word	0x20000064

080044e0 <__sread>:
 80044e0:	b510      	push	{r4, lr}
 80044e2:	460c      	mov	r4, r1
 80044e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044e8:	f000 f8fc 	bl	80046e4 <_read_r>
 80044ec:	2800      	cmp	r0, #0
 80044ee:	bfab      	itete	ge
 80044f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80044f2:	89a3      	ldrhlt	r3, [r4, #12]
 80044f4:	181b      	addge	r3, r3, r0
 80044f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80044fa:	bfac      	ite	ge
 80044fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80044fe:	81a3      	strhlt	r3, [r4, #12]
 8004500:	bd10      	pop	{r4, pc}

08004502 <__swrite>:
 8004502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004506:	461f      	mov	r7, r3
 8004508:	898b      	ldrh	r3, [r1, #12]
 800450a:	4605      	mov	r5, r0
 800450c:	05db      	lsls	r3, r3, #23
 800450e:	460c      	mov	r4, r1
 8004510:	4616      	mov	r6, r2
 8004512:	d505      	bpl.n	8004520 <__swrite+0x1e>
 8004514:	2302      	movs	r3, #2
 8004516:	2200      	movs	r2, #0
 8004518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800451c:	f000 f8d0 	bl	80046c0 <_lseek_r>
 8004520:	89a3      	ldrh	r3, [r4, #12]
 8004522:	4632      	mov	r2, r6
 8004524:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004528:	81a3      	strh	r3, [r4, #12]
 800452a:	4628      	mov	r0, r5
 800452c:	463b      	mov	r3, r7
 800452e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004532:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004536:	f000 b8f7 	b.w	8004728 <_write_r>

0800453a <__sseek>:
 800453a:	b510      	push	{r4, lr}
 800453c:	460c      	mov	r4, r1
 800453e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004542:	f000 f8bd 	bl	80046c0 <_lseek_r>
 8004546:	1c43      	adds	r3, r0, #1
 8004548:	89a3      	ldrh	r3, [r4, #12]
 800454a:	bf15      	itete	ne
 800454c:	6560      	strne	r0, [r4, #84]	; 0x54
 800454e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004552:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004556:	81a3      	strheq	r3, [r4, #12]
 8004558:	bf18      	it	ne
 800455a:	81a3      	strhne	r3, [r4, #12]
 800455c:	bd10      	pop	{r4, pc}

0800455e <__sclose>:
 800455e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004562:	f000 b89d 	b.w	80046a0 <_close_r>

08004566 <__swbuf_r>:
 8004566:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004568:	460e      	mov	r6, r1
 800456a:	4614      	mov	r4, r2
 800456c:	4605      	mov	r5, r0
 800456e:	b118      	cbz	r0, 8004578 <__swbuf_r+0x12>
 8004570:	6a03      	ldr	r3, [r0, #32]
 8004572:	b90b      	cbnz	r3, 8004578 <__swbuf_r+0x12>
 8004574:	f7ff ff10 	bl	8004398 <__sinit>
 8004578:	69a3      	ldr	r3, [r4, #24]
 800457a:	60a3      	str	r3, [r4, #8]
 800457c:	89a3      	ldrh	r3, [r4, #12]
 800457e:	071a      	lsls	r2, r3, #28
 8004580:	d525      	bpl.n	80045ce <__swbuf_r+0x68>
 8004582:	6923      	ldr	r3, [r4, #16]
 8004584:	b31b      	cbz	r3, 80045ce <__swbuf_r+0x68>
 8004586:	6823      	ldr	r3, [r4, #0]
 8004588:	6922      	ldr	r2, [r4, #16]
 800458a:	b2f6      	uxtb	r6, r6
 800458c:	1a98      	subs	r0, r3, r2
 800458e:	6963      	ldr	r3, [r4, #20]
 8004590:	4637      	mov	r7, r6
 8004592:	4283      	cmp	r3, r0
 8004594:	dc04      	bgt.n	80045a0 <__swbuf_r+0x3a>
 8004596:	4621      	mov	r1, r4
 8004598:	4628      	mov	r0, r5
 800459a:	f000 fca5 	bl	8004ee8 <_fflush_r>
 800459e:	b9e0      	cbnz	r0, 80045da <__swbuf_r+0x74>
 80045a0:	68a3      	ldr	r3, [r4, #8]
 80045a2:	3b01      	subs	r3, #1
 80045a4:	60a3      	str	r3, [r4, #8]
 80045a6:	6823      	ldr	r3, [r4, #0]
 80045a8:	1c5a      	adds	r2, r3, #1
 80045aa:	6022      	str	r2, [r4, #0]
 80045ac:	701e      	strb	r6, [r3, #0]
 80045ae:	6962      	ldr	r2, [r4, #20]
 80045b0:	1c43      	adds	r3, r0, #1
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d004      	beq.n	80045c0 <__swbuf_r+0x5a>
 80045b6:	89a3      	ldrh	r3, [r4, #12]
 80045b8:	07db      	lsls	r3, r3, #31
 80045ba:	d506      	bpl.n	80045ca <__swbuf_r+0x64>
 80045bc:	2e0a      	cmp	r6, #10
 80045be:	d104      	bne.n	80045ca <__swbuf_r+0x64>
 80045c0:	4621      	mov	r1, r4
 80045c2:	4628      	mov	r0, r5
 80045c4:	f000 fc90 	bl	8004ee8 <_fflush_r>
 80045c8:	b938      	cbnz	r0, 80045da <__swbuf_r+0x74>
 80045ca:	4638      	mov	r0, r7
 80045cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045ce:	4621      	mov	r1, r4
 80045d0:	4628      	mov	r0, r5
 80045d2:	f000 f805 	bl	80045e0 <__swsetup_r>
 80045d6:	2800      	cmp	r0, #0
 80045d8:	d0d5      	beq.n	8004586 <__swbuf_r+0x20>
 80045da:	f04f 37ff 	mov.w	r7, #4294967295
 80045de:	e7f4      	b.n	80045ca <__swbuf_r+0x64>

080045e0 <__swsetup_r>:
 80045e0:	b538      	push	{r3, r4, r5, lr}
 80045e2:	4b2a      	ldr	r3, [pc, #168]	; (800468c <__swsetup_r+0xac>)
 80045e4:	4605      	mov	r5, r0
 80045e6:	6818      	ldr	r0, [r3, #0]
 80045e8:	460c      	mov	r4, r1
 80045ea:	b118      	cbz	r0, 80045f4 <__swsetup_r+0x14>
 80045ec:	6a03      	ldr	r3, [r0, #32]
 80045ee:	b90b      	cbnz	r3, 80045f4 <__swsetup_r+0x14>
 80045f0:	f7ff fed2 	bl	8004398 <__sinit>
 80045f4:	89a3      	ldrh	r3, [r4, #12]
 80045f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80045fa:	0718      	lsls	r0, r3, #28
 80045fc:	d422      	bmi.n	8004644 <__swsetup_r+0x64>
 80045fe:	06d9      	lsls	r1, r3, #27
 8004600:	d407      	bmi.n	8004612 <__swsetup_r+0x32>
 8004602:	2309      	movs	r3, #9
 8004604:	602b      	str	r3, [r5, #0]
 8004606:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800460a:	f04f 30ff 	mov.w	r0, #4294967295
 800460e:	81a3      	strh	r3, [r4, #12]
 8004610:	e034      	b.n	800467c <__swsetup_r+0x9c>
 8004612:	0758      	lsls	r0, r3, #29
 8004614:	d512      	bpl.n	800463c <__swsetup_r+0x5c>
 8004616:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004618:	b141      	cbz	r1, 800462c <__swsetup_r+0x4c>
 800461a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800461e:	4299      	cmp	r1, r3
 8004620:	d002      	beq.n	8004628 <__swsetup_r+0x48>
 8004622:	4628      	mov	r0, r5
 8004624:	f000 f8c0 	bl	80047a8 <_free_r>
 8004628:	2300      	movs	r3, #0
 800462a:	6363      	str	r3, [r4, #52]	; 0x34
 800462c:	89a3      	ldrh	r3, [r4, #12]
 800462e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004632:	81a3      	strh	r3, [r4, #12]
 8004634:	2300      	movs	r3, #0
 8004636:	6063      	str	r3, [r4, #4]
 8004638:	6923      	ldr	r3, [r4, #16]
 800463a:	6023      	str	r3, [r4, #0]
 800463c:	89a3      	ldrh	r3, [r4, #12]
 800463e:	f043 0308 	orr.w	r3, r3, #8
 8004642:	81a3      	strh	r3, [r4, #12]
 8004644:	6923      	ldr	r3, [r4, #16]
 8004646:	b94b      	cbnz	r3, 800465c <__swsetup_r+0x7c>
 8004648:	89a3      	ldrh	r3, [r4, #12]
 800464a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800464e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004652:	d003      	beq.n	800465c <__swsetup_r+0x7c>
 8004654:	4621      	mov	r1, r4
 8004656:	4628      	mov	r0, r5
 8004658:	f000 fc93 	bl	8004f82 <__smakebuf_r>
 800465c:	89a0      	ldrh	r0, [r4, #12]
 800465e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004662:	f010 0301 	ands.w	r3, r0, #1
 8004666:	d00a      	beq.n	800467e <__swsetup_r+0x9e>
 8004668:	2300      	movs	r3, #0
 800466a:	60a3      	str	r3, [r4, #8]
 800466c:	6963      	ldr	r3, [r4, #20]
 800466e:	425b      	negs	r3, r3
 8004670:	61a3      	str	r3, [r4, #24]
 8004672:	6923      	ldr	r3, [r4, #16]
 8004674:	b943      	cbnz	r3, 8004688 <__swsetup_r+0xa8>
 8004676:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800467a:	d1c4      	bne.n	8004606 <__swsetup_r+0x26>
 800467c:	bd38      	pop	{r3, r4, r5, pc}
 800467e:	0781      	lsls	r1, r0, #30
 8004680:	bf58      	it	pl
 8004682:	6963      	ldrpl	r3, [r4, #20]
 8004684:	60a3      	str	r3, [r4, #8]
 8004686:	e7f4      	b.n	8004672 <__swsetup_r+0x92>
 8004688:	2000      	movs	r0, #0
 800468a:	e7f7      	b.n	800467c <__swsetup_r+0x9c>
 800468c:	20000064 	.word	0x20000064

08004690 <memset>:
 8004690:	4603      	mov	r3, r0
 8004692:	4402      	add	r2, r0
 8004694:	4293      	cmp	r3, r2
 8004696:	d100      	bne.n	800469a <memset+0xa>
 8004698:	4770      	bx	lr
 800469a:	f803 1b01 	strb.w	r1, [r3], #1
 800469e:	e7f9      	b.n	8004694 <memset+0x4>

080046a0 <_close_r>:
 80046a0:	b538      	push	{r3, r4, r5, lr}
 80046a2:	2300      	movs	r3, #0
 80046a4:	4d05      	ldr	r5, [pc, #20]	; (80046bc <_close_r+0x1c>)
 80046a6:	4604      	mov	r4, r0
 80046a8:	4608      	mov	r0, r1
 80046aa:	602b      	str	r3, [r5, #0]
 80046ac:	f7fd fc32 	bl	8001f14 <_close>
 80046b0:	1c43      	adds	r3, r0, #1
 80046b2:	d102      	bne.n	80046ba <_close_r+0x1a>
 80046b4:	682b      	ldr	r3, [r5, #0]
 80046b6:	b103      	cbz	r3, 80046ba <_close_r+0x1a>
 80046b8:	6023      	str	r3, [r4, #0]
 80046ba:	bd38      	pop	{r3, r4, r5, pc}
 80046bc:	200002f0 	.word	0x200002f0

080046c0 <_lseek_r>:
 80046c0:	b538      	push	{r3, r4, r5, lr}
 80046c2:	4604      	mov	r4, r0
 80046c4:	4608      	mov	r0, r1
 80046c6:	4611      	mov	r1, r2
 80046c8:	2200      	movs	r2, #0
 80046ca:	4d05      	ldr	r5, [pc, #20]	; (80046e0 <_lseek_r+0x20>)
 80046cc:	602a      	str	r2, [r5, #0]
 80046ce:	461a      	mov	r2, r3
 80046d0:	f7fd fc44 	bl	8001f5c <_lseek>
 80046d4:	1c43      	adds	r3, r0, #1
 80046d6:	d102      	bne.n	80046de <_lseek_r+0x1e>
 80046d8:	682b      	ldr	r3, [r5, #0]
 80046da:	b103      	cbz	r3, 80046de <_lseek_r+0x1e>
 80046dc:	6023      	str	r3, [r4, #0]
 80046de:	bd38      	pop	{r3, r4, r5, pc}
 80046e0:	200002f0 	.word	0x200002f0

080046e4 <_read_r>:
 80046e4:	b538      	push	{r3, r4, r5, lr}
 80046e6:	4604      	mov	r4, r0
 80046e8:	4608      	mov	r0, r1
 80046ea:	4611      	mov	r1, r2
 80046ec:	2200      	movs	r2, #0
 80046ee:	4d05      	ldr	r5, [pc, #20]	; (8004704 <_read_r+0x20>)
 80046f0:	602a      	str	r2, [r5, #0]
 80046f2:	461a      	mov	r2, r3
 80046f4:	f7fd fbd5 	bl	8001ea2 <_read>
 80046f8:	1c43      	adds	r3, r0, #1
 80046fa:	d102      	bne.n	8004702 <_read_r+0x1e>
 80046fc:	682b      	ldr	r3, [r5, #0]
 80046fe:	b103      	cbz	r3, 8004702 <_read_r+0x1e>
 8004700:	6023      	str	r3, [r4, #0]
 8004702:	bd38      	pop	{r3, r4, r5, pc}
 8004704:	200002f0 	.word	0x200002f0

08004708 <_sbrk_r>:
 8004708:	b538      	push	{r3, r4, r5, lr}
 800470a:	2300      	movs	r3, #0
 800470c:	4d05      	ldr	r5, [pc, #20]	; (8004724 <_sbrk_r+0x1c>)
 800470e:	4604      	mov	r4, r0
 8004710:	4608      	mov	r0, r1
 8004712:	602b      	str	r3, [r5, #0]
 8004714:	f7fd fc2e 	bl	8001f74 <_sbrk>
 8004718:	1c43      	adds	r3, r0, #1
 800471a:	d102      	bne.n	8004722 <_sbrk_r+0x1a>
 800471c:	682b      	ldr	r3, [r5, #0]
 800471e:	b103      	cbz	r3, 8004722 <_sbrk_r+0x1a>
 8004720:	6023      	str	r3, [r4, #0]
 8004722:	bd38      	pop	{r3, r4, r5, pc}
 8004724:	200002f0 	.word	0x200002f0

08004728 <_write_r>:
 8004728:	b538      	push	{r3, r4, r5, lr}
 800472a:	4604      	mov	r4, r0
 800472c:	4608      	mov	r0, r1
 800472e:	4611      	mov	r1, r2
 8004730:	2200      	movs	r2, #0
 8004732:	4d05      	ldr	r5, [pc, #20]	; (8004748 <_write_r+0x20>)
 8004734:	602a      	str	r2, [r5, #0]
 8004736:	461a      	mov	r2, r3
 8004738:	f7fd fbd0 	bl	8001edc <_write>
 800473c:	1c43      	adds	r3, r0, #1
 800473e:	d102      	bne.n	8004746 <_write_r+0x1e>
 8004740:	682b      	ldr	r3, [r5, #0]
 8004742:	b103      	cbz	r3, 8004746 <_write_r+0x1e>
 8004744:	6023      	str	r3, [r4, #0]
 8004746:	bd38      	pop	{r3, r4, r5, pc}
 8004748:	200002f0 	.word	0x200002f0

0800474c <__errno>:
 800474c:	4b01      	ldr	r3, [pc, #4]	; (8004754 <__errno+0x8>)
 800474e:	6818      	ldr	r0, [r3, #0]
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	20000064 	.word	0x20000064

08004758 <__libc_init_array>:
 8004758:	b570      	push	{r4, r5, r6, lr}
 800475a:	2600      	movs	r6, #0
 800475c:	4d0c      	ldr	r5, [pc, #48]	; (8004790 <__libc_init_array+0x38>)
 800475e:	4c0d      	ldr	r4, [pc, #52]	; (8004794 <__libc_init_array+0x3c>)
 8004760:	1b64      	subs	r4, r4, r5
 8004762:	10a4      	asrs	r4, r4, #2
 8004764:	42a6      	cmp	r6, r4
 8004766:	d109      	bne.n	800477c <__libc_init_array+0x24>
 8004768:	f000 fd74 	bl	8005254 <_init>
 800476c:	2600      	movs	r6, #0
 800476e:	4d0a      	ldr	r5, [pc, #40]	; (8004798 <__libc_init_array+0x40>)
 8004770:	4c0a      	ldr	r4, [pc, #40]	; (800479c <__libc_init_array+0x44>)
 8004772:	1b64      	subs	r4, r4, r5
 8004774:	10a4      	asrs	r4, r4, #2
 8004776:	42a6      	cmp	r6, r4
 8004778:	d105      	bne.n	8004786 <__libc_init_array+0x2e>
 800477a:	bd70      	pop	{r4, r5, r6, pc}
 800477c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004780:	4798      	blx	r3
 8004782:	3601      	adds	r6, #1
 8004784:	e7ee      	b.n	8004764 <__libc_init_array+0xc>
 8004786:	f855 3b04 	ldr.w	r3, [r5], #4
 800478a:	4798      	blx	r3
 800478c:	3601      	adds	r6, #1
 800478e:	e7f2      	b.n	8004776 <__libc_init_array+0x1e>
 8004790:	0800565c 	.word	0x0800565c
 8004794:	0800565c 	.word	0x0800565c
 8004798:	0800565c 	.word	0x0800565c
 800479c:	08005660 	.word	0x08005660

080047a0 <__retarget_lock_init_recursive>:
 80047a0:	4770      	bx	lr

080047a2 <__retarget_lock_acquire_recursive>:
 80047a2:	4770      	bx	lr

080047a4 <__retarget_lock_release_recursive>:
 80047a4:	4770      	bx	lr
	...

080047a8 <_free_r>:
 80047a8:	b538      	push	{r3, r4, r5, lr}
 80047aa:	4605      	mov	r5, r0
 80047ac:	2900      	cmp	r1, #0
 80047ae:	d040      	beq.n	8004832 <_free_r+0x8a>
 80047b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047b4:	1f0c      	subs	r4, r1, #4
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	bfb8      	it	lt
 80047ba:	18e4      	addlt	r4, r4, r3
 80047bc:	f7ff fd54 	bl	8004268 <__malloc_lock>
 80047c0:	4a1c      	ldr	r2, [pc, #112]	; (8004834 <_free_r+0x8c>)
 80047c2:	6813      	ldr	r3, [r2, #0]
 80047c4:	b933      	cbnz	r3, 80047d4 <_free_r+0x2c>
 80047c6:	6063      	str	r3, [r4, #4]
 80047c8:	6014      	str	r4, [r2, #0]
 80047ca:	4628      	mov	r0, r5
 80047cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047d0:	f7ff bd50 	b.w	8004274 <__malloc_unlock>
 80047d4:	42a3      	cmp	r3, r4
 80047d6:	d908      	bls.n	80047ea <_free_r+0x42>
 80047d8:	6820      	ldr	r0, [r4, #0]
 80047da:	1821      	adds	r1, r4, r0
 80047dc:	428b      	cmp	r3, r1
 80047de:	bf01      	itttt	eq
 80047e0:	6819      	ldreq	r1, [r3, #0]
 80047e2:	685b      	ldreq	r3, [r3, #4]
 80047e4:	1809      	addeq	r1, r1, r0
 80047e6:	6021      	streq	r1, [r4, #0]
 80047e8:	e7ed      	b.n	80047c6 <_free_r+0x1e>
 80047ea:	461a      	mov	r2, r3
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	b10b      	cbz	r3, 80047f4 <_free_r+0x4c>
 80047f0:	42a3      	cmp	r3, r4
 80047f2:	d9fa      	bls.n	80047ea <_free_r+0x42>
 80047f4:	6811      	ldr	r1, [r2, #0]
 80047f6:	1850      	adds	r0, r2, r1
 80047f8:	42a0      	cmp	r0, r4
 80047fa:	d10b      	bne.n	8004814 <_free_r+0x6c>
 80047fc:	6820      	ldr	r0, [r4, #0]
 80047fe:	4401      	add	r1, r0
 8004800:	1850      	adds	r0, r2, r1
 8004802:	4283      	cmp	r3, r0
 8004804:	6011      	str	r1, [r2, #0]
 8004806:	d1e0      	bne.n	80047ca <_free_r+0x22>
 8004808:	6818      	ldr	r0, [r3, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	4408      	add	r0, r1
 800480e:	6010      	str	r0, [r2, #0]
 8004810:	6053      	str	r3, [r2, #4]
 8004812:	e7da      	b.n	80047ca <_free_r+0x22>
 8004814:	d902      	bls.n	800481c <_free_r+0x74>
 8004816:	230c      	movs	r3, #12
 8004818:	602b      	str	r3, [r5, #0]
 800481a:	e7d6      	b.n	80047ca <_free_r+0x22>
 800481c:	6820      	ldr	r0, [r4, #0]
 800481e:	1821      	adds	r1, r4, r0
 8004820:	428b      	cmp	r3, r1
 8004822:	bf01      	itttt	eq
 8004824:	6819      	ldreq	r1, [r3, #0]
 8004826:	685b      	ldreq	r3, [r3, #4]
 8004828:	1809      	addeq	r1, r1, r0
 800482a:	6021      	streq	r1, [r4, #0]
 800482c:	6063      	str	r3, [r4, #4]
 800482e:	6054      	str	r4, [r2, #4]
 8004830:	e7cb      	b.n	80047ca <_free_r+0x22>
 8004832:	bd38      	pop	{r3, r4, r5, pc}
 8004834:	200001ac 	.word	0x200001ac

08004838 <__sfputc_r>:
 8004838:	6893      	ldr	r3, [r2, #8]
 800483a:	b410      	push	{r4}
 800483c:	3b01      	subs	r3, #1
 800483e:	2b00      	cmp	r3, #0
 8004840:	6093      	str	r3, [r2, #8]
 8004842:	da07      	bge.n	8004854 <__sfputc_r+0x1c>
 8004844:	6994      	ldr	r4, [r2, #24]
 8004846:	42a3      	cmp	r3, r4
 8004848:	db01      	blt.n	800484e <__sfputc_r+0x16>
 800484a:	290a      	cmp	r1, #10
 800484c:	d102      	bne.n	8004854 <__sfputc_r+0x1c>
 800484e:	bc10      	pop	{r4}
 8004850:	f7ff be89 	b.w	8004566 <__swbuf_r>
 8004854:	6813      	ldr	r3, [r2, #0]
 8004856:	1c58      	adds	r0, r3, #1
 8004858:	6010      	str	r0, [r2, #0]
 800485a:	7019      	strb	r1, [r3, #0]
 800485c:	4608      	mov	r0, r1
 800485e:	bc10      	pop	{r4}
 8004860:	4770      	bx	lr

08004862 <__sfputs_r>:
 8004862:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004864:	4606      	mov	r6, r0
 8004866:	460f      	mov	r7, r1
 8004868:	4614      	mov	r4, r2
 800486a:	18d5      	adds	r5, r2, r3
 800486c:	42ac      	cmp	r4, r5
 800486e:	d101      	bne.n	8004874 <__sfputs_r+0x12>
 8004870:	2000      	movs	r0, #0
 8004872:	e007      	b.n	8004884 <__sfputs_r+0x22>
 8004874:	463a      	mov	r2, r7
 8004876:	4630      	mov	r0, r6
 8004878:	f814 1b01 	ldrb.w	r1, [r4], #1
 800487c:	f7ff ffdc 	bl	8004838 <__sfputc_r>
 8004880:	1c43      	adds	r3, r0, #1
 8004882:	d1f3      	bne.n	800486c <__sfputs_r+0xa>
 8004884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004888 <_vfiprintf_r>:
 8004888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800488c:	460d      	mov	r5, r1
 800488e:	4614      	mov	r4, r2
 8004890:	4698      	mov	r8, r3
 8004892:	4606      	mov	r6, r0
 8004894:	b09d      	sub	sp, #116	; 0x74
 8004896:	b118      	cbz	r0, 80048a0 <_vfiprintf_r+0x18>
 8004898:	6a03      	ldr	r3, [r0, #32]
 800489a:	b90b      	cbnz	r3, 80048a0 <_vfiprintf_r+0x18>
 800489c:	f7ff fd7c 	bl	8004398 <__sinit>
 80048a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80048a2:	07d9      	lsls	r1, r3, #31
 80048a4:	d405      	bmi.n	80048b2 <_vfiprintf_r+0x2a>
 80048a6:	89ab      	ldrh	r3, [r5, #12]
 80048a8:	059a      	lsls	r2, r3, #22
 80048aa:	d402      	bmi.n	80048b2 <_vfiprintf_r+0x2a>
 80048ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80048ae:	f7ff ff78 	bl	80047a2 <__retarget_lock_acquire_recursive>
 80048b2:	89ab      	ldrh	r3, [r5, #12]
 80048b4:	071b      	lsls	r3, r3, #28
 80048b6:	d501      	bpl.n	80048bc <_vfiprintf_r+0x34>
 80048b8:	692b      	ldr	r3, [r5, #16]
 80048ba:	b99b      	cbnz	r3, 80048e4 <_vfiprintf_r+0x5c>
 80048bc:	4629      	mov	r1, r5
 80048be:	4630      	mov	r0, r6
 80048c0:	f7ff fe8e 	bl	80045e0 <__swsetup_r>
 80048c4:	b170      	cbz	r0, 80048e4 <_vfiprintf_r+0x5c>
 80048c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80048c8:	07dc      	lsls	r4, r3, #31
 80048ca:	d504      	bpl.n	80048d6 <_vfiprintf_r+0x4e>
 80048cc:	f04f 30ff 	mov.w	r0, #4294967295
 80048d0:	b01d      	add	sp, #116	; 0x74
 80048d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048d6:	89ab      	ldrh	r3, [r5, #12]
 80048d8:	0598      	lsls	r0, r3, #22
 80048da:	d4f7      	bmi.n	80048cc <_vfiprintf_r+0x44>
 80048dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80048de:	f7ff ff61 	bl	80047a4 <__retarget_lock_release_recursive>
 80048e2:	e7f3      	b.n	80048cc <_vfiprintf_r+0x44>
 80048e4:	2300      	movs	r3, #0
 80048e6:	9309      	str	r3, [sp, #36]	; 0x24
 80048e8:	2320      	movs	r3, #32
 80048ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048ee:	2330      	movs	r3, #48	; 0x30
 80048f0:	f04f 0901 	mov.w	r9, #1
 80048f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80048f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8004aa8 <_vfiprintf_r+0x220>
 80048fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004900:	4623      	mov	r3, r4
 8004902:	469a      	mov	sl, r3
 8004904:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004908:	b10a      	cbz	r2, 800490e <_vfiprintf_r+0x86>
 800490a:	2a25      	cmp	r2, #37	; 0x25
 800490c:	d1f9      	bne.n	8004902 <_vfiprintf_r+0x7a>
 800490e:	ebba 0b04 	subs.w	fp, sl, r4
 8004912:	d00b      	beq.n	800492c <_vfiprintf_r+0xa4>
 8004914:	465b      	mov	r3, fp
 8004916:	4622      	mov	r2, r4
 8004918:	4629      	mov	r1, r5
 800491a:	4630      	mov	r0, r6
 800491c:	f7ff ffa1 	bl	8004862 <__sfputs_r>
 8004920:	3001      	adds	r0, #1
 8004922:	f000 80a9 	beq.w	8004a78 <_vfiprintf_r+0x1f0>
 8004926:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004928:	445a      	add	r2, fp
 800492a:	9209      	str	r2, [sp, #36]	; 0x24
 800492c:	f89a 3000 	ldrb.w	r3, [sl]
 8004930:	2b00      	cmp	r3, #0
 8004932:	f000 80a1 	beq.w	8004a78 <_vfiprintf_r+0x1f0>
 8004936:	2300      	movs	r3, #0
 8004938:	f04f 32ff 	mov.w	r2, #4294967295
 800493c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004940:	f10a 0a01 	add.w	sl, sl, #1
 8004944:	9304      	str	r3, [sp, #16]
 8004946:	9307      	str	r3, [sp, #28]
 8004948:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800494c:	931a      	str	r3, [sp, #104]	; 0x68
 800494e:	4654      	mov	r4, sl
 8004950:	2205      	movs	r2, #5
 8004952:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004956:	4854      	ldr	r0, [pc, #336]	; (8004aa8 <_vfiprintf_r+0x220>)
 8004958:	f000 fb72 	bl	8005040 <memchr>
 800495c:	9a04      	ldr	r2, [sp, #16]
 800495e:	b9d8      	cbnz	r0, 8004998 <_vfiprintf_r+0x110>
 8004960:	06d1      	lsls	r1, r2, #27
 8004962:	bf44      	itt	mi
 8004964:	2320      	movmi	r3, #32
 8004966:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800496a:	0713      	lsls	r3, r2, #28
 800496c:	bf44      	itt	mi
 800496e:	232b      	movmi	r3, #43	; 0x2b
 8004970:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004974:	f89a 3000 	ldrb.w	r3, [sl]
 8004978:	2b2a      	cmp	r3, #42	; 0x2a
 800497a:	d015      	beq.n	80049a8 <_vfiprintf_r+0x120>
 800497c:	4654      	mov	r4, sl
 800497e:	2000      	movs	r0, #0
 8004980:	f04f 0c0a 	mov.w	ip, #10
 8004984:	9a07      	ldr	r2, [sp, #28]
 8004986:	4621      	mov	r1, r4
 8004988:	f811 3b01 	ldrb.w	r3, [r1], #1
 800498c:	3b30      	subs	r3, #48	; 0x30
 800498e:	2b09      	cmp	r3, #9
 8004990:	d94d      	bls.n	8004a2e <_vfiprintf_r+0x1a6>
 8004992:	b1b0      	cbz	r0, 80049c2 <_vfiprintf_r+0x13a>
 8004994:	9207      	str	r2, [sp, #28]
 8004996:	e014      	b.n	80049c2 <_vfiprintf_r+0x13a>
 8004998:	eba0 0308 	sub.w	r3, r0, r8
 800499c:	fa09 f303 	lsl.w	r3, r9, r3
 80049a0:	4313      	orrs	r3, r2
 80049a2:	46a2      	mov	sl, r4
 80049a4:	9304      	str	r3, [sp, #16]
 80049a6:	e7d2      	b.n	800494e <_vfiprintf_r+0xc6>
 80049a8:	9b03      	ldr	r3, [sp, #12]
 80049aa:	1d19      	adds	r1, r3, #4
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	9103      	str	r1, [sp, #12]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	bfbb      	ittet	lt
 80049b4:	425b      	neglt	r3, r3
 80049b6:	f042 0202 	orrlt.w	r2, r2, #2
 80049ba:	9307      	strge	r3, [sp, #28]
 80049bc:	9307      	strlt	r3, [sp, #28]
 80049be:	bfb8      	it	lt
 80049c0:	9204      	strlt	r2, [sp, #16]
 80049c2:	7823      	ldrb	r3, [r4, #0]
 80049c4:	2b2e      	cmp	r3, #46	; 0x2e
 80049c6:	d10c      	bne.n	80049e2 <_vfiprintf_r+0x15a>
 80049c8:	7863      	ldrb	r3, [r4, #1]
 80049ca:	2b2a      	cmp	r3, #42	; 0x2a
 80049cc:	d134      	bne.n	8004a38 <_vfiprintf_r+0x1b0>
 80049ce:	9b03      	ldr	r3, [sp, #12]
 80049d0:	3402      	adds	r4, #2
 80049d2:	1d1a      	adds	r2, r3, #4
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	9203      	str	r2, [sp, #12]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	bfb8      	it	lt
 80049dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80049e0:	9305      	str	r3, [sp, #20]
 80049e2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004aac <_vfiprintf_r+0x224>
 80049e6:	2203      	movs	r2, #3
 80049e8:	4650      	mov	r0, sl
 80049ea:	7821      	ldrb	r1, [r4, #0]
 80049ec:	f000 fb28 	bl	8005040 <memchr>
 80049f0:	b138      	cbz	r0, 8004a02 <_vfiprintf_r+0x17a>
 80049f2:	2240      	movs	r2, #64	; 0x40
 80049f4:	9b04      	ldr	r3, [sp, #16]
 80049f6:	eba0 000a 	sub.w	r0, r0, sl
 80049fa:	4082      	lsls	r2, r0
 80049fc:	4313      	orrs	r3, r2
 80049fe:	3401      	adds	r4, #1
 8004a00:	9304      	str	r3, [sp, #16]
 8004a02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a06:	2206      	movs	r2, #6
 8004a08:	4829      	ldr	r0, [pc, #164]	; (8004ab0 <_vfiprintf_r+0x228>)
 8004a0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a0e:	f000 fb17 	bl	8005040 <memchr>
 8004a12:	2800      	cmp	r0, #0
 8004a14:	d03f      	beq.n	8004a96 <_vfiprintf_r+0x20e>
 8004a16:	4b27      	ldr	r3, [pc, #156]	; (8004ab4 <_vfiprintf_r+0x22c>)
 8004a18:	bb1b      	cbnz	r3, 8004a62 <_vfiprintf_r+0x1da>
 8004a1a:	9b03      	ldr	r3, [sp, #12]
 8004a1c:	3307      	adds	r3, #7
 8004a1e:	f023 0307 	bic.w	r3, r3, #7
 8004a22:	3308      	adds	r3, #8
 8004a24:	9303      	str	r3, [sp, #12]
 8004a26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a28:	443b      	add	r3, r7
 8004a2a:	9309      	str	r3, [sp, #36]	; 0x24
 8004a2c:	e768      	b.n	8004900 <_vfiprintf_r+0x78>
 8004a2e:	460c      	mov	r4, r1
 8004a30:	2001      	movs	r0, #1
 8004a32:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a36:	e7a6      	b.n	8004986 <_vfiprintf_r+0xfe>
 8004a38:	2300      	movs	r3, #0
 8004a3a:	f04f 0c0a 	mov.w	ip, #10
 8004a3e:	4619      	mov	r1, r3
 8004a40:	3401      	adds	r4, #1
 8004a42:	9305      	str	r3, [sp, #20]
 8004a44:	4620      	mov	r0, r4
 8004a46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a4a:	3a30      	subs	r2, #48	; 0x30
 8004a4c:	2a09      	cmp	r2, #9
 8004a4e:	d903      	bls.n	8004a58 <_vfiprintf_r+0x1d0>
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d0c6      	beq.n	80049e2 <_vfiprintf_r+0x15a>
 8004a54:	9105      	str	r1, [sp, #20]
 8004a56:	e7c4      	b.n	80049e2 <_vfiprintf_r+0x15a>
 8004a58:	4604      	mov	r4, r0
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a60:	e7f0      	b.n	8004a44 <_vfiprintf_r+0x1bc>
 8004a62:	ab03      	add	r3, sp, #12
 8004a64:	9300      	str	r3, [sp, #0]
 8004a66:	462a      	mov	r2, r5
 8004a68:	4630      	mov	r0, r6
 8004a6a:	4b13      	ldr	r3, [pc, #76]	; (8004ab8 <_vfiprintf_r+0x230>)
 8004a6c:	a904      	add	r1, sp, #16
 8004a6e:	f3af 8000 	nop.w
 8004a72:	4607      	mov	r7, r0
 8004a74:	1c78      	adds	r0, r7, #1
 8004a76:	d1d6      	bne.n	8004a26 <_vfiprintf_r+0x19e>
 8004a78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a7a:	07d9      	lsls	r1, r3, #31
 8004a7c:	d405      	bmi.n	8004a8a <_vfiprintf_r+0x202>
 8004a7e:	89ab      	ldrh	r3, [r5, #12]
 8004a80:	059a      	lsls	r2, r3, #22
 8004a82:	d402      	bmi.n	8004a8a <_vfiprintf_r+0x202>
 8004a84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a86:	f7ff fe8d 	bl	80047a4 <__retarget_lock_release_recursive>
 8004a8a:	89ab      	ldrh	r3, [r5, #12]
 8004a8c:	065b      	lsls	r3, r3, #25
 8004a8e:	f53f af1d 	bmi.w	80048cc <_vfiprintf_r+0x44>
 8004a92:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a94:	e71c      	b.n	80048d0 <_vfiprintf_r+0x48>
 8004a96:	ab03      	add	r3, sp, #12
 8004a98:	9300      	str	r3, [sp, #0]
 8004a9a:	462a      	mov	r2, r5
 8004a9c:	4630      	mov	r0, r6
 8004a9e:	4b06      	ldr	r3, [pc, #24]	; (8004ab8 <_vfiprintf_r+0x230>)
 8004aa0:	a904      	add	r1, sp, #16
 8004aa2:	f000 f87d 	bl	8004ba0 <_printf_i>
 8004aa6:	e7e4      	b.n	8004a72 <_vfiprintf_r+0x1ea>
 8004aa8:	08005626 	.word	0x08005626
 8004aac:	0800562c 	.word	0x0800562c
 8004ab0:	08005630 	.word	0x08005630
 8004ab4:	00000000 	.word	0x00000000
 8004ab8:	08004863 	.word	0x08004863

08004abc <_printf_common>:
 8004abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ac0:	4616      	mov	r6, r2
 8004ac2:	4699      	mov	r9, r3
 8004ac4:	688a      	ldr	r2, [r1, #8]
 8004ac6:	690b      	ldr	r3, [r1, #16]
 8004ac8:	4607      	mov	r7, r0
 8004aca:	4293      	cmp	r3, r2
 8004acc:	bfb8      	it	lt
 8004ace:	4613      	movlt	r3, r2
 8004ad0:	6033      	str	r3, [r6, #0]
 8004ad2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ad6:	460c      	mov	r4, r1
 8004ad8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004adc:	b10a      	cbz	r2, 8004ae2 <_printf_common+0x26>
 8004ade:	3301      	adds	r3, #1
 8004ae0:	6033      	str	r3, [r6, #0]
 8004ae2:	6823      	ldr	r3, [r4, #0]
 8004ae4:	0699      	lsls	r1, r3, #26
 8004ae6:	bf42      	ittt	mi
 8004ae8:	6833      	ldrmi	r3, [r6, #0]
 8004aea:	3302      	addmi	r3, #2
 8004aec:	6033      	strmi	r3, [r6, #0]
 8004aee:	6825      	ldr	r5, [r4, #0]
 8004af0:	f015 0506 	ands.w	r5, r5, #6
 8004af4:	d106      	bne.n	8004b04 <_printf_common+0x48>
 8004af6:	f104 0a19 	add.w	sl, r4, #25
 8004afa:	68e3      	ldr	r3, [r4, #12]
 8004afc:	6832      	ldr	r2, [r6, #0]
 8004afe:	1a9b      	subs	r3, r3, r2
 8004b00:	42ab      	cmp	r3, r5
 8004b02:	dc2b      	bgt.n	8004b5c <_printf_common+0xa0>
 8004b04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b08:	1e13      	subs	r3, r2, #0
 8004b0a:	6822      	ldr	r2, [r4, #0]
 8004b0c:	bf18      	it	ne
 8004b0e:	2301      	movne	r3, #1
 8004b10:	0692      	lsls	r2, r2, #26
 8004b12:	d430      	bmi.n	8004b76 <_printf_common+0xba>
 8004b14:	4649      	mov	r1, r9
 8004b16:	4638      	mov	r0, r7
 8004b18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b1c:	47c0      	blx	r8
 8004b1e:	3001      	adds	r0, #1
 8004b20:	d023      	beq.n	8004b6a <_printf_common+0xae>
 8004b22:	6823      	ldr	r3, [r4, #0]
 8004b24:	6922      	ldr	r2, [r4, #16]
 8004b26:	f003 0306 	and.w	r3, r3, #6
 8004b2a:	2b04      	cmp	r3, #4
 8004b2c:	bf14      	ite	ne
 8004b2e:	2500      	movne	r5, #0
 8004b30:	6833      	ldreq	r3, [r6, #0]
 8004b32:	f04f 0600 	mov.w	r6, #0
 8004b36:	bf08      	it	eq
 8004b38:	68e5      	ldreq	r5, [r4, #12]
 8004b3a:	f104 041a 	add.w	r4, r4, #26
 8004b3e:	bf08      	it	eq
 8004b40:	1aed      	subeq	r5, r5, r3
 8004b42:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004b46:	bf08      	it	eq
 8004b48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	bfc4      	itt	gt
 8004b50:	1a9b      	subgt	r3, r3, r2
 8004b52:	18ed      	addgt	r5, r5, r3
 8004b54:	42b5      	cmp	r5, r6
 8004b56:	d11a      	bne.n	8004b8e <_printf_common+0xd2>
 8004b58:	2000      	movs	r0, #0
 8004b5a:	e008      	b.n	8004b6e <_printf_common+0xb2>
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	4652      	mov	r2, sl
 8004b60:	4649      	mov	r1, r9
 8004b62:	4638      	mov	r0, r7
 8004b64:	47c0      	blx	r8
 8004b66:	3001      	adds	r0, #1
 8004b68:	d103      	bne.n	8004b72 <_printf_common+0xb6>
 8004b6a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b72:	3501      	adds	r5, #1
 8004b74:	e7c1      	b.n	8004afa <_printf_common+0x3e>
 8004b76:	2030      	movs	r0, #48	; 0x30
 8004b78:	18e1      	adds	r1, r4, r3
 8004b7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b7e:	1c5a      	adds	r2, r3, #1
 8004b80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b84:	4422      	add	r2, r4
 8004b86:	3302      	adds	r3, #2
 8004b88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b8c:	e7c2      	b.n	8004b14 <_printf_common+0x58>
 8004b8e:	2301      	movs	r3, #1
 8004b90:	4622      	mov	r2, r4
 8004b92:	4649      	mov	r1, r9
 8004b94:	4638      	mov	r0, r7
 8004b96:	47c0      	blx	r8
 8004b98:	3001      	adds	r0, #1
 8004b9a:	d0e6      	beq.n	8004b6a <_printf_common+0xae>
 8004b9c:	3601      	adds	r6, #1
 8004b9e:	e7d9      	b.n	8004b54 <_printf_common+0x98>

08004ba0 <_printf_i>:
 8004ba0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ba4:	7e0f      	ldrb	r7, [r1, #24]
 8004ba6:	4691      	mov	r9, r2
 8004ba8:	2f78      	cmp	r7, #120	; 0x78
 8004baa:	4680      	mov	r8, r0
 8004bac:	460c      	mov	r4, r1
 8004bae:	469a      	mov	sl, r3
 8004bb0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004bb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004bb6:	d807      	bhi.n	8004bc8 <_printf_i+0x28>
 8004bb8:	2f62      	cmp	r7, #98	; 0x62
 8004bba:	d80a      	bhi.n	8004bd2 <_printf_i+0x32>
 8004bbc:	2f00      	cmp	r7, #0
 8004bbe:	f000 80d5 	beq.w	8004d6c <_printf_i+0x1cc>
 8004bc2:	2f58      	cmp	r7, #88	; 0x58
 8004bc4:	f000 80c1 	beq.w	8004d4a <_printf_i+0x1aa>
 8004bc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004bd0:	e03a      	b.n	8004c48 <_printf_i+0xa8>
 8004bd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004bd6:	2b15      	cmp	r3, #21
 8004bd8:	d8f6      	bhi.n	8004bc8 <_printf_i+0x28>
 8004bda:	a101      	add	r1, pc, #4	; (adr r1, 8004be0 <_printf_i+0x40>)
 8004bdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004be0:	08004c39 	.word	0x08004c39
 8004be4:	08004c4d 	.word	0x08004c4d
 8004be8:	08004bc9 	.word	0x08004bc9
 8004bec:	08004bc9 	.word	0x08004bc9
 8004bf0:	08004bc9 	.word	0x08004bc9
 8004bf4:	08004bc9 	.word	0x08004bc9
 8004bf8:	08004c4d 	.word	0x08004c4d
 8004bfc:	08004bc9 	.word	0x08004bc9
 8004c00:	08004bc9 	.word	0x08004bc9
 8004c04:	08004bc9 	.word	0x08004bc9
 8004c08:	08004bc9 	.word	0x08004bc9
 8004c0c:	08004d53 	.word	0x08004d53
 8004c10:	08004c79 	.word	0x08004c79
 8004c14:	08004d0d 	.word	0x08004d0d
 8004c18:	08004bc9 	.word	0x08004bc9
 8004c1c:	08004bc9 	.word	0x08004bc9
 8004c20:	08004d75 	.word	0x08004d75
 8004c24:	08004bc9 	.word	0x08004bc9
 8004c28:	08004c79 	.word	0x08004c79
 8004c2c:	08004bc9 	.word	0x08004bc9
 8004c30:	08004bc9 	.word	0x08004bc9
 8004c34:	08004d15 	.word	0x08004d15
 8004c38:	682b      	ldr	r3, [r5, #0]
 8004c3a:	1d1a      	adds	r2, r3, #4
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	602a      	str	r2, [r5, #0]
 8004c40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e0a0      	b.n	8004d8e <_printf_i+0x1ee>
 8004c4c:	6820      	ldr	r0, [r4, #0]
 8004c4e:	682b      	ldr	r3, [r5, #0]
 8004c50:	0607      	lsls	r7, r0, #24
 8004c52:	f103 0104 	add.w	r1, r3, #4
 8004c56:	6029      	str	r1, [r5, #0]
 8004c58:	d501      	bpl.n	8004c5e <_printf_i+0xbe>
 8004c5a:	681e      	ldr	r6, [r3, #0]
 8004c5c:	e003      	b.n	8004c66 <_printf_i+0xc6>
 8004c5e:	0646      	lsls	r6, r0, #25
 8004c60:	d5fb      	bpl.n	8004c5a <_printf_i+0xba>
 8004c62:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004c66:	2e00      	cmp	r6, #0
 8004c68:	da03      	bge.n	8004c72 <_printf_i+0xd2>
 8004c6a:	232d      	movs	r3, #45	; 0x2d
 8004c6c:	4276      	negs	r6, r6
 8004c6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c72:	230a      	movs	r3, #10
 8004c74:	4859      	ldr	r0, [pc, #356]	; (8004ddc <_printf_i+0x23c>)
 8004c76:	e012      	b.n	8004c9e <_printf_i+0xfe>
 8004c78:	682b      	ldr	r3, [r5, #0]
 8004c7a:	6820      	ldr	r0, [r4, #0]
 8004c7c:	1d19      	adds	r1, r3, #4
 8004c7e:	6029      	str	r1, [r5, #0]
 8004c80:	0605      	lsls	r5, r0, #24
 8004c82:	d501      	bpl.n	8004c88 <_printf_i+0xe8>
 8004c84:	681e      	ldr	r6, [r3, #0]
 8004c86:	e002      	b.n	8004c8e <_printf_i+0xee>
 8004c88:	0641      	lsls	r1, r0, #25
 8004c8a:	d5fb      	bpl.n	8004c84 <_printf_i+0xe4>
 8004c8c:	881e      	ldrh	r6, [r3, #0]
 8004c8e:	2f6f      	cmp	r7, #111	; 0x6f
 8004c90:	bf0c      	ite	eq
 8004c92:	2308      	moveq	r3, #8
 8004c94:	230a      	movne	r3, #10
 8004c96:	4851      	ldr	r0, [pc, #324]	; (8004ddc <_printf_i+0x23c>)
 8004c98:	2100      	movs	r1, #0
 8004c9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c9e:	6865      	ldr	r5, [r4, #4]
 8004ca0:	2d00      	cmp	r5, #0
 8004ca2:	bfa8      	it	ge
 8004ca4:	6821      	ldrge	r1, [r4, #0]
 8004ca6:	60a5      	str	r5, [r4, #8]
 8004ca8:	bfa4      	itt	ge
 8004caa:	f021 0104 	bicge.w	r1, r1, #4
 8004cae:	6021      	strge	r1, [r4, #0]
 8004cb0:	b90e      	cbnz	r6, 8004cb6 <_printf_i+0x116>
 8004cb2:	2d00      	cmp	r5, #0
 8004cb4:	d04b      	beq.n	8004d4e <_printf_i+0x1ae>
 8004cb6:	4615      	mov	r5, r2
 8004cb8:	fbb6 f1f3 	udiv	r1, r6, r3
 8004cbc:	fb03 6711 	mls	r7, r3, r1, r6
 8004cc0:	5dc7      	ldrb	r7, [r0, r7]
 8004cc2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004cc6:	4637      	mov	r7, r6
 8004cc8:	42bb      	cmp	r3, r7
 8004cca:	460e      	mov	r6, r1
 8004ccc:	d9f4      	bls.n	8004cb8 <_printf_i+0x118>
 8004cce:	2b08      	cmp	r3, #8
 8004cd0:	d10b      	bne.n	8004cea <_printf_i+0x14a>
 8004cd2:	6823      	ldr	r3, [r4, #0]
 8004cd4:	07de      	lsls	r6, r3, #31
 8004cd6:	d508      	bpl.n	8004cea <_printf_i+0x14a>
 8004cd8:	6923      	ldr	r3, [r4, #16]
 8004cda:	6861      	ldr	r1, [r4, #4]
 8004cdc:	4299      	cmp	r1, r3
 8004cde:	bfde      	ittt	le
 8004ce0:	2330      	movle	r3, #48	; 0x30
 8004ce2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ce6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004cea:	1b52      	subs	r2, r2, r5
 8004cec:	6122      	str	r2, [r4, #16]
 8004cee:	464b      	mov	r3, r9
 8004cf0:	4621      	mov	r1, r4
 8004cf2:	4640      	mov	r0, r8
 8004cf4:	f8cd a000 	str.w	sl, [sp]
 8004cf8:	aa03      	add	r2, sp, #12
 8004cfa:	f7ff fedf 	bl	8004abc <_printf_common>
 8004cfe:	3001      	adds	r0, #1
 8004d00:	d14a      	bne.n	8004d98 <_printf_i+0x1f8>
 8004d02:	f04f 30ff 	mov.w	r0, #4294967295
 8004d06:	b004      	add	sp, #16
 8004d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d0c:	6823      	ldr	r3, [r4, #0]
 8004d0e:	f043 0320 	orr.w	r3, r3, #32
 8004d12:	6023      	str	r3, [r4, #0]
 8004d14:	2778      	movs	r7, #120	; 0x78
 8004d16:	4832      	ldr	r0, [pc, #200]	; (8004de0 <_printf_i+0x240>)
 8004d18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004d1c:	6823      	ldr	r3, [r4, #0]
 8004d1e:	6829      	ldr	r1, [r5, #0]
 8004d20:	061f      	lsls	r7, r3, #24
 8004d22:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d26:	d402      	bmi.n	8004d2e <_printf_i+0x18e>
 8004d28:	065f      	lsls	r7, r3, #25
 8004d2a:	bf48      	it	mi
 8004d2c:	b2b6      	uxthmi	r6, r6
 8004d2e:	07df      	lsls	r7, r3, #31
 8004d30:	bf48      	it	mi
 8004d32:	f043 0320 	orrmi.w	r3, r3, #32
 8004d36:	6029      	str	r1, [r5, #0]
 8004d38:	bf48      	it	mi
 8004d3a:	6023      	strmi	r3, [r4, #0]
 8004d3c:	b91e      	cbnz	r6, 8004d46 <_printf_i+0x1a6>
 8004d3e:	6823      	ldr	r3, [r4, #0]
 8004d40:	f023 0320 	bic.w	r3, r3, #32
 8004d44:	6023      	str	r3, [r4, #0]
 8004d46:	2310      	movs	r3, #16
 8004d48:	e7a6      	b.n	8004c98 <_printf_i+0xf8>
 8004d4a:	4824      	ldr	r0, [pc, #144]	; (8004ddc <_printf_i+0x23c>)
 8004d4c:	e7e4      	b.n	8004d18 <_printf_i+0x178>
 8004d4e:	4615      	mov	r5, r2
 8004d50:	e7bd      	b.n	8004cce <_printf_i+0x12e>
 8004d52:	682b      	ldr	r3, [r5, #0]
 8004d54:	6826      	ldr	r6, [r4, #0]
 8004d56:	1d18      	adds	r0, r3, #4
 8004d58:	6961      	ldr	r1, [r4, #20]
 8004d5a:	6028      	str	r0, [r5, #0]
 8004d5c:	0635      	lsls	r5, r6, #24
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	d501      	bpl.n	8004d66 <_printf_i+0x1c6>
 8004d62:	6019      	str	r1, [r3, #0]
 8004d64:	e002      	b.n	8004d6c <_printf_i+0x1cc>
 8004d66:	0670      	lsls	r0, r6, #25
 8004d68:	d5fb      	bpl.n	8004d62 <_printf_i+0x1c2>
 8004d6a:	8019      	strh	r1, [r3, #0]
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	4615      	mov	r5, r2
 8004d70:	6123      	str	r3, [r4, #16]
 8004d72:	e7bc      	b.n	8004cee <_printf_i+0x14e>
 8004d74:	682b      	ldr	r3, [r5, #0]
 8004d76:	2100      	movs	r1, #0
 8004d78:	1d1a      	adds	r2, r3, #4
 8004d7a:	602a      	str	r2, [r5, #0]
 8004d7c:	681d      	ldr	r5, [r3, #0]
 8004d7e:	6862      	ldr	r2, [r4, #4]
 8004d80:	4628      	mov	r0, r5
 8004d82:	f000 f95d 	bl	8005040 <memchr>
 8004d86:	b108      	cbz	r0, 8004d8c <_printf_i+0x1ec>
 8004d88:	1b40      	subs	r0, r0, r5
 8004d8a:	6060      	str	r0, [r4, #4]
 8004d8c:	6863      	ldr	r3, [r4, #4]
 8004d8e:	6123      	str	r3, [r4, #16]
 8004d90:	2300      	movs	r3, #0
 8004d92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d96:	e7aa      	b.n	8004cee <_printf_i+0x14e>
 8004d98:	462a      	mov	r2, r5
 8004d9a:	4649      	mov	r1, r9
 8004d9c:	4640      	mov	r0, r8
 8004d9e:	6923      	ldr	r3, [r4, #16]
 8004da0:	47d0      	blx	sl
 8004da2:	3001      	adds	r0, #1
 8004da4:	d0ad      	beq.n	8004d02 <_printf_i+0x162>
 8004da6:	6823      	ldr	r3, [r4, #0]
 8004da8:	079b      	lsls	r3, r3, #30
 8004daa:	d413      	bmi.n	8004dd4 <_printf_i+0x234>
 8004dac:	68e0      	ldr	r0, [r4, #12]
 8004dae:	9b03      	ldr	r3, [sp, #12]
 8004db0:	4298      	cmp	r0, r3
 8004db2:	bfb8      	it	lt
 8004db4:	4618      	movlt	r0, r3
 8004db6:	e7a6      	b.n	8004d06 <_printf_i+0x166>
 8004db8:	2301      	movs	r3, #1
 8004dba:	4632      	mov	r2, r6
 8004dbc:	4649      	mov	r1, r9
 8004dbe:	4640      	mov	r0, r8
 8004dc0:	47d0      	blx	sl
 8004dc2:	3001      	adds	r0, #1
 8004dc4:	d09d      	beq.n	8004d02 <_printf_i+0x162>
 8004dc6:	3501      	adds	r5, #1
 8004dc8:	68e3      	ldr	r3, [r4, #12]
 8004dca:	9903      	ldr	r1, [sp, #12]
 8004dcc:	1a5b      	subs	r3, r3, r1
 8004dce:	42ab      	cmp	r3, r5
 8004dd0:	dcf2      	bgt.n	8004db8 <_printf_i+0x218>
 8004dd2:	e7eb      	b.n	8004dac <_printf_i+0x20c>
 8004dd4:	2500      	movs	r5, #0
 8004dd6:	f104 0619 	add.w	r6, r4, #25
 8004dda:	e7f5      	b.n	8004dc8 <_printf_i+0x228>
 8004ddc:	08005637 	.word	0x08005637
 8004de0:	08005648 	.word	0x08005648

08004de4 <__sflush_r>:
 8004de4:	898a      	ldrh	r2, [r1, #12]
 8004de6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004de8:	4605      	mov	r5, r0
 8004dea:	0710      	lsls	r0, r2, #28
 8004dec:	460c      	mov	r4, r1
 8004dee:	d457      	bmi.n	8004ea0 <__sflush_r+0xbc>
 8004df0:	684b      	ldr	r3, [r1, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	dc04      	bgt.n	8004e00 <__sflush_r+0x1c>
 8004df6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	dc01      	bgt.n	8004e00 <__sflush_r+0x1c>
 8004dfc:	2000      	movs	r0, #0
 8004dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e02:	2e00      	cmp	r6, #0
 8004e04:	d0fa      	beq.n	8004dfc <__sflush_r+0x18>
 8004e06:	2300      	movs	r3, #0
 8004e08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004e0c:	682f      	ldr	r7, [r5, #0]
 8004e0e:	6a21      	ldr	r1, [r4, #32]
 8004e10:	602b      	str	r3, [r5, #0]
 8004e12:	d032      	beq.n	8004e7a <__sflush_r+0x96>
 8004e14:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e16:	89a3      	ldrh	r3, [r4, #12]
 8004e18:	075a      	lsls	r2, r3, #29
 8004e1a:	d505      	bpl.n	8004e28 <__sflush_r+0x44>
 8004e1c:	6863      	ldr	r3, [r4, #4]
 8004e1e:	1ac0      	subs	r0, r0, r3
 8004e20:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e22:	b10b      	cbz	r3, 8004e28 <__sflush_r+0x44>
 8004e24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e26:	1ac0      	subs	r0, r0, r3
 8004e28:	2300      	movs	r3, #0
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e2e:	4628      	mov	r0, r5
 8004e30:	6a21      	ldr	r1, [r4, #32]
 8004e32:	47b0      	blx	r6
 8004e34:	1c43      	adds	r3, r0, #1
 8004e36:	89a3      	ldrh	r3, [r4, #12]
 8004e38:	d106      	bne.n	8004e48 <__sflush_r+0x64>
 8004e3a:	6829      	ldr	r1, [r5, #0]
 8004e3c:	291d      	cmp	r1, #29
 8004e3e:	d82b      	bhi.n	8004e98 <__sflush_r+0xb4>
 8004e40:	4a28      	ldr	r2, [pc, #160]	; (8004ee4 <__sflush_r+0x100>)
 8004e42:	410a      	asrs	r2, r1
 8004e44:	07d6      	lsls	r6, r2, #31
 8004e46:	d427      	bmi.n	8004e98 <__sflush_r+0xb4>
 8004e48:	2200      	movs	r2, #0
 8004e4a:	6062      	str	r2, [r4, #4]
 8004e4c:	6922      	ldr	r2, [r4, #16]
 8004e4e:	04d9      	lsls	r1, r3, #19
 8004e50:	6022      	str	r2, [r4, #0]
 8004e52:	d504      	bpl.n	8004e5e <__sflush_r+0x7a>
 8004e54:	1c42      	adds	r2, r0, #1
 8004e56:	d101      	bne.n	8004e5c <__sflush_r+0x78>
 8004e58:	682b      	ldr	r3, [r5, #0]
 8004e5a:	b903      	cbnz	r3, 8004e5e <__sflush_r+0x7a>
 8004e5c:	6560      	str	r0, [r4, #84]	; 0x54
 8004e5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e60:	602f      	str	r7, [r5, #0]
 8004e62:	2900      	cmp	r1, #0
 8004e64:	d0ca      	beq.n	8004dfc <__sflush_r+0x18>
 8004e66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e6a:	4299      	cmp	r1, r3
 8004e6c:	d002      	beq.n	8004e74 <__sflush_r+0x90>
 8004e6e:	4628      	mov	r0, r5
 8004e70:	f7ff fc9a 	bl	80047a8 <_free_r>
 8004e74:	2000      	movs	r0, #0
 8004e76:	6360      	str	r0, [r4, #52]	; 0x34
 8004e78:	e7c1      	b.n	8004dfe <__sflush_r+0x1a>
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	4628      	mov	r0, r5
 8004e7e:	47b0      	blx	r6
 8004e80:	1c41      	adds	r1, r0, #1
 8004e82:	d1c8      	bne.n	8004e16 <__sflush_r+0x32>
 8004e84:	682b      	ldr	r3, [r5, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d0c5      	beq.n	8004e16 <__sflush_r+0x32>
 8004e8a:	2b1d      	cmp	r3, #29
 8004e8c:	d001      	beq.n	8004e92 <__sflush_r+0xae>
 8004e8e:	2b16      	cmp	r3, #22
 8004e90:	d101      	bne.n	8004e96 <__sflush_r+0xb2>
 8004e92:	602f      	str	r7, [r5, #0]
 8004e94:	e7b2      	b.n	8004dfc <__sflush_r+0x18>
 8004e96:	89a3      	ldrh	r3, [r4, #12]
 8004e98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e9c:	81a3      	strh	r3, [r4, #12]
 8004e9e:	e7ae      	b.n	8004dfe <__sflush_r+0x1a>
 8004ea0:	690f      	ldr	r7, [r1, #16]
 8004ea2:	2f00      	cmp	r7, #0
 8004ea4:	d0aa      	beq.n	8004dfc <__sflush_r+0x18>
 8004ea6:	0793      	lsls	r3, r2, #30
 8004ea8:	bf18      	it	ne
 8004eaa:	2300      	movne	r3, #0
 8004eac:	680e      	ldr	r6, [r1, #0]
 8004eae:	bf08      	it	eq
 8004eb0:	694b      	ldreq	r3, [r1, #20]
 8004eb2:	1bf6      	subs	r6, r6, r7
 8004eb4:	600f      	str	r7, [r1, #0]
 8004eb6:	608b      	str	r3, [r1, #8]
 8004eb8:	2e00      	cmp	r6, #0
 8004eba:	dd9f      	ble.n	8004dfc <__sflush_r+0x18>
 8004ebc:	4633      	mov	r3, r6
 8004ebe:	463a      	mov	r2, r7
 8004ec0:	4628      	mov	r0, r5
 8004ec2:	6a21      	ldr	r1, [r4, #32]
 8004ec4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004ec8:	47e0      	blx	ip
 8004eca:	2800      	cmp	r0, #0
 8004ecc:	dc06      	bgt.n	8004edc <__sflush_r+0xf8>
 8004ece:	89a3      	ldrh	r3, [r4, #12]
 8004ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ed4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ed8:	81a3      	strh	r3, [r4, #12]
 8004eda:	e790      	b.n	8004dfe <__sflush_r+0x1a>
 8004edc:	4407      	add	r7, r0
 8004ede:	1a36      	subs	r6, r6, r0
 8004ee0:	e7ea      	b.n	8004eb8 <__sflush_r+0xd4>
 8004ee2:	bf00      	nop
 8004ee4:	dfbffffe 	.word	0xdfbffffe

08004ee8 <_fflush_r>:
 8004ee8:	b538      	push	{r3, r4, r5, lr}
 8004eea:	690b      	ldr	r3, [r1, #16]
 8004eec:	4605      	mov	r5, r0
 8004eee:	460c      	mov	r4, r1
 8004ef0:	b913      	cbnz	r3, 8004ef8 <_fflush_r+0x10>
 8004ef2:	2500      	movs	r5, #0
 8004ef4:	4628      	mov	r0, r5
 8004ef6:	bd38      	pop	{r3, r4, r5, pc}
 8004ef8:	b118      	cbz	r0, 8004f02 <_fflush_r+0x1a>
 8004efa:	6a03      	ldr	r3, [r0, #32]
 8004efc:	b90b      	cbnz	r3, 8004f02 <_fflush_r+0x1a>
 8004efe:	f7ff fa4b 	bl	8004398 <__sinit>
 8004f02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d0f3      	beq.n	8004ef2 <_fflush_r+0xa>
 8004f0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004f0c:	07d0      	lsls	r0, r2, #31
 8004f0e:	d404      	bmi.n	8004f1a <_fflush_r+0x32>
 8004f10:	0599      	lsls	r1, r3, #22
 8004f12:	d402      	bmi.n	8004f1a <_fflush_r+0x32>
 8004f14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f16:	f7ff fc44 	bl	80047a2 <__retarget_lock_acquire_recursive>
 8004f1a:	4628      	mov	r0, r5
 8004f1c:	4621      	mov	r1, r4
 8004f1e:	f7ff ff61 	bl	8004de4 <__sflush_r>
 8004f22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f24:	4605      	mov	r5, r0
 8004f26:	07da      	lsls	r2, r3, #31
 8004f28:	d4e4      	bmi.n	8004ef4 <_fflush_r+0xc>
 8004f2a:	89a3      	ldrh	r3, [r4, #12]
 8004f2c:	059b      	lsls	r3, r3, #22
 8004f2e:	d4e1      	bmi.n	8004ef4 <_fflush_r+0xc>
 8004f30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f32:	f7ff fc37 	bl	80047a4 <__retarget_lock_release_recursive>
 8004f36:	e7dd      	b.n	8004ef4 <_fflush_r+0xc>

08004f38 <__swhatbuf_r>:
 8004f38:	b570      	push	{r4, r5, r6, lr}
 8004f3a:	460c      	mov	r4, r1
 8004f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f40:	4615      	mov	r5, r2
 8004f42:	2900      	cmp	r1, #0
 8004f44:	461e      	mov	r6, r3
 8004f46:	b096      	sub	sp, #88	; 0x58
 8004f48:	da0c      	bge.n	8004f64 <__swhatbuf_r+0x2c>
 8004f4a:	89a3      	ldrh	r3, [r4, #12]
 8004f4c:	2100      	movs	r1, #0
 8004f4e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004f52:	bf0c      	ite	eq
 8004f54:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004f58:	2340      	movne	r3, #64	; 0x40
 8004f5a:	2000      	movs	r0, #0
 8004f5c:	6031      	str	r1, [r6, #0]
 8004f5e:	602b      	str	r3, [r5, #0]
 8004f60:	b016      	add	sp, #88	; 0x58
 8004f62:	bd70      	pop	{r4, r5, r6, pc}
 8004f64:	466a      	mov	r2, sp
 8004f66:	f000 f849 	bl	8004ffc <_fstat_r>
 8004f6a:	2800      	cmp	r0, #0
 8004f6c:	dbed      	blt.n	8004f4a <__swhatbuf_r+0x12>
 8004f6e:	9901      	ldr	r1, [sp, #4]
 8004f70:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004f74:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004f78:	4259      	negs	r1, r3
 8004f7a:	4159      	adcs	r1, r3
 8004f7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f80:	e7eb      	b.n	8004f5a <__swhatbuf_r+0x22>

08004f82 <__smakebuf_r>:
 8004f82:	898b      	ldrh	r3, [r1, #12]
 8004f84:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004f86:	079d      	lsls	r5, r3, #30
 8004f88:	4606      	mov	r6, r0
 8004f8a:	460c      	mov	r4, r1
 8004f8c:	d507      	bpl.n	8004f9e <__smakebuf_r+0x1c>
 8004f8e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004f92:	6023      	str	r3, [r4, #0]
 8004f94:	6123      	str	r3, [r4, #16]
 8004f96:	2301      	movs	r3, #1
 8004f98:	6163      	str	r3, [r4, #20]
 8004f9a:	b002      	add	sp, #8
 8004f9c:	bd70      	pop	{r4, r5, r6, pc}
 8004f9e:	466a      	mov	r2, sp
 8004fa0:	ab01      	add	r3, sp, #4
 8004fa2:	f7ff ffc9 	bl	8004f38 <__swhatbuf_r>
 8004fa6:	9900      	ldr	r1, [sp, #0]
 8004fa8:	4605      	mov	r5, r0
 8004faa:	4630      	mov	r0, r6
 8004fac:	f7ff f8dc 	bl	8004168 <_malloc_r>
 8004fb0:	b948      	cbnz	r0, 8004fc6 <__smakebuf_r+0x44>
 8004fb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fb6:	059a      	lsls	r2, r3, #22
 8004fb8:	d4ef      	bmi.n	8004f9a <__smakebuf_r+0x18>
 8004fba:	f023 0303 	bic.w	r3, r3, #3
 8004fbe:	f043 0302 	orr.w	r3, r3, #2
 8004fc2:	81a3      	strh	r3, [r4, #12]
 8004fc4:	e7e3      	b.n	8004f8e <__smakebuf_r+0xc>
 8004fc6:	89a3      	ldrh	r3, [r4, #12]
 8004fc8:	6020      	str	r0, [r4, #0]
 8004fca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fce:	81a3      	strh	r3, [r4, #12]
 8004fd0:	9b00      	ldr	r3, [sp, #0]
 8004fd2:	6120      	str	r0, [r4, #16]
 8004fd4:	6163      	str	r3, [r4, #20]
 8004fd6:	9b01      	ldr	r3, [sp, #4]
 8004fd8:	b15b      	cbz	r3, 8004ff2 <__smakebuf_r+0x70>
 8004fda:	4630      	mov	r0, r6
 8004fdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fe0:	f000 f81e 	bl	8005020 <_isatty_r>
 8004fe4:	b128      	cbz	r0, 8004ff2 <__smakebuf_r+0x70>
 8004fe6:	89a3      	ldrh	r3, [r4, #12]
 8004fe8:	f023 0303 	bic.w	r3, r3, #3
 8004fec:	f043 0301 	orr.w	r3, r3, #1
 8004ff0:	81a3      	strh	r3, [r4, #12]
 8004ff2:	89a3      	ldrh	r3, [r4, #12]
 8004ff4:	431d      	orrs	r5, r3
 8004ff6:	81a5      	strh	r5, [r4, #12]
 8004ff8:	e7cf      	b.n	8004f9a <__smakebuf_r+0x18>
	...

08004ffc <_fstat_r>:
 8004ffc:	b538      	push	{r3, r4, r5, lr}
 8004ffe:	2300      	movs	r3, #0
 8005000:	4d06      	ldr	r5, [pc, #24]	; (800501c <_fstat_r+0x20>)
 8005002:	4604      	mov	r4, r0
 8005004:	4608      	mov	r0, r1
 8005006:	4611      	mov	r1, r2
 8005008:	602b      	str	r3, [r5, #0]
 800500a:	f7fc ff8e 	bl	8001f2a <_fstat>
 800500e:	1c43      	adds	r3, r0, #1
 8005010:	d102      	bne.n	8005018 <_fstat_r+0x1c>
 8005012:	682b      	ldr	r3, [r5, #0]
 8005014:	b103      	cbz	r3, 8005018 <_fstat_r+0x1c>
 8005016:	6023      	str	r3, [r4, #0]
 8005018:	bd38      	pop	{r3, r4, r5, pc}
 800501a:	bf00      	nop
 800501c:	200002f0 	.word	0x200002f0

08005020 <_isatty_r>:
 8005020:	b538      	push	{r3, r4, r5, lr}
 8005022:	2300      	movs	r3, #0
 8005024:	4d05      	ldr	r5, [pc, #20]	; (800503c <_isatty_r+0x1c>)
 8005026:	4604      	mov	r4, r0
 8005028:	4608      	mov	r0, r1
 800502a:	602b      	str	r3, [r5, #0]
 800502c:	f7fc ff8c 	bl	8001f48 <_isatty>
 8005030:	1c43      	adds	r3, r0, #1
 8005032:	d102      	bne.n	800503a <_isatty_r+0x1a>
 8005034:	682b      	ldr	r3, [r5, #0]
 8005036:	b103      	cbz	r3, 800503a <_isatty_r+0x1a>
 8005038:	6023      	str	r3, [r4, #0]
 800503a:	bd38      	pop	{r3, r4, r5, pc}
 800503c:	200002f0 	.word	0x200002f0

08005040 <memchr>:
 8005040:	4603      	mov	r3, r0
 8005042:	b510      	push	{r4, lr}
 8005044:	b2c9      	uxtb	r1, r1
 8005046:	4402      	add	r2, r0
 8005048:	4293      	cmp	r3, r2
 800504a:	4618      	mov	r0, r3
 800504c:	d101      	bne.n	8005052 <memchr+0x12>
 800504e:	2000      	movs	r0, #0
 8005050:	e003      	b.n	800505a <memchr+0x1a>
 8005052:	7804      	ldrb	r4, [r0, #0]
 8005054:	3301      	adds	r3, #1
 8005056:	428c      	cmp	r4, r1
 8005058:	d1f6      	bne.n	8005048 <memchr+0x8>
 800505a:	bd10      	pop	{r4, pc}

0800505c <sqrt>:
 800505c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800505e:	4606      	mov	r6, r0
 8005060:	460f      	mov	r7, r1
 8005062:	f000 f81f 	bl	80050a4 <__ieee754_sqrt>
 8005066:	4632      	mov	r2, r6
 8005068:	4604      	mov	r4, r0
 800506a:	460d      	mov	r5, r1
 800506c:	463b      	mov	r3, r7
 800506e:	4630      	mov	r0, r6
 8005070:	4639      	mov	r1, r7
 8005072:	f7fb fcc1 	bl	80009f8 <__aeabi_dcmpun>
 8005076:	b990      	cbnz	r0, 800509e <sqrt+0x42>
 8005078:	2200      	movs	r2, #0
 800507a:	2300      	movs	r3, #0
 800507c:	4630      	mov	r0, r6
 800507e:	4639      	mov	r1, r7
 8005080:	f7fb fc92 	bl	80009a8 <__aeabi_dcmplt>
 8005084:	b158      	cbz	r0, 800509e <sqrt+0x42>
 8005086:	f7ff fb61 	bl	800474c <__errno>
 800508a:	2321      	movs	r3, #33	; 0x21
 800508c:	2200      	movs	r2, #0
 800508e:	6003      	str	r3, [r0, #0]
 8005090:	2300      	movs	r3, #0
 8005092:	4610      	mov	r0, r2
 8005094:	4619      	mov	r1, r3
 8005096:	f7fb fb3f 	bl	8000718 <__aeabi_ddiv>
 800509a:	4604      	mov	r4, r0
 800509c:	460d      	mov	r5, r1
 800509e:	4620      	mov	r0, r4
 80050a0:	4629      	mov	r1, r5
 80050a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080050a4 <__ieee754_sqrt>:
 80050a4:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8005248 <__ieee754_sqrt+0x1a4>
 80050a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050ac:	ea3c 0c01 	bics.w	ip, ip, r1
 80050b0:	460b      	mov	r3, r1
 80050b2:	4606      	mov	r6, r0
 80050b4:	460d      	mov	r5, r1
 80050b6:	460a      	mov	r2, r1
 80050b8:	4604      	mov	r4, r0
 80050ba:	d10e      	bne.n	80050da <__ieee754_sqrt+0x36>
 80050bc:	4602      	mov	r2, r0
 80050be:	f7fb fa01 	bl	80004c4 <__aeabi_dmul>
 80050c2:	4602      	mov	r2, r0
 80050c4:	460b      	mov	r3, r1
 80050c6:	4630      	mov	r0, r6
 80050c8:	4629      	mov	r1, r5
 80050ca:	f7fb f845 	bl	8000158 <__adddf3>
 80050ce:	4606      	mov	r6, r0
 80050d0:	460d      	mov	r5, r1
 80050d2:	4630      	mov	r0, r6
 80050d4:	4629      	mov	r1, r5
 80050d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050da:	2900      	cmp	r1, #0
 80050dc:	dc0d      	bgt.n	80050fa <__ieee754_sqrt+0x56>
 80050de:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80050e2:	ea5c 0c00 	orrs.w	ip, ip, r0
 80050e6:	d0f4      	beq.n	80050d2 <__ieee754_sqrt+0x2e>
 80050e8:	b139      	cbz	r1, 80050fa <__ieee754_sqrt+0x56>
 80050ea:	4602      	mov	r2, r0
 80050ec:	f7fb f832 	bl	8000154 <__aeabi_dsub>
 80050f0:	4602      	mov	r2, r0
 80050f2:	460b      	mov	r3, r1
 80050f4:	f7fb fb10 	bl	8000718 <__aeabi_ddiv>
 80050f8:	e7e9      	b.n	80050ce <__ieee754_sqrt+0x2a>
 80050fa:	1512      	asrs	r2, r2, #20
 80050fc:	f000 8089 	beq.w	8005212 <__ieee754_sqrt+0x16e>
 8005100:	2500      	movs	r5, #0
 8005102:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005106:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800510a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800510e:	07d2      	lsls	r2, r2, #31
 8005110:	bf5c      	itt	pl
 8005112:	005b      	lslpl	r3, r3, #1
 8005114:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8005118:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800511c:	bf58      	it	pl
 800511e:	0064      	lslpl	r4, r4, #1
 8005120:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8005124:	0062      	lsls	r2, r4, #1
 8005126:	2016      	movs	r0, #22
 8005128:	4629      	mov	r1, r5
 800512a:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 800512e:	1076      	asrs	r6, r6, #1
 8005130:	190f      	adds	r7, r1, r4
 8005132:	429f      	cmp	r7, r3
 8005134:	bfde      	ittt	le
 8005136:	1bdb      	suble	r3, r3, r7
 8005138:	1939      	addle	r1, r7, r4
 800513a:	192d      	addle	r5, r5, r4
 800513c:	005b      	lsls	r3, r3, #1
 800513e:	3801      	subs	r0, #1
 8005140:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8005144:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8005148:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800514c:	d1f0      	bne.n	8005130 <__ieee754_sqrt+0x8c>
 800514e:	4604      	mov	r4, r0
 8005150:	2720      	movs	r7, #32
 8005152:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8005156:	428b      	cmp	r3, r1
 8005158:	eb0c 0e00 	add.w	lr, ip, r0
 800515c:	dc02      	bgt.n	8005164 <__ieee754_sqrt+0xc0>
 800515e:	d113      	bne.n	8005188 <__ieee754_sqrt+0xe4>
 8005160:	4596      	cmp	lr, r2
 8005162:	d811      	bhi.n	8005188 <__ieee754_sqrt+0xe4>
 8005164:	f1be 0f00 	cmp.w	lr, #0
 8005168:	eb0e 000c 	add.w	r0, lr, ip
 800516c:	da56      	bge.n	800521c <__ieee754_sqrt+0x178>
 800516e:	2800      	cmp	r0, #0
 8005170:	db54      	blt.n	800521c <__ieee754_sqrt+0x178>
 8005172:	f101 0801 	add.w	r8, r1, #1
 8005176:	1a5b      	subs	r3, r3, r1
 8005178:	4641      	mov	r1, r8
 800517a:	4596      	cmp	lr, r2
 800517c:	bf88      	it	hi
 800517e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8005182:	eba2 020e 	sub.w	r2, r2, lr
 8005186:	4464      	add	r4, ip
 8005188:	005b      	lsls	r3, r3, #1
 800518a:	3f01      	subs	r7, #1
 800518c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8005190:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8005194:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005198:	d1dd      	bne.n	8005156 <__ieee754_sqrt+0xb2>
 800519a:	4313      	orrs	r3, r2
 800519c:	d01b      	beq.n	80051d6 <__ieee754_sqrt+0x132>
 800519e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800524c <__ieee754_sqrt+0x1a8>
 80051a2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8005250 <__ieee754_sqrt+0x1ac>
 80051a6:	e9da 0100 	ldrd	r0, r1, [sl]
 80051aa:	e9db 2300 	ldrd	r2, r3, [fp]
 80051ae:	f7fa ffd1 	bl	8000154 <__aeabi_dsub>
 80051b2:	e9da 8900 	ldrd	r8, r9, [sl]
 80051b6:	4602      	mov	r2, r0
 80051b8:	460b      	mov	r3, r1
 80051ba:	4640      	mov	r0, r8
 80051bc:	4649      	mov	r1, r9
 80051be:	f7fb fbfd 	bl	80009bc <__aeabi_dcmple>
 80051c2:	b140      	cbz	r0, 80051d6 <__ieee754_sqrt+0x132>
 80051c4:	e9da 0100 	ldrd	r0, r1, [sl]
 80051c8:	e9db 2300 	ldrd	r2, r3, [fp]
 80051cc:	f1b4 3fff 	cmp.w	r4, #4294967295
 80051d0:	d126      	bne.n	8005220 <__ieee754_sqrt+0x17c>
 80051d2:	463c      	mov	r4, r7
 80051d4:	3501      	adds	r5, #1
 80051d6:	106b      	asrs	r3, r5, #1
 80051d8:	0864      	lsrs	r4, r4, #1
 80051da:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80051de:	07ea      	lsls	r2, r5, #31
 80051e0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80051e4:	bf48      	it	mi
 80051e6:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 80051ea:	4620      	mov	r0, r4
 80051ec:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 80051f0:	e76d      	b.n	80050ce <__ieee754_sqrt+0x2a>
 80051f2:	0ae3      	lsrs	r3, r4, #11
 80051f4:	3915      	subs	r1, #21
 80051f6:	0564      	lsls	r4, r4, #21
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d0fa      	beq.n	80051f2 <__ieee754_sqrt+0x14e>
 80051fc:	02d8      	lsls	r0, r3, #11
 80051fe:	d50a      	bpl.n	8005216 <__ieee754_sqrt+0x172>
 8005200:	f1c2 0020 	rsb	r0, r2, #32
 8005204:	fa24 f000 	lsr.w	r0, r4, r0
 8005208:	1e55      	subs	r5, r2, #1
 800520a:	4094      	lsls	r4, r2
 800520c:	4303      	orrs	r3, r0
 800520e:	1b4a      	subs	r2, r1, r5
 8005210:	e776      	b.n	8005100 <__ieee754_sqrt+0x5c>
 8005212:	4611      	mov	r1, r2
 8005214:	e7f0      	b.n	80051f8 <__ieee754_sqrt+0x154>
 8005216:	005b      	lsls	r3, r3, #1
 8005218:	3201      	adds	r2, #1
 800521a:	e7ef      	b.n	80051fc <__ieee754_sqrt+0x158>
 800521c:	4688      	mov	r8, r1
 800521e:	e7aa      	b.n	8005176 <__ieee754_sqrt+0xd2>
 8005220:	f7fa ff9a 	bl	8000158 <__adddf3>
 8005224:	e9da 8900 	ldrd	r8, r9, [sl]
 8005228:	4602      	mov	r2, r0
 800522a:	460b      	mov	r3, r1
 800522c:	4640      	mov	r0, r8
 800522e:	4649      	mov	r1, r9
 8005230:	f7fb fbba 	bl	80009a8 <__aeabi_dcmplt>
 8005234:	b120      	cbz	r0, 8005240 <__ieee754_sqrt+0x19c>
 8005236:	1ca1      	adds	r1, r4, #2
 8005238:	bf08      	it	eq
 800523a:	3501      	addeq	r5, #1
 800523c:	3402      	adds	r4, #2
 800523e:	e7ca      	b.n	80051d6 <__ieee754_sqrt+0x132>
 8005240:	3401      	adds	r4, #1
 8005242:	f024 0401 	bic.w	r4, r4, #1
 8005246:	e7c6      	b.n	80051d6 <__ieee754_sqrt+0x132>
 8005248:	7ff00000 	.word	0x7ff00000
 800524c:	20000068 	.word	0x20000068
 8005250:	20000070 	.word	0x20000070

08005254 <_init>:
 8005254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005256:	bf00      	nop
 8005258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800525a:	bc08      	pop	{r3}
 800525c:	469e      	mov	lr, r3
 800525e:	4770      	bx	lr

08005260 <_fini>:
 8005260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005262:	bf00      	nop
 8005264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005266:	bc08      	pop	{r3}
 8005268:	469e      	mov	lr, r3
 800526a:	4770      	bx	lr
